
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_data(text, data) {
        data = '' + data;
        if (text.wholeText !== data)
            text.data = data;
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
            'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { stylesheet } = info;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                info.rules = {};
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
        return context;
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    /*
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     */

    const isUndefined = value => typeof value === "undefined";

    const isFunction = value => typeof value === "function";

    const isNumber = value => typeof value === "number";

    /**
     * Decides whether a given `event` should result in a navigation or not.
     * @param {object} event
     */
    function shouldNavigate(event) {
    	return (
    		!event.defaultPrevented &&
    		event.button === 0 &&
    		!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
    	);
    }

    function createCounter() {
    	let i = 0;
    	/**
    	 * Returns an id and increments the internal state
    	 * @returns {number}
    	 */
    	return () => i++;
    }

    /**
     * Create a globally unique id
     *
     * @returns {string} An id
     */
    function createGlobalId() {
    	return Math.random().toString(36).substring(2);
    }

    const isSSR = typeof window === "undefined";

    function addListener(target, type, handler) {
    	target.addEventListener(type, handler);
    	return () => target.removeEventListener(type, handler);
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    /*
     * Adapted from https://github.com/EmilTholin/svelte-routing
     *
     * https://github.com/EmilTholin/svelte-routing/blob/master/LICENSE
     */

    const createKey = ctxName => `@@svnav-ctx__${ctxName}`;

    // Use strings instead of objects, so different versions of
    // svelte-navigator can potentially still work together
    const LOCATION = createKey("LOCATION");
    const ROUTER = createKey("ROUTER");
    const ROUTE = createKey("ROUTE");
    const ROUTE_PARAMS = createKey("ROUTE_PARAMS");
    const FOCUS_ELEM = createKey("FOCUS_ELEM");

    const paramRegex = /^:(.+)/;

    /**
     * Check if `string` starts with `search`
     * @param {string} string
     * @param {string} search
     * @return {boolean}
     */
    const startsWith = (string, search) =>
    	string.substr(0, search.length) === search;

    /**
     * Check if `segment` is a root segment
     * @param {string} segment
     * @return {boolean}
     */
    const isRootSegment = segment => segment === "";

    /**
     * Check if `segment` is a dynamic segment
     * @param {string} segment
     * @return {boolean}
     */
    const isDynamic = segment => paramRegex.test(segment);

    /**
     * Check if `segment` is a splat
     * @param {string} segment
     * @return {boolean}
     */
    const isSplat = segment => segment[0] === "*";

    /**
     * Strip potention splat and splatname of the end of a path
     * @param {string} str
     * @return {string}
     */
    const stripSplat = str => str.replace(/\*.*$/, "");

    /**
     * Strip `str` of potential start and end `/`
     * @param {string} str
     * @return {string}
     */
    const stripSlashes = str => str.replace(/(^\/+|\/+$)/g, "");

    /**
     * Split up the URI into segments delimited by `/`
     * @param {string} uri
     * @return {string[]}
     */
    function segmentize(uri, filterFalsy = false) {
    	const segments = stripSlashes(uri).split("/");
    	return filterFalsy ? segments.filter(Boolean) : segments;
    }

    /**
     * Add the query to the pathname if a query is given
     * @param {string} pathname
     * @param {string} [query]
     * @return {string}
     */
    const addQuery = (pathname, query) =>
    	pathname + (query ? `?${query}` : "");

    /**
     * Normalizes a basepath
     *
     * @param {string} path
     * @returns {string}
     *
     * @example
     * normalizePath("base/path/") // -> "/base/path"
     */
    const normalizePath = path => `/${stripSlashes(path)}`;

    /**
     * Joins and normalizes multiple path fragments
     *
     * @param {...string} pathFragments
     * @returns {string}
     */
    function join(...pathFragments) {
    	const joinFragment = fragment => segmentize(fragment, true).join("/");
    	const joinedSegments = pathFragments.map(joinFragment).join("/");
    	return normalizePath(joinedSegments);
    }

    // We start from 1 here, so we can check if an origin id has been passed
    // by using `originId || <fallback>`
    const LINK_ID = 1;
    const ROUTE_ID = 2;
    const ROUTER_ID = 3;
    const USE_FOCUS_ID = 4;
    const USE_LOCATION_ID = 5;
    const USE_MATCH_ID = 6;
    const USE_NAVIGATE_ID = 7;
    const USE_PARAMS_ID = 8;
    const USE_RESOLVABLE_ID = 9;
    const USE_RESOLVE_ID = 10;
    const NAVIGATE_ID = 11;

    const labels = {
    	[LINK_ID]: "Link",
    	[ROUTE_ID]: "Route",
    	[ROUTER_ID]: "Router",
    	[USE_FOCUS_ID]: "useFocus",
    	[USE_LOCATION_ID]: "useLocation",
    	[USE_MATCH_ID]: "useMatch",
    	[USE_NAVIGATE_ID]: "useNavigate",
    	[USE_PARAMS_ID]: "useParams",
    	[USE_RESOLVABLE_ID]: "useResolvable",
    	[USE_RESOLVE_ID]: "useResolve",
    	[NAVIGATE_ID]: "navigate",
    };

    const createLabel = labelId => labels[labelId];

    function createIdentifier(labelId, props) {
    	let attr;
    	if (labelId === ROUTE_ID) {
    		attr = props.path ? `path="${props.path}"` : "default";
    	} else if (labelId === LINK_ID) {
    		attr = `to="${props.to}"`;
    	} else if (labelId === ROUTER_ID) {
    		attr = `basepath="${props.basepath || ""}"`;
    	}
    	return `<${createLabel(labelId)} ${attr || ""} />`;
    }

    function createMessage(labelId, message, props, originId) {
    	const origin = props && createIdentifier(originId || labelId, props);
    	const originMsg = origin ? `\n\nOccurred in: ${origin}` : "";
    	const label = createLabel(labelId);
    	const msg = isFunction(message) ? message(label) : message;
    	return `<${label}> ${msg}${originMsg}`;
    }

    const createMessageHandler = handler => (...args) =>
    	handler(createMessage(...args));

    const fail = createMessageHandler(message => {
    	throw new Error(message);
    });

    // eslint-disable-next-line no-console
    const warn = createMessageHandler(console.warn);

    const SEGMENT_POINTS = 4;
    const STATIC_POINTS = 3;
    const DYNAMIC_POINTS = 2;
    const SPLAT_PENALTY = 1;
    const ROOT_POINTS = 1;

    /**
     * Score a route depending on how its individual segments look
     * @param {object} route
     * @param {number} index
     * @return {object}
     */
    function rankRoute(route, index) {
    	const score = route.default
    		? 0
    		: segmentize(route.fullPath).reduce((acc, segment) => {
    				let nextScore = acc;
    				nextScore += SEGMENT_POINTS;

    				if (isRootSegment(segment)) {
    					nextScore += ROOT_POINTS;
    				} else if (isDynamic(segment)) {
    					nextScore += DYNAMIC_POINTS;
    				} else if (isSplat(segment)) {
    					nextScore -= SEGMENT_POINTS + SPLAT_PENALTY;
    				} else {
    					nextScore += STATIC_POINTS;
    				}

    				return nextScore;
    		  }, 0);

    	return { route, score, index };
    }

    /**
     * Give a score to all routes and sort them on that
     * @param {object[]} routes
     * @return {object[]}
     */
    function rankRoutes(routes) {
    	return (
    		routes
    			.map(rankRoute)
    			// If two routes have the exact same score, we go by index instead
    			.sort((a, b) => {
    				if (a.score < b.score) {
    					return 1;
    				}
    				if (a.score > b.score) {
    					return -1;
    				}
    				return a.index - b.index;
    			})
    	);
    }

    /**
     * Ranks and picks the best route to match. Each segment gets the highest
     * amount of points, then the type of segment gets an additional amount of
     * points where
     *
     *  static > dynamic > splat > root
     *
     * This way we don't have to worry about the order of our routes, let the
     * computers do it.
     *
     * A route looks like this
     *
     *  { fullPath, default, value }
     *
     * And a returned match looks like:
     *
     *  { route, params, uri }
     *
     * @param {object[]} routes
     * @param {string} uri
     * @return {?object}
     */
    function pick(routes, uri) {
    	let bestMatch;
    	let defaultMatch;

    	const [uriPathname] = uri.split("?");
    	const uriSegments = segmentize(uriPathname);
    	const isRootUri = uriSegments[0] === "";
    	const ranked = rankRoutes(routes);

    	for (let i = 0, l = ranked.length; i < l; i++) {
    		const { route } = ranked[i];
    		let missed = false;
    		const params = {};

    		// eslint-disable-next-line no-shadow
    		const createMatch = uri => ({ ...route, params, uri });

    		if (route.default) {
    			defaultMatch = createMatch(uri);
    			continue;
    		}

    		const routeSegments = segmentize(route.fullPath);
    		const max = Math.max(uriSegments.length, routeSegments.length);
    		let index = 0;

    		for (; index < max; index++) {
    			const routeSegment = routeSegments[index];
    			const uriSegment = uriSegments[index];

    			if (!isUndefined(routeSegment) && isSplat(routeSegment)) {
    				// Hit a splat, just grab the rest, and return a match
    				// uri:   /files/documents/work
    				// route: /files/* or /files/*splatname
    				const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);

    				params[splatName] = uriSegments
    					.slice(index)
    					.map(decodeURIComponent)
    					.join("/");
    				break;
    			}

    			if (isUndefined(uriSegment)) {
    				// URI is shorter than the route, no match
    				// uri:   /users
    				// route: /users/:userId
    				missed = true;
    				break;
    			}

    			const dynamicMatch = paramRegex.exec(routeSegment);

    			if (dynamicMatch && !isRootUri) {
    				const value = decodeURIComponent(uriSegment);
    				params[dynamicMatch[1]] = value;
    			} else if (routeSegment !== uriSegment) {
    				// Current segments don't match, not dynamic, not splat, so no match
    				// uri:   /users/123/settings
    				// route: /users/:id/profile
    				missed = true;
    				break;
    			}
    		}

    		if (!missed) {
    			bestMatch = createMatch(join(...uriSegments.slice(0, index)));
    			break;
    		}
    	}

    	return bestMatch || defaultMatch || null;
    }

    /**
     * Check if the `route.fullPath` matches the `uri`.
     * @param {Object} route
     * @param {string} uri
     * @return {?object}
     */
    function match(route, uri) {
    	return pick([route], uri);
    }

    /**
     * Resolve URIs as though every path is a directory, no files. Relative URIs
     * in the browser can feel awkward because not only can you be "in a directory",
     * you can be "at a file", too. For example:
     *
     *  browserSpecResolve('foo', '/bar/') => /bar/foo
     *  browserSpecResolve('foo', '/bar') => /foo
     *
     * But on the command line of a file system, it's not as complicated. You can't
     * `cd` from a file, only directories. This way, links have to know less about
     * their current path. To go deeper you can do this:
     *
     *  <Link to="deeper"/>
     *  // instead of
     *  <Link to=`{${props.uri}/deeper}`/>
     *
     * Just like `cd`, if you want to go deeper from the command line, you do this:
     *
     *  cd deeper
     *  # not
     *  cd $(pwd)/deeper
     *
     * By treating every path as a directory, linking to relative paths should
     * require less contextual information and (fingers crossed) be more intuitive.
     * @param {string} to
     * @param {string} base
     * @return {string}
     */
    function resolve(to, base) {
    	// /foo/bar, /baz/qux => /foo/bar
    	if (startsWith(to, "/")) {
    		return to;
    	}

    	const [toPathname, toQuery] = to.split("?");
    	const [basePathname] = base.split("?");
    	const toSegments = segmentize(toPathname);
    	const baseSegments = segmentize(basePathname);

    	// ?a=b, /users?b=c => /users?a=b
    	if (toSegments[0] === "") {
    		return addQuery(basePathname, toQuery);
    	}

    	// profile, /users/789 => /users/789/profile
    	if (!startsWith(toSegments[0], ".")) {
    		const pathname = baseSegments.concat(toSegments).join("/");
    		return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);
    	}

    	// ./       , /users/123 => /users/123
    	// ../      , /users/123 => /users
    	// ../..    , /users/123 => /
    	// ../../one, /a/b/c/d   => /a/b/one
    	// .././one , /a/b/c/d   => /a/b/c/one
    	const allSegments = baseSegments.concat(toSegments);
    	const segments = [];

    	allSegments.forEach(segment => {
    		if (segment === "..") {
    			segments.pop();
    		} else if (segment !== ".") {
    			segments.push(segment);
    		}
    	});

    	return addQuery(`/${segments.join("/")}`, toQuery);
    }

    /**
     * Normalizes a location for consumption by `Route` children and the `Router`.
     * It removes the apps basepath from the pathname
     * and sets default values for `search` and `hash` properties.
     *
     * @param {Object} location The current global location supplied by the history component
     * @param {string} basepath The applications basepath (i.e. when serving from a subdirectory)
     *
     * @returns The normalized location
     */
    function normalizeLocation(location, basepath) {
    	const { pathname, hash = "", search = "", state } = location;
    	const baseSegments = segmentize(basepath, true);
    	const pathSegments = segmentize(pathname, true);
    	while (baseSegments.length) {
    		if (baseSegments[0] !== pathSegments[0]) {
    			fail(
    				ROUTER_ID,
    				`Invalid state: All locations must begin with the basepath "${basepath}", found "${pathname}"`,
    			);
    		}
    		baseSegments.shift();
    		pathSegments.shift();
    	}
    	return {
    		pathname: join(...pathSegments),
    		hash,
    		search,
    		state,
    	};
    }

    const normalizeUrlFragment = frag => (frag.length === 1 ? "" : frag);

    /**
     * Creates a location object from an url.
     * It is used to create a location from the url prop used in SSR
     *
     * @param {string} url The url string (e.g. "/path/to/somewhere")
     *
     * @returns {{ pathname: string; search: string; hash: string }} The location
     */
    function createLocation(url) {
    	const searchIndex = url.indexOf("?");
    	const hashIndex = url.indexOf("#");
    	const hasSearchIndex = searchIndex !== -1;
    	const hasHashIndex = hashIndex !== -1;
    	const hash = hasHashIndex ? normalizeUrlFragment(url.substr(hashIndex)) : "";
    	const pathnameAndSearch = hasHashIndex ? url.substr(0, hashIndex) : url;
    	const search = hasSearchIndex
    		? normalizeUrlFragment(pathnameAndSearch.substr(searchIndex))
    		: "";
    	const pathname = hasSearchIndex
    		? pathnameAndSearch.substr(0, searchIndex)
    		: pathnameAndSearch;
    	return { pathname, search, hash };
    }

    /**
     * Resolves a link relative to the parent Route and the Routers basepath.
     *
     * @param {string} path The given path, that will be resolved
     * @param {string} routeBase The current Routes base path
     * @param {string} appBase The basepath of the app. Used, when serving from a subdirectory
     * @returns {string} The resolved path
     *
     * @example
     * resolveLink("relative", "/routeBase", "/") // -> "/routeBase/relative"
     * resolveLink("/absolute", "/routeBase", "/") // -> "/absolute"
     * resolveLink("relative", "/routeBase", "/base") // -> "/base/routeBase/relative"
     * resolveLink("/absolute", "/routeBase", "/base") // -> "/base/absolute"
     */
    function resolveLink(path, routeBase, appBase) {
    	return join(appBase, resolve(path, routeBase));
    }

    /**
     * Get the uri for a Route, by matching it against the current location.
     *
     * @param {string} routePath The Routes resolved path
     * @param {string} pathname The current locations pathname
     */
    function extractBaseUri(routePath, pathname) {
    	const fullPath = normalizePath(stripSplat(routePath));
    	const baseSegments = segmentize(fullPath, true);
    	const pathSegments = segmentize(pathname, true).slice(0, baseSegments.length);
    	const routeMatch = match({ fullPath }, join(...pathSegments));
    	return routeMatch && routeMatch.uri;
    }

    /*
     * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js
     *
     * https://github.com/reach/router/blob/master/LICENSE
     */

    const POP = "POP";
    const PUSH = "PUSH";
    const REPLACE = "REPLACE";

    function getLocation(source) {
    	return {
    		...source.location,
    		pathname: encodeURI(decodeURI(source.location.pathname)),
    		state: source.history.state,
    		_key: (source.history.state && source.history.state._key) || "initial",
    	};
    }

    function createHistory(source) {
    	let listeners = [];
    	let location = getLocation(source);
    	let action = POP;

    	const notifyListeners = (listenerFns = listeners) =>
    		listenerFns.forEach(listener => listener({ location, action }));

    	return {
    		get location() {
    			return location;
    		},
    		listen(listener) {
    			listeners.push(listener);

    			const popstateListener = () => {
    				location = getLocation(source);
    				action = POP;
    				notifyListeners([listener]);
    			};

    			// Call listener when it is registered
    			notifyListeners([listener]);

    			const unlisten = addListener(source, "popstate", popstateListener);
    			return () => {
    				unlisten();
    				listeners = listeners.filter(fn => fn !== listener);
    			};
    		},
    		/**
    		 * Navigate to a new absolute route.
    		 *
    		 * @param {string|number} to The path to navigate to.
    		 *
    		 * If `to` is a number we will navigate to the stack entry index + `to`
    		 * (-> `navigate(-1)`, is equivalent to hitting the back button of the browser)
    		 * @param {Object} options
    		 * @param {*} [options.state] The state will be accessible through `location.state`
    		 * @param {boolean} [options.replace=false] Replace the current entry in the history
    		 * stack, instead of pushing on a new one
    		 */
    		navigate(to, options) {
    			const { state = {}, replace = false } = options || {};
    			action = replace ? REPLACE : PUSH;
    			if (isNumber(to)) {
    				if (options) {
    					warn(
    						NAVIGATE_ID,
    						"Navigation options (state or replace) are not supported, " +
    							"when passing a number as the first argument to navigate. " +
    							"They are ignored.",
    					);
    				}
    				action = POP;
    				source.history.go(to);
    			} else {
    				const keyedState = { ...state, _key: createGlobalId() };
    				// try...catch iOS Safari limits to 100 pushState calls
    				try {
    					source.history[replace ? "replaceState" : "pushState"](
    						keyedState,
    						"",
    						to,
    					);
    				} catch (e) {
    					source.location[replace ? "replace" : "assign"](to);
    				}
    			}

    			location = getLocation(source);
    			notifyListeners();
    		},
    	};
    }

    function createStackFrame(state, uri) {
    	return { ...createLocation(uri), state };
    }

    // Stores history entries in memory for testing or other platforms like Native
    function createMemorySource(initialPathname = "/") {
    	let index = 0;
    	let stack = [createStackFrame(null, initialPathname)];

    	return {
    		// This is just for testing...
    		get entries() {
    			return stack;
    		},
    		get location() {
    			return stack[index];
    		},
    		addEventListener() {},
    		removeEventListener() {},
    		history: {
    			get state() {
    				return stack[index].state;
    			},
    			pushState(state, title, uri) {
    				index++;
    				// Throw away anything in the stack with an index greater than the current index.
    				// This happens, when we go back using `go(-n)`. The index is now less than `stack.length`.
    				// If we call `go(+n)` the stack entries with an index greater than the current index can
    				// be reused.
    				// However, if we navigate to a path, instead of a number, we want to create a new branch
    				// of navigation.
    				stack = stack.slice(0, index);
    				stack.push(createStackFrame(state, uri));
    			},
    			replaceState(state, title, uri) {
    				stack[index] = createStackFrame(state, uri);
    			},
    			go(to) {
    				const newIndex = index + to;
    				if (newIndex < 0 || newIndex > stack.length - 1) {
    					return;
    				}
    				index = newIndex;
    			},
    		},
    	};
    }

    // Global history uses window.history as the source if available,
    // otherwise a memory history
    const canUseDOM = !!(
    	!isSSR &&
    	window.document &&
    	window.document.createElement
    );
    // Use memory history in iframes (for example in Svelte REPL)
    const isEmbeddedPage = !isSSR && window.location.origin === "null";
    const globalHistory = createHistory(
    	canUseDOM && !isEmbeddedPage ? window : createMemorySource(),
    );

    // We need to keep the focus candidate in a separate file, so svelte does
    // not update, when we mutate it.
    // Also, we need a single global reference, because taking focus needs to
    // work globally, even if we have multiple top level routers
    // eslint-disable-next-line import/no-mutable-exports
    let focusCandidate = null;

    // eslint-disable-next-line import/no-mutable-exports
    let initialNavigation = true;

    /**
     * Check if RouterA is above RouterB in the document
     * @param {number} routerIdA The first Routers id
     * @param {number} routerIdB The second Routers id
     */
    function isAbove(routerIdA, routerIdB) {
    	const routerMarkers = document.querySelectorAll("[data-svnav-router]");
    	for (let i = 0; i < routerMarkers.length; i++) {
    		const node = routerMarkers[i];
    		const currentId = Number(node.dataset.svnavRouter);
    		if (currentId === routerIdA) return true;
    		if (currentId === routerIdB) return false;
    	}
    	return false;
    }

    /**
     * Check if a Route candidate is the best choice to move focus to,
     * and store the best match.
     * @param {{
         level: number;
         routerId: number;
         route: {
           id: number;
           focusElement: import("svelte/store").Readable<Promise<Element>|null>;
         }
       }} item A Route candidate, that updated and is visible after a navigation
     */
    function pushFocusCandidate(item) {
    	if (
    		// Best candidate if it's the only candidate...
    		!focusCandidate ||
    		// Route is nested deeper, than previous candidate
    		// -> Route change was triggered in the deepest affected
    		// Route, so that's were focus should move to
    		item.level > focusCandidate.level ||
    		// If the level is identical, we want to focus the first Route in the document,
    		// so we pick the first Router lookin from page top to page bottom.
    		(item.level === focusCandidate.level &&
    			isAbove(item.routerId, focusCandidate.routerId))
    	) {
    		focusCandidate = item;
    	}
    }

    /**
     * Reset the focus candidate.
     */
    function clearFocusCandidate() {
    	focusCandidate = null;
    }

    function initialNavigationOccurred() {
    	initialNavigation = false;
    }

    /*
     * `focus` Adapted from https://github.com/oaf-project/oaf-side-effects/blob/master/src/index.ts
     *
     * https://github.com/oaf-project/oaf-side-effects/blob/master/LICENSE
     */
    function focus(elem) {
    	if (!elem) return false;
    	const TABINDEX = "tabindex";
    	try {
    		if (!elem.hasAttribute(TABINDEX)) {
    			elem.setAttribute(TABINDEX, "-1");
    			let unlisten;
    			// We remove tabindex after blur to avoid weird browser behavior
    			// where a mouse click can activate elements with tabindex="-1".
    			const blurListener = () => {
    				elem.removeAttribute(TABINDEX);
    				unlisten();
    			};
    			unlisten = addListener(elem, "blur", blurListener);
    		}
    		elem.focus();
    		return document.activeElement === elem;
    	} catch (e) {
    		// Apparently trying to focus a disabled element in IE can throw.
    		// See https://stackoverflow.com/a/1600194/2476884
    		return false;
    	}
    }

    function isEndMarker(elem, id) {
    	return Number(elem.dataset.svnavRouteEnd) === id;
    }

    function isHeading(elem) {
    	return /^H[1-6]$/i.test(elem.tagName);
    }

    function query(selector, parent = document) {
    	return parent.querySelector(selector);
    }

    function queryHeading(id) {
    	const marker = query(`[data-svnav-route-start="${id}"]`);
    	let current = marker.nextElementSibling;
    	while (!isEndMarker(current, id)) {
    		if (isHeading(current)) {
    			return current;
    		}
    		const heading = query("h1,h2,h3,h4,h5,h6", current);
    		if (heading) {
    			return heading;
    		}
    		current = current.nextElementSibling;
    	}
    	return null;
    }

    function handleFocus(route) {
    	Promise.resolve(get_store_value(route.focusElement)).then(elem => {
    		const focusElement = elem || queryHeading(route.id);
    		if (!focusElement) {
    			warn(
    				ROUTER_ID,
    				"Could not find an element to focus. " +
    					"You should always render a header for accessibility reasons, " +
    					'or set a custom focus element via the "useFocus" hook. ' +
    					"If you don't want this Route or Router to manage focus, " +
    					'pass "primary={false}" to it.',
    				route,
    				ROUTE_ID,
    			);
    		}
    		const headingFocused = focus(focusElement);
    		if (headingFocused) return;
    		focus(document.documentElement);
    	});
    }

    const createTriggerFocus = (a11yConfig, announcementText, location) => (
    	manageFocus,
    	announceNavigation,
    ) =>
    	// Wait until the dom is updated, so we can look for headings
    	tick().then(() => {
    		if (!focusCandidate || initialNavigation) {
    			initialNavigationOccurred();
    			return;
    		}
    		if (manageFocus) {
    			handleFocus(focusCandidate.route);
    		}
    		if (a11yConfig.announcements && announceNavigation) {
    			const { path, fullPath, meta, params, uri } = focusCandidate.route;
    			const announcementMessage = a11yConfig.createAnnouncement(
    				{ path, fullPath, meta, params, uri },
    				get_store_value(location),
    			);
    			Promise.resolve(announcementMessage).then(message => {
    				announcementText.set(message);
    			});
    		}
    		clearFocusCandidate();
    	});

    const visuallyHiddenStyle =
    	"position:fixed;" +
    	"top:-1px;" +
    	"left:0;" +
    	"width:1px;" +
    	"height:1px;" +
    	"padding:0;" +
    	"overflow:hidden;" +
    	"clip:rect(0,0,0,0);" +
    	"white-space:nowrap;" +
    	"border:0;";

    /* node_modules/svelte-navigator/src/Router.svelte generated by Svelte v3.48.0 */

    function create_if_block$c(ctx) {
    	let div;
    	let t;

    	return {
    		c() {
    			div = element("div");
    			t = text(/*$announcementText*/ ctx[0]);
    			attr(div, "role", "status");
    			attr(div, "aria-atomic", "true");
    			attr(div, "aria-live", "polite");
    			attr(div, "style", visuallyHiddenStyle);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*$announcementText*/ 1) set_data(t, /*$announcementText*/ ctx[0]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    function create_fragment$K(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let if_block_anchor;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
    	let if_block = /*isTopLevelRouter*/ ctx[2] && /*manageFocus*/ ctx[4] && /*a11yConfig*/ ctx[1].announcements && create_if_block$c(ctx);

    	return {
    		c() {
    			div = element("div");
    			t0 = space();
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			set_style(div, "display", "none");
    			attr(div, "aria-hidden", "true");
    			attr(div, "data-svnav-router", /*routerId*/ ctx[3]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			insert(target, t0, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			insert(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[19],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[19], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*isTopLevelRouter*/ ctx[2] && /*manageFocus*/ ctx[4] && /*a11yConfig*/ ctx[1].announcements) if_block.p(ctx, dirty);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (detaching) detach(t0);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching) detach(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    const createId$1 = createCounter();
    const defaultBasepath = "/";

    function instance$z($$self, $$props, $$invalidate) {
    	let $location;
    	let $activeRoute;
    	let $prevLocation;
    	let $routes;
    	let $announcementText;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { basepath = defaultBasepath } = $$props;
    	let { url = null } = $$props;
    	let { history = globalHistory } = $$props;
    	let { primary = true } = $$props;
    	let { a11y = {} } = $$props;

    	const a11yConfig = {
    		createAnnouncement: route => `Navigated to ${route.uri}`,
    		announcements: true,
    		...a11y
    	};

    	// Remember the initial `basepath`, so we can fire a warning
    	// when the user changes it later
    	const initialBasepath = basepath;

    	const normalizedBasepath = normalizePath(basepath);
    	const locationContext = getContext(LOCATION);
    	const routerContext = getContext(ROUTER);
    	const isTopLevelRouter = !locationContext;
    	const routerId = createId$1();
    	const manageFocus = primary && !(routerContext && !routerContext.manageFocus);
    	const announcementText = writable("");
    	component_subscribe($$self, announcementText, value => $$invalidate(0, $announcementText = value));
    	const routes = writable([]);
    	component_subscribe($$self, routes, value => $$invalidate(18, $routes = value));
    	const activeRoute = writable(null);
    	component_subscribe($$self, activeRoute, value => $$invalidate(16, $activeRoute = value));

    	// Used in SSR to synchronously set that a Route is active.
    	let hasActiveRoute = false;

    	// Nesting level of router.
    	// We will need this to identify sibling routers, when moving
    	// focus on navigation, so we can focus the first possible router
    	const level = isTopLevelRouter ? 0 : routerContext.level + 1;

    	// If we're running an SSR we force the location to the `url` prop
    	const getInitialLocation = () => normalizeLocation(isSSR ? createLocation(url) : history.location, normalizedBasepath);

    	const location = isTopLevelRouter
    	? writable(getInitialLocation())
    	: locationContext;

    	component_subscribe($$self, location, value => $$invalidate(15, $location = value));
    	const prevLocation = writable($location);
    	component_subscribe($$self, prevLocation, value => $$invalidate(17, $prevLocation = value));
    	const triggerFocus = createTriggerFocus(a11yConfig, announcementText, location);
    	const createRouteFilter = routeId => routeList => routeList.filter(routeItem => routeItem.id !== routeId);

    	function registerRoute(route) {
    		if (isSSR) {
    			// In SSR we should set the activeRoute immediately if it is a match.
    			// If there are more Routes being registered after a match is found,
    			// we just skip them.
    			if (hasActiveRoute) {
    				return;
    			}

    			const matchingRoute = match(route, $location.pathname);

    			if (matchingRoute) {
    				hasActiveRoute = true;

    				// Return the match in SSR mode, so the matched Route can use it immediatly.
    				// Waiting for activeRoute to update does not work, because it updates
    				// after the Route is initialized
    				return matchingRoute; // eslint-disable-line consistent-return
    			}
    		} else {
    			routes.update(prevRoutes => {
    				// Remove an old version of the updated route,
    				// before pushing the new version
    				const nextRoutes = createRouteFilter(route.id)(prevRoutes);

    				nextRoutes.push(route);
    				return nextRoutes;
    			});
    		}
    	}

    	function unregisterRoute(routeId) {
    		routes.update(createRouteFilter(routeId));
    	}

    	if (!isTopLevelRouter && basepath !== defaultBasepath) {
    		warn(ROUTER_ID, 'Only top-level Routers can have a "basepath" prop. It is ignored.', { basepath });
    	}

    	if (isTopLevelRouter) {
    		// The topmost Router in the tree is responsible for updating
    		// the location store and supplying it through context.
    		onMount(() => {
    			const unlisten = history.listen(changedHistory => {
    				const normalizedLocation = normalizeLocation(changedHistory.location, normalizedBasepath);
    				prevLocation.set($location);
    				location.set(normalizedLocation);
    			});

    			return unlisten;
    		});

    		setContext(LOCATION, location);
    	}

    	setContext(ROUTER, {
    		activeRoute,
    		registerRoute,
    		unregisterRoute,
    		manageFocus,
    		level,
    		id: routerId,
    		history: isTopLevelRouter ? history : routerContext.history,
    		basepath: isTopLevelRouter
    		? normalizedBasepath
    		: routerContext.basepath
    	});

    	$$self.$$set = $$props => {
    		if ('basepath' in $$props) $$invalidate(10, basepath = $$props.basepath);
    		if ('url' in $$props) $$invalidate(11, url = $$props.url);
    		if ('history' in $$props) $$invalidate(12, history = $$props.history);
    		if ('primary' in $$props) $$invalidate(13, primary = $$props.primary);
    		if ('a11y' in $$props) $$invalidate(14, a11y = $$props.a11y);
    		if ('$$scope' in $$props) $$invalidate(19, $$scope = $$props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*basepath*/ 1024) {
    			if (basepath !== initialBasepath) {
    				warn(ROUTER_ID, 'You cannot change the "basepath" prop. It is ignored.');
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$routes, $location*/ 294912) {
    			// This reactive statement will be run when the Router is created
    			// when there are no Routes and then again the following tick, so it
    			// will not find an active Route in SSR and in the browser it will only
    			// pick an active Route after all Routes have been registered.
    			{
    				const bestMatch = pick($routes, $location.pathname);
    				activeRoute.set(bestMatch);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$location, $prevLocation*/ 163840) {
    			// Manage focus and announce navigation to screen reader users
    			{
    				if (isTopLevelRouter) {
    					const hasHash = !!$location.hash;

    					// When a hash is present in the url, we skip focus management, because
    					// focusing a different element will prevent in-page jumps (See #3)
    					const shouldManageFocus = !hasHash && manageFocus;

    					// We don't want to make an announcement, when the hash changes,
    					// but the active route stays the same
    					const announceNavigation = !hasHash || $location.pathname !== $prevLocation.pathname;

    					triggerFocus(shouldManageFocus, announceNavigation);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$activeRoute*/ 65536) {
    			// Queue matched Route, so top level Router can decide which Route to focus.
    			// Non primary Routers should just be ignored
    			if (manageFocus && $activeRoute && $activeRoute.primary) {
    				pushFocusCandidate({ level, routerId, route: $activeRoute });
    			}
    		}
    	};

    	return [
    		$announcementText,
    		a11yConfig,
    		isTopLevelRouter,
    		routerId,
    		manageFocus,
    		announcementText,
    		routes,
    		activeRoute,
    		location,
    		prevLocation,
    		basepath,
    		url,
    		history,
    		primary,
    		a11y,
    		$location,
    		$activeRoute,
    		$prevLocation,
    		$routes,
    		$$scope,
    		slots
    	];
    }

    class Router extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(
    			this,
    			options,
    			instance$z,
    			create_fragment$K,
    			safe_not_equal,
    			{
    				basepath: 10,
    				url: 11,
    				history: 12,
    				primary: 13,
    				a11y: 14
    			},
    			null,
    			[-1, -1]
    		);
    	}
    }

    var Router$1 = Router;

    /**
     * Check if a component or hook have been created outside of a
     * context providing component
     * @param {number} componentId
     * @param {*} props
     * @param {string?} ctxKey
     * @param {number?} ctxProviderId
     */
    function usePreflightCheck(
    	componentId,
    	props,
    	ctxKey = ROUTER,
    	ctxProviderId = ROUTER_ID,
    ) {
    	const ctx = getContext(ctxKey);
    	if (!ctx) {
    		fail(
    			componentId,
    			label =>
    				`You cannot use ${label} outside of a ${createLabel(ctxProviderId)}.`,
    			props,
    		);
    	}
    }

    const toReadonly = ctx => {
    	const { subscribe } = getContext(ctx);
    	return { subscribe };
    };

    /**
     * Access the current location via a readable store.
     * @returns {import("svelte/store").Readable<{
        pathname: string;
        search: string;
        hash: string;
        state: {};
      }>}
     *
     * @example
      ```html
      <script>
        import { useLocation } from "svelte-navigator";

        const location = useLocation();

        $: console.log($location);
        // {
        //   pathname: "/blog",
        //   search: "?id=123",
        //   hash: "#comments",
        //   state: {}
        // }
      </script>
      ```
     */
    function useLocation() {
    	usePreflightCheck(USE_LOCATION_ID);
    	return toReadonly(LOCATION);
    }

    /**
     * @typedef {{
        path: string;
        fullPath: string;
        uri: string;
        params: {};
      }} RouteMatch
     */

    /**
     * @typedef {import("svelte/store").Readable<RouteMatch|null>} RouteMatchStore
     */

    /**
     * Access the history of top level Router.
     */
    function useHistory() {
    	const { history } = getContext(ROUTER);
    	return history;
    }

    /**
     * Access the base of the parent Route.
     */
    function useRouteBase() {
    	const route = getContext(ROUTE);
    	return route ? derived(route, _route => _route.base) : writable("/");
    }

    /**
     * Resolve a given link relative to the current `Route` and the `Router`s `basepath`.
     * It is used under the hood in `Link` and `useNavigate`.
     * You can use it to manually resolve links, when using the `link` or `links` actions.
     *
     * @returns {(path: string) => string}
     *
     * @example
      ```html
      <script>
        import { link, useResolve } from "svelte-navigator";

        const resolve = useResolve();
        // `resolvedLink` will be resolved relative to its parent Route
        // and the Routers `basepath`
        const resolvedLink = resolve("relativePath");
      </script>

      <a href={resolvedLink} use:link>Relative link</a>
      ```
     */
    function useResolve() {
    	usePreflightCheck(USE_RESOLVE_ID);
    	const routeBase = useRouteBase();
    	const { basepath: appBase } = getContext(ROUTER);
    	/**
    	 * Resolves the path relative to the current route and basepath.
    	 *
    	 * @param {string} path The path to resolve
    	 * @returns {string} The resolved path
    	 */
    	const resolve = path => resolveLink(path, get_store_value(routeBase), appBase);
    	return resolve;
    }

    /**
     * A hook, that returns a context-aware version of `navigate`.
     * It will automatically resolve the given link relative to the current Route.
     * It will also resolve a link against the `basepath` of the Router.
     *
     * @example
      ```html
      <!-- App.svelte -->
      <script>
        import { link, Route } from "svelte-navigator";
        import RouteComponent from "./RouteComponent.svelte";
      </script>

      <Router>
        <Route path="route1">
          <RouteComponent />
        </Route>
        <!-- ... -->
      </Router>

      <!-- RouteComponent.svelte -->
      <script>
        import { useNavigate } from "svelte-navigator";

        const navigate = useNavigate();
      </script>

      <button on:click="{() => navigate('relativePath')}">
        go to /route1/relativePath
      </button>
      <button on:click="{() => navigate('/absolutePath')}">
        go to /absolutePath
      </button>
      ```
      *
      * @example
      ```html
      <!-- App.svelte -->
      <script>
        import { link, Route } from "svelte-navigator";
        import RouteComponent from "./RouteComponent.svelte";
      </script>

      <Router basepath="/base">
        <Route path="route1">
          <RouteComponent />
        </Route>
        <!-- ... -->
      </Router>

      <!-- RouteComponent.svelte -->
      <script>
        import { useNavigate } from "svelte-navigator";

        const navigate = useNavigate();
      </script>

      <button on:click="{() => navigate('relativePath')}">
        go to /base/route1/relativePath
      </button>
      <button on:click="{() => navigate('/absolutePath')}">
        go to /base/absolutePath
      </button>
      ```
     */
    function useNavigate() {
    	usePreflightCheck(USE_NAVIGATE_ID);
    	const resolve = useResolve();
    	const { navigate } = useHistory();
    	/**
    	 * Navigate to a new route.
    	 * Resolves the link relative to the current route and basepath.
    	 *
    	 * @param {string|number} to The path to navigate to.
    	 *
    	 * If `to` is a number we will navigate to the stack entry index + `to`
    	 * (-> `navigate(-1)`, is equivalent to hitting the back button of the browser)
    	 * @param {Object} options
    	 * @param {*} [options.state]
    	 * @param {boolean} [options.replace=false]
    	 */
    	const navigateRelative = (to, options) => {
    		// If to is a number, we navigate to the target stack entry via `history.go`.
    		// Otherwise resolve the link
    		const target = isNumber(to) ? to : resolve(to);
    		return navigate(target, options);
    	};
    	return navigateRelative;
    }

    /* node_modules/svelte-navigator/src/Route.svelte generated by Svelte v3.48.0 */

    const get_default_slot_changes$1 = dirty => ({
    	params: dirty & /*$params*/ 16,
    	location: dirty & /*$location*/ 8
    });

    const get_default_slot_context$1 = ctx => ({
    	params: isSSR ? get_store_value(/*params*/ ctx[9]) : /*$params*/ ctx[4],
    	location: /*$location*/ ctx[3],
    	navigate: /*navigate*/ ctx[10]
    });

    // (97:0) {#if isActive}
    function create_if_block$b(ctx) {
    	let router;
    	let current;

    	router = new Router$1({
    			props: {
    				primary: /*primary*/ ctx[1],
    				$$slots: { default: [create_default_slot$o] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(router.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const router_changes = {};
    			if (dirty & /*primary*/ 2) router_changes.primary = /*primary*/ ctx[1];

    			if (dirty & /*$$scope, component, $location, $params, $$restProps*/ 264217) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(router, detaching);
    		}
    	};
    }

    // (113:2) {:else}
    function create_else_block$5(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[17].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context$1);

    	return {
    		c() {
    			if (default_slot) default_slot.c();
    		},
    		m(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, $params, $location*/ 262168)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[18],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    // (105:2) {#if component !== null}
    function create_if_block_1$9(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;

    	const switch_instance_spread_levels = [
    		{ location: /*$location*/ ctx[3] },
    		{ navigate: /*navigate*/ ctx[10] },
    		isSSR ? get_store_value(/*params*/ ctx[9]) : /*$params*/ ctx[4],
    		/*$$restProps*/ ctx[11]
    	];

    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return { props: switch_instance_props };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	return {
    		c() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*$location, navigate, isSSR, get, params, $params, $$restProps*/ 3608)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*$location*/ 8 && { location: /*$location*/ ctx[3] },
    					dirty & /*navigate*/ 1024 && { navigate: /*navigate*/ ctx[10] },
    					dirty & /*isSSR, get, params, $params*/ 528 && get_spread_object(isSSR ? get_store_value(/*params*/ ctx[9]) : /*$params*/ ctx[4]),
    					dirty & /*$$restProps*/ 2048 && get_spread_object(/*$$restProps*/ ctx[11])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};
    }

    // (98:1) <Router {primary}>
    function create_default_slot$o(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$9, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*component*/ ctx[0] !== null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function create_fragment$J(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let current;
    	let if_block = /*isActive*/ ctx[2] && create_if_block$b(ctx);

    	return {
    		c() {
    			div0 = element("div");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			div1 = element("div");
    			set_style(div0, "display", "none");
    			attr(div0, "aria-hidden", "true");
    			attr(div0, "data-svnav-route-start", /*id*/ ctx[5]);
    			set_style(div1, "display", "none");
    			attr(div1, "aria-hidden", "true");
    			attr(div1, "data-svnav-route-end", /*id*/ ctx[5]);
    		},
    		m(target, anchor) {
    			insert(target, div0, anchor);
    			insert(target, t0, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert(target, t1, anchor);
    			insert(target, div1, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (/*isActive*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isActive*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$b(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t1.parentNode, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div0);
    			if (detaching) detach(t0);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(t1);
    			if (detaching) detach(div1);
    		}
    	};
    }

    const createId = createCounter();

    function instance$y($$self, $$props, $$invalidate) {
    	let isActive;
    	const omit_props_names = ["path","component","meta","primary"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $activeRoute;
    	let $location;
    	let $parentBase;
    	let $params;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { path = "" } = $$props;
    	let { component = null } = $$props;
    	let { meta = {} } = $$props;
    	let { primary = true } = $$props;
    	usePreflightCheck(ROUTE_ID, $$props);
    	const id = createId();
    	const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER);
    	component_subscribe($$self, activeRoute, value => $$invalidate(15, $activeRoute = value));
    	const parentBase = useRouteBase();
    	component_subscribe($$self, parentBase, value => $$invalidate(16, $parentBase = value));
    	const location = useLocation();
    	component_subscribe($$self, location, value => $$invalidate(3, $location = value));
    	const focusElement = writable(null);

    	// In SSR we cannot wait for $activeRoute to update,
    	// so we use the match returned from `registerRoute` instead
    	let ssrMatch;

    	const route = writable();
    	const params = writable({});
    	component_subscribe($$self, params, value => $$invalidate(4, $params = value));
    	setContext(ROUTE, route);
    	setContext(ROUTE_PARAMS, params);
    	setContext(FOCUS_ELEM, focusElement);

    	// We need to call useNavigate after the route is set,
    	// so we can use the routes path for link resolution
    	const navigate = useNavigate();

    	// There is no need to unregister Routes in SSR since it will all be
    	// thrown away anyway
    	if (!isSSR) {
    		onDestroy(() => unregisterRoute(id));
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(23, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('path' in $$new_props) $$invalidate(12, path = $$new_props.path);
    		if ('component' in $$new_props) $$invalidate(0, component = $$new_props.component);
    		if ('meta' in $$new_props) $$invalidate(13, meta = $$new_props.meta);
    		if ('primary' in $$new_props) $$invalidate(1, primary = $$new_props.primary);
    		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*path, $parentBase, meta, $location, primary*/ 77834) {
    			{
    				// The route store will be re-computed whenever props, location or parentBase change
    				const isDefault = path === "";

    				const rawBase = join($parentBase, path);

    				const updatedRoute = {
    					id,
    					path,
    					meta,
    					// If no path prop is given, this Route will act as the default Route
    					// that is rendered if no other Route in the Router is a match
    					default: isDefault,
    					fullPath: isDefault ? "" : rawBase,
    					base: isDefault
    					? $parentBase
    					: extractBaseUri(rawBase, $location.pathname),
    					primary,
    					focusElement
    				};

    				route.set(updatedRoute);

    				// If we're in SSR mode and the Route matches,
    				// `registerRoute` will return the match
    				$$invalidate(14, ssrMatch = registerRoute(updatedRoute));
    			}
    		}

    		if ($$self.$$.dirty & /*ssrMatch, $activeRoute*/ 49152) {
    			$$invalidate(2, isActive = !!(ssrMatch || $activeRoute && $activeRoute.id === id));
    		}

    		if ($$self.$$.dirty & /*isActive, ssrMatch, $activeRoute*/ 49156) {
    			if (isActive) {
    				const { params: activeParams } = ssrMatch || $activeRoute;
    				params.set(activeParams);
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		component,
    		primary,
    		isActive,
    		$location,
    		$params,
    		id,
    		activeRoute,
    		parentBase,
    		location,
    		params,
    		navigate,
    		$$restProps,
    		path,
    		meta,
    		ssrMatch,
    		$activeRoute,
    		$parentBase,
    		slots,
    		$$scope
    	];
    }

    class Route extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$y, create_fragment$J, safe_not_equal, {
    			path: 12,
    			component: 0,
    			meta: 13,
    			primary: 1
    		});
    	}
    }

    var Route$1 = Route;

    /* node_modules/svelte-navigator/src/Link.svelte generated by Svelte v3.48.0 */

    function create_fragment$I(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
    	let a_levels = [{ href: /*href*/ ctx[0] }, /*ariaCurrent*/ ctx[2], /*props*/ ctx[1]];
    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	return {
    		c() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			set_attributes(a, a_data);
    		},
    		m(target, anchor) {
    			insert(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen(a, "click", /*onClick*/ ctx[4]);
    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
    				dirty & /*ariaCurrent*/ 4 && /*ariaCurrent*/ ctx[2],
    				dirty & /*props*/ 2 && /*props*/ ctx[1]
    			]));
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let href;
    	let isPartiallyCurrent;
    	let isCurrent;
    	let ariaCurrent;
    	let props;
    	const omit_props_names = ["to","replace","state","getProps"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $location;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { to } = $$props;
    	let { replace = false } = $$props;
    	let { state = {} } = $$props;
    	let { getProps = null } = $$props;
    	usePreflightCheck(LINK_ID, $$props);
    	const location = useLocation();
    	component_subscribe($$self, location, value => $$invalidate(11, $location = value));
    	const dispatch = createEventDispatcher();
    	const resolve = useResolve();
    	const { navigate } = useHistory();

    	function onClick(event) {
    		dispatch("click", event);

    		if (shouldNavigate(event)) {
    			event.preventDefault();

    			// Don't push another entry to the history stack when the user
    			// clicks on a Link to the page they are currently on.
    			const shouldReplace = isCurrent || replace;

    			navigate(href, { state, replace: shouldReplace });
    		}
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('to' in $$new_props) $$invalidate(5, to = $$new_props.to);
    		if ('replace' in $$new_props) $$invalidate(6, replace = $$new_props.replace);
    		if ('state' in $$new_props) $$invalidate(7, state = $$new_props.state);
    		if ('getProps' in $$new_props) $$invalidate(8, getProps = $$new_props.getProps);
    		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*to, $location*/ 2080) {
    			// We need to pass location here to force re-resolution of the link,
    			// when the pathname changes. Otherwise we could end up with stale path params,
    			// when for example an :id changes in the parent Routes path
    			$$invalidate(0, href = resolve(to, $location));
    		}

    		if ($$self.$$.dirty & /*$location, href*/ 2049) {
    			$$invalidate(10, isPartiallyCurrent = startsWith($location.pathname, href));
    		}

    		if ($$self.$$.dirty & /*href, $location*/ 2049) {
    			$$invalidate(9, isCurrent = href === $location.pathname);
    		}

    		if ($$self.$$.dirty & /*isCurrent*/ 512) {
    			$$invalidate(2, ariaCurrent = isCurrent ? { "aria-current": "page" } : {});
    		}

    		$$invalidate(1, props = (() => {
    			if (isFunction(getProps)) {
    				const dynamicProps = getProps({
    					location: $location,
    					href,
    					isPartiallyCurrent,
    					isCurrent
    				});

    				return { ...$$restProps, ...dynamicProps };
    			}

    			return $$restProps;
    		})());
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		href,
    		props,
    		ariaCurrent,
    		location,
    		onClick,
    		to,
    		replace,
    		state,
    		getProps,
    		isCurrent,
    		isPartiallyCurrent,
    		$location,
    		$$scope,
    		slots
    	];
    }

    class Link extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$x, create_fragment$I, safe_not_equal, { to: 5, replace: 6, state: 7, getProps: 8 });
    	}
    }

    var Link$1 = Link;

    const matchName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
    const iconDefaults = Object.freeze({
      left: 0,
      top: 0,
      width: 16,
      height: 16,
      rotate: 0,
      vFlip: false,
      hFlip: false
    });
    function fullIcon(data) {
      return { ...iconDefaults, ...data };
    }

    const stringToIcon = (value, validate, allowSimpleName, provider = "") => {
      const colonSeparated = value.split(":");
      if (value.slice(0, 1) === "@") {
        if (colonSeparated.length < 2 || colonSeparated.length > 3) {
          return null;
        }
        provider = colonSeparated.shift().slice(1);
      }
      if (colonSeparated.length > 3 || !colonSeparated.length) {
        return null;
      }
      if (colonSeparated.length > 1) {
        const name2 = colonSeparated.pop();
        const prefix = colonSeparated.pop();
        const result = {
          provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
          prefix,
          name: name2
        };
        return validate && !validateIcon(result) ? null : result;
      }
      const name = colonSeparated[0];
      const dashSeparated = name.split("-");
      if (dashSeparated.length > 1) {
        const result = {
          provider,
          prefix: dashSeparated.shift(),
          name: dashSeparated.join("-")
        };
        return validate && !validateIcon(result) ? null : result;
      }
      if (allowSimpleName && provider === "") {
        const result = {
          provider,
          prefix: "",
          name
        };
        return validate && !validateIcon(result, allowSimpleName) ? null : result;
      }
      return null;
    };
    const validateIcon = (icon, allowSimpleName) => {
      if (!icon) {
        return false;
      }
      return !!((icon.provider === "" || icon.provider.match(matchName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchName)) && icon.name.match(matchName));
    };

    function mergeIconData(icon, alias) {
      const result = { ...icon };
      for (const key in iconDefaults) {
        const prop = key;
        if (alias[prop] !== void 0) {
          const value = alias[prop];
          if (result[prop] === void 0) {
            result[prop] = value;
            continue;
          }
          switch (prop) {
            case "rotate":
              result[prop] = (result[prop] + value) % 4;
              break;
            case "hFlip":
            case "vFlip":
              result[prop] = value !== result[prop];
              break;
            default:
              result[prop] = value;
          }
        }
      }
      return result;
    }

    function getIconData$1(data, name, full) {
      function getIcon(name2, iteration) {
        if (data.icons[name2] !== void 0) {
          return Object.assign({}, data.icons[name2]);
        }
        if (iteration > 5) {
          return null;
        }
        const aliases = data.aliases;
        if (aliases && aliases[name2] !== void 0) {
          const item = aliases[name2];
          const result2 = getIcon(item.parent, iteration + 1);
          if (result2) {
            return mergeIconData(result2, item);
          }
          return result2;
        }
        const chars = data.chars;
        if (!iteration && chars && chars[name2] !== void 0) {
          return getIcon(chars[name2], iteration + 1);
        }
        return null;
      }
      const result = getIcon(name, 0);
      if (result) {
        for (const key in iconDefaults) {
          if (result[key] === void 0 && data[key] !== void 0) {
            result[key] = data[key];
          }
        }
      }
      return result && full ? fullIcon(result) : result;
    }

    function isVariation(item) {
      for (const key in iconDefaults) {
        if (item[key] !== void 0) {
          return true;
        }
      }
      return false;
    }
    function parseIconSet(data, callback, options) {
      options = options || {};
      const names = [];
      if (typeof data !== "object" || typeof data.icons !== "object") {
        return names;
      }
      if (data.not_found instanceof Array) {
        data.not_found.forEach((name) => {
          callback(name, null);
          names.push(name);
        });
      }
      const icons = data.icons;
      Object.keys(icons).forEach((name) => {
        const iconData = getIconData$1(data, name, true);
        if (iconData) {
          callback(name, iconData);
          names.push(name);
        }
      });
      const parseAliases = options.aliases || "all";
      if (parseAliases !== "none" && typeof data.aliases === "object") {
        const aliases = data.aliases;
        Object.keys(aliases).forEach((name) => {
          if (parseAliases === "variations" && isVariation(aliases[name])) {
            return;
          }
          const iconData = getIconData$1(data, name, true);
          if (iconData) {
            callback(name, iconData);
            names.push(name);
          }
        });
      }
      return names;
    }

    const optionalProperties = {
      provider: "string",
      aliases: "object",
      not_found: "object"
    };
    for (const prop in iconDefaults) {
      optionalProperties[prop] = typeof iconDefaults[prop];
    }
    function quicklyValidateIconSet(obj) {
      if (typeof obj !== "object" || obj === null) {
        return null;
      }
      const data = obj;
      if (typeof data.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
        return null;
      }
      for (const prop in optionalProperties) {
        if (obj[prop] !== void 0 && typeof obj[prop] !== optionalProperties[prop]) {
          return null;
        }
      }
      const icons = data.icons;
      for (const name in icons) {
        const icon = icons[name];
        if (!name.match(matchName) || typeof icon.body !== "string") {
          return null;
        }
        for (const prop in iconDefaults) {
          if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
            return null;
          }
        }
      }
      const aliases = data.aliases;
      if (aliases) {
        for (const name in aliases) {
          const icon = aliases[name];
          const parent = icon.parent;
          if (!name.match(matchName) || typeof parent !== "string" || !icons[parent] && !aliases[parent]) {
            return null;
          }
          for (const prop in iconDefaults) {
            if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
              return null;
            }
          }
        }
      }
      return data;
    }

    const storageVersion = 1;
    let storage$1 = /* @__PURE__ */ Object.create(null);
    try {
      const w = window || self;
      if (w && w._iconifyStorage.version === storageVersion) {
        storage$1 = w._iconifyStorage.storage;
      }
    } catch (err) {
    }
    function newStorage(provider, prefix) {
      return {
        provider,
        prefix,
        icons: /* @__PURE__ */ Object.create(null),
        missing: /* @__PURE__ */ Object.create(null)
      };
    }
    function getStorage(provider, prefix) {
      if (storage$1[provider] === void 0) {
        storage$1[provider] = /* @__PURE__ */ Object.create(null);
      }
      const providerStorage = storage$1[provider];
      if (providerStorage[prefix] === void 0) {
        providerStorage[prefix] = newStorage(provider, prefix);
      }
      return providerStorage[prefix];
    }
    function addIconSet(storage2, data) {
      if (!quicklyValidateIconSet(data)) {
        return [];
      }
      const t = Date.now();
      return parseIconSet(data, (name, icon) => {
        if (icon) {
          storage2.icons[name] = icon;
        } else {
          storage2.missing[name] = t;
        }
      });
    }
    function addIconToStorage(storage2, name, icon) {
      try {
        if (typeof icon.body === "string") {
          storage2.icons[name] = Object.freeze(fullIcon(icon));
          return true;
        }
      } catch (err) {
      }
      return false;
    }
    function getIconFromStorage(storage2, name) {
      const value = storage2.icons[name];
      return value === void 0 ? null : value;
    }

    let simpleNames = false;
    function allowSimpleNames(allow) {
      if (typeof allow === "boolean") {
        simpleNames = allow;
      }
      return simpleNames;
    }
    function getIconData(name) {
      const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;
      return icon ? getIconFromStorage(getStorage(icon.provider, icon.prefix), icon.name) : null;
    }
    function addIcon(name, data) {
      const icon = stringToIcon(name, true, simpleNames);
      if (!icon) {
        return false;
      }
      const storage = getStorage(icon.provider, icon.prefix);
      return addIconToStorage(storage, icon.name, data);
    }
    function addCollection(data, provider) {
      if (typeof data !== "object") {
        return false;
      }
      if (typeof provider !== "string") {
        provider = typeof data.provider === "string" ? data.provider : "";
      }
      if (simpleNames && provider === "" && (typeof data.prefix !== "string" || data.prefix === "")) {
        let added = false;
        if (quicklyValidateIconSet(data)) {
          data.prefix = "";
          parseIconSet(data, (name, icon) => {
            if (icon && addIcon(name, icon)) {
              added = true;
            }
          });
        }
        return added;
      }
      if (typeof data.prefix !== "string" || !validateIcon({
        provider,
        prefix: data.prefix,
        name: "a"
      })) {
        return false;
      }
      const storage = getStorage(provider, data.prefix);
      return !!addIconSet(storage, data);
    }
    function getIcon(name) {
      const result = getIconData(name);
      return result ? { ...result } : null;
    }

    const defaults = Object.freeze({
      inline: false,
      width: null,
      height: null,
      hAlign: "center",
      vAlign: "middle",
      slice: false,
      hFlip: false,
      vFlip: false,
      rotate: 0
    });
    function mergeCustomisations(defaults2, item) {
      const result = {};
      for (const key in defaults2) {
        const attr = key;
        result[attr] = defaults2[attr];
        if (item[attr] === void 0) {
          continue;
        }
        const value = item[attr];
        switch (attr) {
          case "inline":
          case "slice":
            if (typeof value === "boolean") {
              result[attr] = value;
            }
            break;
          case "hFlip":
          case "vFlip":
            if (value === true) {
              result[attr] = !result[attr];
            }
            break;
          case "hAlign":
          case "vAlign":
            if (typeof value === "string" && value !== "") {
              result[attr] = value;
            }
            break;
          case "width":
          case "height":
            if (typeof value === "string" && value !== "" || typeof value === "number" && value || value === null) {
              result[attr] = value;
            }
            break;
          case "rotate":
            if (typeof value === "number") {
              result[attr] += value;
            }
            break;
        }
      }
      return result;
    }

    const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
    const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
    function calculateSize(size, ratio, precision) {
      if (ratio === 1) {
        return size;
      }
      precision = precision === void 0 ? 100 : precision;
      if (typeof size === "number") {
        return Math.ceil(size * ratio * precision) / precision;
      }
      if (typeof size !== "string") {
        return size;
      }
      const oldParts = size.split(unitsSplit);
      if (oldParts === null || !oldParts.length) {
        return size;
      }
      const newParts = [];
      let code = oldParts.shift();
      let isNumber = unitsTest.test(code);
      while (true) {
        if (isNumber) {
          const num = parseFloat(code);
          if (isNaN(num)) {
            newParts.push(code);
          } else {
            newParts.push(Math.ceil(num * ratio * precision) / precision);
          }
        } else {
          newParts.push(code);
        }
        code = oldParts.shift();
        if (code === void 0) {
          return newParts.join("");
        }
        isNumber = !isNumber;
      }
    }

    function preserveAspectRatio(props) {
      let result = "";
      switch (props.hAlign) {
        case "left":
          result += "xMin";
          break;
        case "right":
          result += "xMax";
          break;
        default:
          result += "xMid";
      }
      switch (props.vAlign) {
        case "top":
          result += "YMin";
          break;
        case "bottom":
          result += "YMax";
          break;
        default:
          result += "YMid";
      }
      result += props.slice ? " slice" : " meet";
      return result;
    }
    function iconToSVG(icon, customisations) {
      const box = {
        left: icon.left,
        top: icon.top,
        width: icon.width,
        height: icon.height
      };
      let body = icon.body;
      [icon, customisations].forEach((props) => {
        const transformations = [];
        const hFlip = props.hFlip;
        const vFlip = props.vFlip;
        let rotation = props.rotate;
        if (hFlip) {
          if (vFlip) {
            rotation += 2;
          } else {
            transformations.push("translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")");
            transformations.push("scale(-1 1)");
            box.top = box.left = 0;
          }
        } else if (vFlip) {
          transformations.push("translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")");
          transformations.push("scale(1 -1)");
          box.top = box.left = 0;
        }
        let tempValue;
        if (rotation < 0) {
          rotation -= Math.floor(rotation / 4) * 4;
        }
        rotation = rotation % 4;
        switch (rotation) {
          case 1:
            tempValue = box.height / 2 + box.top;
            transformations.unshift("rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")");
            break;
          case 2:
            transformations.unshift("rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")");
            break;
          case 3:
            tempValue = box.width / 2 + box.left;
            transformations.unshift("rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")");
            break;
        }
        if (rotation % 2 === 1) {
          if (box.left !== 0 || box.top !== 0) {
            tempValue = box.left;
            box.left = box.top;
            box.top = tempValue;
          }
          if (box.width !== box.height) {
            tempValue = box.width;
            box.width = box.height;
            box.height = tempValue;
          }
        }
        if (transformations.length) {
          body = '<g transform="' + transformations.join(" ") + '">' + body + "</g>";
        }
      });
      let width, height;
      if (customisations.width === null && customisations.height === null) {
        height = "1em";
        width = calculateSize(height, box.width / box.height);
      } else if (customisations.width !== null && customisations.height !== null) {
        width = customisations.width;
        height = customisations.height;
      } else if (customisations.height !== null) {
        height = customisations.height;
        width = calculateSize(height, box.width / box.height);
      } else {
        width = customisations.width;
        height = calculateSize(width, box.height / box.width);
      }
      if (width === "auto") {
        width = box.width;
      }
      if (height === "auto") {
        height = box.height;
      }
      width = typeof width === "string" ? width : width.toString() + "";
      height = typeof height === "string" ? height : height.toString() + "";
      const result = {
        attributes: {
          width,
          height,
          preserveAspectRatio: preserveAspectRatio(customisations),
          viewBox: box.left.toString() + " " + box.top.toString() + " " + box.width.toString() + " " + box.height.toString()
        },
        body
      };
      if (customisations.inline) {
        result.inline = true;
      }
      return result;
    }

    const regex = /\sid="(\S+)"/g;
    const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
    let counter = 0;
    function replaceIDs(body, prefix = randomPrefix) {
      const ids = [];
      let match;
      while (match = regex.exec(body)) {
        ids.push(match[1]);
      }
      if (!ids.length) {
        return body;
      }
      ids.forEach((id) => {
        const newID = typeof prefix === "function" ? prefix(id) : prefix + (counter++).toString();
        const escapedID = id.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        body = body.replace(new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"), "$1" + newID + "$3");
      });
      return body;
    }

    const storage = /* @__PURE__ */ Object.create(null);
    function setAPIModule(provider, item) {
      storage[provider] = item;
    }
    function getAPIModule(provider) {
      return storage[provider] || storage[""];
    }

    function createAPIConfig(source) {
      let resources;
      if (typeof source.resources === "string") {
        resources = [source.resources];
      } else {
        resources = source.resources;
        if (!(resources instanceof Array) || !resources.length) {
          return null;
        }
      }
      const result = {
        resources,
        path: source.path === void 0 ? "/" : source.path,
        maxURL: source.maxURL ? source.maxURL : 500,
        rotate: source.rotate ? source.rotate : 750,
        timeout: source.timeout ? source.timeout : 5e3,
        random: source.random === true,
        index: source.index ? source.index : 0,
        dataAfterTimeout: source.dataAfterTimeout !== false
      };
      return result;
    }
    const configStorage = /* @__PURE__ */ Object.create(null);
    const fallBackAPISources = [
      "https://api.simplesvg.com",
      "https://api.unisvg.com"
    ];
    const fallBackAPI = [];
    while (fallBackAPISources.length > 0) {
      if (fallBackAPISources.length === 1) {
        fallBackAPI.push(fallBackAPISources.shift());
      } else {
        if (Math.random() > 0.5) {
          fallBackAPI.push(fallBackAPISources.shift());
        } else {
          fallBackAPI.push(fallBackAPISources.pop());
        }
      }
    }
    configStorage[""] = createAPIConfig({
      resources: ["https://api.iconify.design"].concat(fallBackAPI)
    });
    function addAPIProvider(provider, customConfig) {
      const config = createAPIConfig(customConfig);
      if (config === null) {
        return false;
      }
      configStorage[provider] = config;
      return true;
    }
    function getAPIConfig(provider) {
      return configStorage[provider];
    }

    const mergeParams = (base, params) => {
      let result = base, hasParams = result.indexOf("?") !== -1;
      function paramToString(value) {
        switch (typeof value) {
          case "boolean":
            return value ? "true" : "false";
          case "number":
            return encodeURIComponent(value);
          case "string":
            return encodeURIComponent(value);
          default:
            throw new Error("Invalid parameter");
        }
      }
      Object.keys(params).forEach((key) => {
        let value;
        try {
          value = paramToString(params[key]);
        } catch (err) {
          return;
        }
        result += (hasParams ? "&" : "?") + encodeURIComponent(key) + "=" + value;
        hasParams = true;
      });
      return result;
    };

    const maxLengthCache = {};
    const pathCache = {};
    const detectFetch = () => {
      let callback;
      try {
        callback = fetch;
        if (typeof callback === "function") {
          return callback;
        }
      } catch (err) {
      }
      return null;
    };
    let fetchModule = detectFetch();
    function calculateMaxLength(provider, prefix) {
      const config = getAPIConfig(provider);
      if (!config) {
        return 0;
      }
      let result;
      if (!config.maxURL) {
        result = 0;
      } else {
        let maxHostLength = 0;
        config.resources.forEach((item) => {
          const host = item;
          maxHostLength = Math.max(maxHostLength, host.length);
        });
        const url = mergeParams(prefix + ".json", {
          icons: ""
        });
        result = config.maxURL - maxHostLength - config.path.length - url.length;
      }
      const cacheKey = provider + ":" + prefix;
      pathCache[provider] = config.path;
      maxLengthCache[cacheKey] = result;
      return result;
    }
    function shouldAbort(status) {
      return status === 404;
    }
    const prepare = (provider, prefix, icons) => {
      const results = [];
      let maxLength = maxLengthCache[prefix];
      if (maxLength === void 0) {
        maxLength = calculateMaxLength(provider, prefix);
      }
      const type = "icons";
      let item = {
        type,
        provider,
        prefix,
        icons: []
      };
      let length = 0;
      icons.forEach((name, index) => {
        length += name.length + 1;
        if (length >= maxLength && index > 0) {
          results.push(item);
          item = {
            type,
            provider,
            prefix,
            icons: []
          };
          length = name.length;
        }
        item.icons.push(name);
      });
      results.push(item);
      return results;
    };
    function getPath(provider) {
      if (typeof provider === "string") {
        if (pathCache[provider] === void 0) {
          const config = getAPIConfig(provider);
          if (!config) {
            return "/";
          }
          pathCache[provider] = config.path;
        }
        return pathCache[provider];
      }
      return "/";
    }
    const send = (host, params, callback) => {
      if (!fetchModule) {
        callback("abort", 424);
        return;
      }
      let path = getPath(params.provider);
      switch (params.type) {
        case "icons": {
          const prefix = params.prefix;
          const icons = params.icons;
          const iconsList = icons.join(",");
          path += mergeParams(prefix + ".json", {
            icons: iconsList
          });
          break;
        }
        case "custom": {
          const uri = params.uri;
          path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
          break;
        }
        default:
          callback("abort", 400);
          return;
      }
      let defaultError = 503;
      fetchModule(host + path).then((response) => {
        const status = response.status;
        if (status !== 200) {
          setTimeout(() => {
            callback(shouldAbort(status) ? "abort" : "next", status);
          });
          return;
        }
        defaultError = 501;
        return response.json();
      }).then((data) => {
        if (typeof data !== "object" || data === null) {
          setTimeout(() => {
            callback("next", defaultError);
          });
          return;
        }
        setTimeout(() => {
          callback("success", data);
        });
      }).catch(() => {
        callback("next", defaultError);
      });
    };
    const fetchAPIModule = {
      prepare,
      send
    };

    function sortIcons(icons) {
      const result = {
        loaded: [],
        missing: [],
        pending: []
      };
      const storage = /* @__PURE__ */ Object.create(null);
      icons.sort((a, b) => {
        if (a.provider !== b.provider) {
          return a.provider.localeCompare(b.provider);
        }
        if (a.prefix !== b.prefix) {
          return a.prefix.localeCompare(b.prefix);
        }
        return a.name.localeCompare(b.name);
      });
      let lastIcon = {
        provider: "",
        prefix: "",
        name: ""
      };
      icons.forEach((icon) => {
        if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {
          return;
        }
        lastIcon = icon;
        const provider = icon.provider;
        const prefix = icon.prefix;
        const name = icon.name;
        if (storage[provider] === void 0) {
          storage[provider] = /* @__PURE__ */ Object.create(null);
        }
        const providerStorage = storage[provider];
        if (providerStorage[prefix] === void 0) {
          providerStorage[prefix] = getStorage(provider, prefix);
        }
        const localStorage = providerStorage[prefix];
        let list;
        if (localStorage.icons[name] !== void 0) {
          list = result.loaded;
        } else if (prefix === "" || localStorage.missing[name] !== void 0) {
          list = result.missing;
        } else {
          list = result.pending;
        }
        const item = {
          provider,
          prefix,
          name
        };
        list.push(item);
      });
      return result;
    }

    const callbacks = /* @__PURE__ */ Object.create(null);
    const pendingUpdates = /* @__PURE__ */ Object.create(null);
    function removeCallback(sources, id) {
      sources.forEach((source) => {
        const provider = source.provider;
        if (callbacks[provider] === void 0) {
          return;
        }
        const providerCallbacks = callbacks[provider];
        const prefix = source.prefix;
        const items = providerCallbacks[prefix];
        if (items) {
          providerCallbacks[prefix] = items.filter((row) => row.id !== id);
        }
      });
    }
    function updateCallbacks(provider, prefix) {
      if (pendingUpdates[provider] === void 0) {
        pendingUpdates[provider] = /* @__PURE__ */ Object.create(null);
      }
      const providerPendingUpdates = pendingUpdates[provider];
      if (!providerPendingUpdates[prefix]) {
        providerPendingUpdates[prefix] = true;
        setTimeout(() => {
          providerPendingUpdates[prefix] = false;
          if (callbacks[provider] === void 0 || callbacks[provider][prefix] === void 0) {
            return;
          }
          const items = callbacks[provider][prefix].slice(0);
          if (!items.length) {
            return;
          }
          const storage = getStorage(provider, prefix);
          let hasPending = false;
          items.forEach((item) => {
            const icons = item.icons;
            const oldLength = icons.pending.length;
            icons.pending = icons.pending.filter((icon) => {
              if (icon.prefix !== prefix) {
                return true;
              }
              const name = icon.name;
              if (storage.icons[name] !== void 0) {
                icons.loaded.push({
                  provider,
                  prefix,
                  name
                });
              } else if (storage.missing[name] !== void 0) {
                icons.missing.push({
                  provider,
                  prefix,
                  name
                });
              } else {
                hasPending = true;
                return true;
              }
              return false;
            });
            if (icons.pending.length !== oldLength) {
              if (!hasPending) {
                removeCallback([
                  {
                    provider,
                    prefix
                  }
                ], item.id);
              }
              item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort);
            }
          });
        });
      }
    }
    let idCounter = 0;
    function storeCallback(callback, icons, pendingSources) {
      const id = idCounter++;
      const abort = removeCallback.bind(null, pendingSources, id);
      if (!icons.pending.length) {
        return abort;
      }
      const item = {
        id,
        icons,
        callback,
        abort
      };
      pendingSources.forEach((source) => {
        const provider = source.provider;
        const prefix = source.prefix;
        if (callbacks[provider] === void 0) {
          callbacks[provider] = /* @__PURE__ */ Object.create(null);
        }
        const providerCallbacks = callbacks[provider];
        if (providerCallbacks[prefix] === void 0) {
          providerCallbacks[prefix] = [];
        }
        providerCallbacks[prefix].push(item);
      });
      return abort;
    }

    function listToIcons(list, validate, simpleNames = false) {
      const result = [];
      list.forEach((item) => {
        const icon = typeof item === "string" ? stringToIcon(item, false, simpleNames) : item;
        if (!validate || validateIcon(icon, simpleNames)) {
          result.push({
            provider: icon.provider,
            prefix: icon.prefix,
            name: icon.name
          });
        }
      });
      return result;
    }

    // src/config.ts
    var defaultConfig = {
      resources: [],
      index: 0,
      timeout: 2e3,
      rotate: 750,
      random: false,
      dataAfterTimeout: false
    };

    // src/query.ts
    function sendQuery(config, payload, query, done) {
      const resourcesCount = config.resources.length;
      const startIndex = config.random ? Math.floor(Math.random() * resourcesCount) : config.index;
      let resources;
      if (config.random) {
        let list = config.resources.slice(0);
        resources = [];
        while (list.length > 1) {
          const nextIndex = Math.floor(Math.random() * list.length);
          resources.push(list[nextIndex]);
          list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
        }
        resources = resources.concat(list);
      } else {
        resources = config.resources.slice(startIndex).concat(config.resources.slice(0, startIndex));
      }
      const startTime = Date.now();
      let status = "pending";
      let queriesSent = 0;
      let lastError;
      let timer = null;
      let queue = [];
      let doneCallbacks = [];
      if (typeof done === "function") {
        doneCallbacks.push(done);
      }
      function resetTimer() {
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
      }
      function abort() {
        if (status === "pending") {
          status = "aborted";
        }
        resetTimer();
        queue.forEach((item) => {
          if (item.status === "pending") {
            item.status = "aborted";
          }
        });
        queue = [];
      }
      function subscribe(callback, overwrite) {
        if (overwrite) {
          doneCallbacks = [];
        }
        if (typeof callback === "function") {
          doneCallbacks.push(callback);
        }
      }
      function getQueryStatus() {
        return {
          startTime,
          payload,
          status,
          queriesSent,
          queriesPending: queue.length,
          subscribe,
          abort
        };
      }
      function failQuery() {
        status = "failed";
        doneCallbacks.forEach((callback) => {
          callback(void 0, lastError);
        });
      }
      function clearQueue() {
        queue.forEach((item) => {
          if (item.status === "pending") {
            item.status = "aborted";
          }
        });
        queue = [];
      }
      function moduleResponse(item, response, data) {
        const isError = response !== "success";
        queue = queue.filter((queued) => queued !== item);
        switch (status) {
          case "pending":
            break;
          case "failed":
            if (isError || !config.dataAfterTimeout) {
              return;
            }
            break;
          default:
            return;
        }
        if (response === "abort") {
          lastError = data;
          failQuery();
          return;
        }
        if (isError) {
          lastError = data;
          if (!queue.length) {
            if (!resources.length) {
              failQuery();
            } else {
              execNext();
            }
          }
          return;
        }
        resetTimer();
        clearQueue();
        if (!config.random) {
          const index = config.resources.indexOf(item.resource);
          if (index !== -1 && index !== config.index) {
            config.index = index;
          }
        }
        status = "completed";
        doneCallbacks.forEach((callback) => {
          callback(data);
        });
      }
      function execNext() {
        if (status !== "pending") {
          return;
        }
        resetTimer();
        const resource = resources.shift();
        if (resource === void 0) {
          if (queue.length) {
            timer = setTimeout(() => {
              resetTimer();
              if (status === "pending") {
                clearQueue();
                failQuery();
              }
            }, config.timeout);
            return;
          }
          failQuery();
          return;
        }
        const item = {
          status: "pending",
          resource,
          callback: (status2, data) => {
            moduleResponse(item, status2, data);
          }
        };
        queue.push(item);
        queriesSent++;
        timer = setTimeout(execNext, config.rotate);
        query(resource, payload, item.callback);
      }
      setTimeout(execNext);
      return getQueryStatus;
    }

    // src/index.ts
    function setConfig(config) {
      if (typeof config !== "object" || typeof config.resources !== "object" || !(config.resources instanceof Array) || !config.resources.length) {
        throw new Error("Invalid Reduncancy configuration");
      }
      const newConfig = /* @__PURE__ */ Object.create(null);
      let key;
      for (key in defaultConfig) {
        if (config[key] !== void 0) {
          newConfig[key] = config[key];
        } else {
          newConfig[key] = defaultConfig[key];
        }
      }
      return newConfig;
    }
    function initRedundancy(cfg) {
      const config = setConfig(cfg);
      let queries = [];
      function cleanup() {
        queries = queries.filter((item) => item().status === "pending");
      }
      function query(payload, queryCallback, doneCallback) {
        const query2 = sendQuery(config, payload, queryCallback, (data, error) => {
          cleanup();
          if (doneCallback) {
            doneCallback(data, error);
          }
        });
        queries.push(query2);
        return query2;
      }
      function find(callback) {
        const result = queries.find((value) => {
          return callback(value);
        });
        return result !== void 0 ? result : null;
      }
      const instance = {
        query,
        find,
        setIndex: (index) => {
          config.index = index;
        },
        getIndex: () => config.index,
        cleanup
      };
      return instance;
    }

    function emptyCallback$1() {
    }
    const redundancyCache = /* @__PURE__ */ Object.create(null);
    function getRedundancyCache(provider) {
      if (redundancyCache[provider] === void 0) {
        const config = getAPIConfig(provider);
        if (!config) {
          return;
        }
        const redundancy = initRedundancy(config);
        const cachedReundancy = {
          config,
          redundancy
        };
        redundancyCache[provider] = cachedReundancy;
      }
      return redundancyCache[provider];
    }
    function sendAPIQuery(target, query, callback) {
      let redundancy;
      let send;
      if (typeof target === "string") {
        const api = getAPIModule(target);
        if (!api) {
          callback(void 0, 424);
          return emptyCallback$1;
        }
        send = api.send;
        const cached = getRedundancyCache(target);
        if (cached) {
          redundancy = cached.redundancy;
        }
      } else {
        const config = createAPIConfig(target);
        if (config) {
          redundancy = initRedundancy(config);
          const moduleKey = target.resources ? target.resources[0] : "";
          const api = getAPIModule(moduleKey);
          if (api) {
            send = api.send;
          }
        }
      }
      if (!redundancy || !send) {
        callback(void 0, 424);
        return emptyCallback$1;
      }
      return redundancy.query(query, send, callback)().abort;
    }

    const cache = {};

    function emptyCallback() {
    }
    const pendingIcons = /* @__PURE__ */ Object.create(null);
    const iconsToLoad = /* @__PURE__ */ Object.create(null);
    const loaderFlags = /* @__PURE__ */ Object.create(null);
    const queueFlags = /* @__PURE__ */ Object.create(null);
    function loadedNewIcons(provider, prefix) {
      if (loaderFlags[provider] === void 0) {
        loaderFlags[provider] = /* @__PURE__ */ Object.create(null);
      }
      const providerLoaderFlags = loaderFlags[provider];
      if (!providerLoaderFlags[prefix]) {
        providerLoaderFlags[prefix] = true;
        setTimeout(() => {
          providerLoaderFlags[prefix] = false;
          updateCallbacks(provider, prefix);
        });
      }
    }
    const errorsCache = /* @__PURE__ */ Object.create(null);
    function loadNewIcons(provider, prefix, icons) {
      function err() {
        const key = (provider === "" ? "" : "@" + provider + ":") + prefix;
        const time = Math.floor(Date.now() / 6e4);
        if (errorsCache[key] < time) {
          errorsCache[key] = time;
          console.error('Unable to retrieve icons for "' + key + '" because API is not configured properly.');
        }
      }
      if (iconsToLoad[provider] === void 0) {
        iconsToLoad[provider] = /* @__PURE__ */ Object.create(null);
      }
      const providerIconsToLoad = iconsToLoad[provider];
      if (queueFlags[provider] === void 0) {
        queueFlags[provider] = /* @__PURE__ */ Object.create(null);
      }
      const providerQueueFlags = queueFlags[provider];
      if (pendingIcons[provider] === void 0) {
        pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
      }
      const providerPendingIcons = pendingIcons[provider];
      if (providerIconsToLoad[prefix] === void 0) {
        providerIconsToLoad[prefix] = icons;
      } else {
        providerIconsToLoad[prefix] = providerIconsToLoad[prefix].concat(icons).sort();
      }
      if (!providerQueueFlags[prefix]) {
        providerQueueFlags[prefix] = true;
        setTimeout(() => {
          providerQueueFlags[prefix] = false;
          const icons2 = providerIconsToLoad[prefix];
          delete providerIconsToLoad[prefix];
          const api = getAPIModule(provider);
          if (!api) {
            err();
            return;
          }
          const params = api.prepare(provider, prefix, icons2);
          params.forEach((item) => {
            sendAPIQuery(provider, item, (data, error) => {
              const storage = getStorage(provider, prefix);
              if (typeof data !== "object") {
                if (error !== 404) {
                  return;
                }
                const t = Date.now();
                item.icons.forEach((name) => {
                  storage.missing[name] = t;
                });
              } else {
                try {
                  const parsed = addIconSet(storage, data);
                  if (!parsed.length) {
                    return;
                  }
                  const pending = providerPendingIcons[prefix];
                  parsed.forEach((name) => {
                    delete pending[name];
                  });
                  if (cache.store) {
                    cache.store(provider, data);
                  }
                } catch (err2) {
                  console.error(err2);
                }
              }
              loadedNewIcons(provider, prefix);
            });
          });
        });
      }
    }
    const loadIcons = (icons, callback) => {
      const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
      const sortedIcons = sortIcons(cleanedIcons);
      if (!sortedIcons.pending.length) {
        let callCallback = true;
        if (callback) {
          setTimeout(() => {
            if (callCallback) {
              callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);
            }
          });
        }
        return () => {
          callCallback = false;
        };
      }
      const newIcons = /* @__PURE__ */ Object.create(null);
      const sources = [];
      let lastProvider, lastPrefix;
      sortedIcons.pending.forEach((icon) => {
        const provider = icon.provider;
        const prefix = icon.prefix;
        if (prefix === lastPrefix && provider === lastProvider) {
          return;
        }
        lastProvider = provider;
        lastPrefix = prefix;
        sources.push({
          provider,
          prefix
        });
        if (pendingIcons[provider] === void 0) {
          pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
        }
        const providerPendingIcons = pendingIcons[provider];
        if (providerPendingIcons[prefix] === void 0) {
          providerPendingIcons[prefix] = /* @__PURE__ */ Object.create(null);
        }
        if (newIcons[provider] === void 0) {
          newIcons[provider] = /* @__PURE__ */ Object.create(null);
        }
        const providerNewIcons = newIcons[provider];
        if (providerNewIcons[prefix] === void 0) {
          providerNewIcons[prefix] = [];
        }
      });
      const time = Date.now();
      sortedIcons.pending.forEach((icon) => {
        const provider = icon.provider;
        const prefix = icon.prefix;
        const name = icon.name;
        const pendingQueue = pendingIcons[provider][prefix];
        if (pendingQueue[name] === void 0) {
          pendingQueue[name] = time;
          newIcons[provider][prefix].push(name);
        }
      });
      sources.forEach((source) => {
        const provider = source.provider;
        const prefix = source.prefix;
        if (newIcons[provider][prefix].length) {
          loadNewIcons(provider, prefix, newIcons[provider][prefix]);
        }
      });
      return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
    };

    const cacheVersion = "iconify2";
    const cachePrefix = "iconify";
    const countKey = cachePrefix + "-count";
    const versionKey = cachePrefix + "-version";
    const hour = 36e5;
    const cacheExpiration = 168;
    const config = {
      local: true,
      session: true
    };
    let loaded = false;
    const count$1 = {
      local: 0,
      session: 0
    };
    const emptyList = {
      local: [],
      session: []
    };
    let _window = typeof window === "undefined" ? {} : window;
    function getGlobal(key) {
      const attr = key + "Storage";
      try {
        if (_window && _window[attr] && typeof _window[attr].length === "number") {
          return _window[attr];
        }
      } catch (err) {
      }
      config[key] = false;
      return null;
    }
    function setCount(storage, key, value) {
      try {
        storage.setItem(countKey, value.toString());
        count$1[key] = value;
        return true;
      } catch (err) {
        return false;
      }
    }
    function getCount(storage) {
      const count2 = storage.getItem(countKey);
      if (count2) {
        const total = parseInt(count2);
        return total ? total : 0;
      }
      return 0;
    }
    function initCache(storage, key) {
      try {
        storage.setItem(versionKey, cacheVersion);
      } catch (err) {
      }
      setCount(storage, key, 0);
    }
    function destroyCache(storage) {
      try {
        const total = getCount(storage);
        for (let i = 0; i < total; i++) {
          storage.removeItem(cachePrefix + i.toString());
        }
      } catch (err) {
      }
    }
    const loadCache = () => {
      if (loaded) {
        return;
      }
      loaded = true;
      const minTime = Math.floor(Date.now() / hour) - cacheExpiration;
      function load(key) {
        const func = getGlobal(key);
        if (!func) {
          return;
        }
        const getItem = (index) => {
          const name = cachePrefix + index.toString();
          const item = func.getItem(name);
          if (typeof item !== "string") {
            return false;
          }
          let valid = true;
          try {
            const data = JSON.parse(item);
            if (typeof data !== "object" || typeof data.cached !== "number" || data.cached < minTime || typeof data.provider !== "string" || typeof data.data !== "object" || typeof data.data.prefix !== "string") {
              valid = false;
            } else {
              const provider = data.provider;
              const prefix = data.data.prefix;
              const storage = getStorage(provider, prefix);
              valid = addIconSet(storage, data.data).length > 0;
            }
          } catch (err) {
            valid = false;
          }
          if (!valid) {
            func.removeItem(name);
          }
          return valid;
        };
        try {
          const version = func.getItem(versionKey);
          if (version !== cacheVersion) {
            if (version) {
              destroyCache(func);
            }
            initCache(func, key);
            return;
          }
          let total = getCount(func);
          for (let i = total - 1; i >= 0; i--) {
            if (!getItem(i)) {
              if (i === total - 1) {
                total--;
              } else {
                emptyList[key].push(i);
              }
            }
          }
          setCount(func, key, total);
        } catch (err) {
        }
      }
      for (const key in config) {
        load(key);
      }
    };
    const storeCache = (provider, data) => {
      if (!loaded) {
        loadCache();
      }
      function store(key) {
        if (!config[key]) {
          return false;
        }
        const func = getGlobal(key);
        if (!func) {
          return false;
        }
        let index = emptyList[key].shift();
        if (index === void 0) {
          index = count$1[key];
          if (!setCount(func, key, index + 1)) {
            return false;
          }
        }
        try {
          const item = {
            cached: Math.floor(Date.now() / hour),
            provider,
            data
          };
          func.setItem(cachePrefix + index.toString(), JSON.stringify(item));
        } catch (err) {
          return false;
        }
        return true;
      }
      if (!Object.keys(data.icons).length) {
        return;
      }
      if (data.not_found) {
        data = Object.assign({}, data);
        delete data.not_found;
      }
      if (!store("local")) {
        store("session");
      }
    };

    const separator = /[\s,]+/;
    function flipFromString(custom, flip) {
      flip.split(separator).forEach((str) => {
        const value = str.trim();
        switch (value) {
          case "horizontal":
            custom.hFlip = true;
            break;
          case "vertical":
            custom.vFlip = true;
            break;
        }
      });
    }
    function alignmentFromString(custom, align) {
      align.split(separator).forEach((str) => {
        const value = str.trim();
        switch (value) {
          case "left":
          case "center":
          case "right":
            custom.hAlign = value;
            break;
          case "top":
          case "middle":
          case "bottom":
            custom.vAlign = value;
            break;
          case "slice":
          case "crop":
            custom.slice = true;
            break;
          case "meet":
            custom.slice = false;
        }
      });
    }

    function rotateFromString(value, defaultValue = 0) {
      const units = value.replace(/^-?[0-9.]*/, "");
      function cleanup(value2) {
        while (value2 < 0) {
          value2 += 4;
        }
        return value2 % 4;
      }
      if (units === "") {
        const num = parseInt(value);
        return isNaN(num) ? 0 : cleanup(num);
      } else if (units !== value) {
        let split = 0;
        switch (units) {
          case "%":
            split = 25;
            break;
          case "deg":
            split = 90;
        }
        if (split) {
          let num = parseFloat(value.slice(0, value.length - units.length));
          if (isNaN(num)) {
            return 0;
          }
          num = num / split;
          return num % 1 === 0 ? cleanup(num) : 0;
        }
      }
      return defaultValue;
    }

    /**
     * Default SVG attributes
     */
    const svgDefaults = {
        'xmlns': 'http://www.w3.org/2000/svg',
        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
        'aria-hidden': true,
        'role': 'img',
    };
    /**
     * Generate icon from properties
     */
    function render(
    // Icon must be validated before calling this function
    icon, 
    // Properties
    props) {
        const customisations = mergeCustomisations(defaults, props);
        const componentProps = { ...svgDefaults };
        // Create style if missing
        let style = typeof props.style === 'string' ? props.style : '';
        // Get element properties
        for (let key in props) {
            const value = props[key];
            if (value === void 0) {
                continue;
            }
            switch (key) {
                // Properties to ignore
                case 'icon':
                case 'style':
                case 'onLoad':
                    break;
                // Boolean attributes
                case 'inline':
                case 'hFlip':
                case 'vFlip':
                    customisations[key] =
                        value === true || value === 'true' || value === 1;
                    break;
                // Flip as string: 'horizontal,vertical'
                case 'flip':
                    if (typeof value === 'string') {
                        flipFromString(customisations, value);
                    }
                    break;
                // Alignment as string
                case 'align':
                    if (typeof value === 'string') {
                        alignmentFromString(customisations, value);
                    }
                    break;
                // Color: copy to style, add extra ';' in case style is missing it
                case 'color':
                    style =
                        style +
                            (style.length > 0 && style.trim().slice(-1) !== ';'
                                ? ';'
                                : '') +
                            'color: ' +
                            value +
                            '; ';
                    break;
                // Rotation as string
                case 'rotate':
                    if (typeof value === 'string') {
                        customisations[key] = rotateFromString(value);
                    }
                    else if (typeof value === 'number') {
                        customisations[key] = value;
                    }
                    break;
                // Remove aria-hidden
                case 'ariaHidden':
                case 'aria-hidden':
                    if (value !== true && value !== 'true') {
                        delete componentProps['aria-hidden'];
                    }
                    break;
                default:
                    if (key.slice(0, 3) === 'on:') {
                        // Svelte event
                        break;
                    }
                    // Copy missing property if it does not exist in customisations
                    if (defaults[key] === void 0) {
                        componentProps[key] = value;
                    }
            }
        }
        // Generate icon
        const item = iconToSVG(icon, customisations);
        // Add icon stuff
        for (let key in item.attributes) {
            componentProps[key] =
                item.attributes[key];
        }
        if (item.inline) {
            // Style overrides it
            style = 'vertical-align: -0.125em; ' + style;
        }
        // Style
        if (style !== '') {
            componentProps.style = style;
        }
        // Counter for ids based on "id" property to render icons consistently on server and client
        let localCounter = 0;
        let id = props.id;
        if (typeof id === 'string') {
            // Convert '-' to '_' to avoid errors in animations
            id = id.replace(/-/g, '_');
        }
        // Generate HTML
        return {
            attributes: componentProps,
            body: replaceIDs(item.body, id ? () => id + 'ID' + localCounter++ : 'iconifySvelte'),
        };
    }
    /**
     * Initialise stuff
     */
    // Enable short names
    allowSimpleNames(true);
    // Set API module
    setAPIModule('', fetchAPIModule);
    /**
     * Browser stuff
     */
    if (typeof document !== 'undefined' && typeof window !== 'undefined') {
        // Set cache and load existing cache
        cache.store = storeCache;
        loadCache();
        const _window = window;
        // Load icons from global "IconifyPreload"
        if (_window.IconifyPreload !== void 0) {
            const preload = _window.IconifyPreload;
            const err = 'Invalid IconifyPreload syntax.';
            if (typeof preload === 'object' && preload !== null) {
                (preload instanceof Array ? preload : [preload]).forEach((item) => {
                    try {
                        if (
                        // Check if item is an object and not null/array
                        typeof item !== 'object' ||
                            item === null ||
                            item instanceof Array ||
                            // Check for 'icons' and 'prefix'
                            typeof item.icons !== 'object' ||
                            typeof item.prefix !== 'string' ||
                            // Add icon set
                            !addCollection(item)) {
                            console.error(err);
                        }
                    }
                    catch (e) {
                        console.error(err);
                    }
                });
            }
        }
        // Set API from global "IconifyProviders"
        if (_window.IconifyProviders !== void 0) {
            const providers = _window.IconifyProviders;
            if (typeof providers === 'object' && providers !== null) {
                for (let key in providers) {
                    const err = 'IconifyProviders[' + key + '] is invalid.';
                    try {
                        const value = providers[key];
                        if (typeof value !== 'object' ||
                            !value ||
                            value.resources === void 0) {
                            continue;
                        }
                        if (!addAPIProvider(key, value)) {
                            console.error(err);
                        }
                    }
                    catch (e) {
                        console.error(err);
                    }
                }
            }
        }
    }
    /**
     * Check if component needs to be updated
     */
    function checkIconState(icon, state, mounted, callback, onload) {
        // Abort loading icon
        function abortLoading() {
            if (state.loading) {
                state.loading.abort();
                state.loading = null;
            }
        }
        // Icon is an object
        if (typeof icon === 'object' &&
            icon !== null &&
            typeof icon.body === 'string') {
            // Stop loading
            state.name = '';
            abortLoading();
            return { data: fullIcon(icon) };
        }
        // Invalid icon?
        let iconName;
        if (typeof icon !== 'string' ||
            (iconName = stringToIcon(icon, false, true)) === null) {
            abortLoading();
            return null;
        }
        // Load icon
        const data = getIconData(iconName);
        if (data === null) {
            // Icon needs to be loaded
            // Do not load icon until component is mounted
            if (mounted && (!state.loading || state.loading.name !== icon)) {
                // New icon to load
                abortLoading();
                state.name = '';
                state.loading = {
                    name: icon,
                    abort: loadIcons([iconName], callback),
                };
            }
            return null;
        }
        // Icon data is available
        abortLoading();
        if (state.name !== icon) {
            state.name = icon;
            if (onload && !state.destroyed) {
                onload(icon);
            }
        }
        // Add classes
        const classes = ['iconify'];
        if (iconName.prefix !== '') {
            classes.push('iconify--' + iconName.prefix);
        }
        if (iconName.provider !== '') {
            classes.push('iconify--' + iconName.provider);
        }
        return { data, classes };
    }
    /**
     * Generate icon
     */
    function generateIcon(icon, props) {
        return icon ? render(icon, props) : null;
    }

    /* node_modules/@iconify/svelte/dist/Icon.svelte generated by Svelte v3.48.0 */

    function create_if_block$a(ctx) {
    	let svg;
    	let raw_value = /*data*/ ctx[0].body + "";
    	let svg_levels = [/*data*/ ctx[0].attributes];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			svg = svg_element("svg");
    			set_svg_attributes(svg, svg_data);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			svg.innerHTML = raw_value;
    		},
    		p(ctx, dirty) {
    			if (dirty & /*data*/ 1 && raw_value !== (raw_value = /*data*/ ctx[0].body + "")) svg.innerHTML = raw_value;			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [dirty & /*data*/ 1 && /*data*/ ctx[0].attributes]));
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    		}
    	};
    }

    function create_fragment$H(ctx) {
    	let if_block_anchor;
    	let if_block = /*data*/ ctx[0] !== null && create_if_block$a(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, [dirty]) {
    			if (/*data*/ ctx[0] !== null) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function instance$w($$self, $$props, $$invalidate) {
    	const state = {
    		// Last icon name
    		name: '',
    		// Loading status
    		loading: null,
    		// Destroyed status
    		destroyed: false
    	};

    	// Mounted status
    	let mounted = false;

    	// Callback counter
    	let counter = 0;

    	// Generated data
    	let data;

    	const onLoad = icon => {
    		// Legacy onLoad property
    		if (typeof $$props.onLoad === 'function') {
    			$$props.onLoad(icon);
    		}

    		// on:load event
    		const dispatch = createEventDispatcher();

    		dispatch('load', { icon });
    	};

    	// Increase counter when loaded to force re-calculation of data
    	function loaded() {
    		$$invalidate(3, counter++, counter);
    	}

    	// Force re-render
    	onMount(() => {
    		$$invalidate(2, mounted = true);
    	});

    	// Abort loading when component is destroyed
    	onDestroy(() => {
    		$$invalidate(1, state.destroyed = true, state);

    		if (state.loading) {
    			state.loading.abort();
    			$$invalidate(1, state.loading = null, state);
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$$.update = () => {
    		{
    			const iconData = checkIconState($$props.icon, state, mounted, loaded, onLoad);
    			$$invalidate(0, data = iconData ? generateIcon(iconData.data, $$props) : null);

    			if (data && iconData.classes) {
    				// Add classes
    				$$invalidate(
    					0,
    					data.attributes['class'] = (typeof $$props['class'] === 'string'
    					? $$props['class'] + ' '
    					: '') + iconData.classes.join(' '),
    					data
    				);
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [data, state, mounted, counter];
    }

    class Icon extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$w, create_fragment$H, safe_not_equal, {});
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const height = parseFloat(style.height);
        const padding_top = parseFloat(style.paddingTop);
        const padding_bottom = parseFloat(style.paddingBottom);
        const margin_top = parseFloat(style.marginTop);
        const margin_bottom = parseFloat(style.marginBottom);
        const border_top_width = parseFloat(style.borderTopWidth);
        const border_bottom_width = parseFloat(style.borderBottomWidth);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `height: ${t * height}px;` +
                `padding-top: ${t * padding_top}px;` +
                `padding-bottom: ${t * padding_bottom}px;` +
                `margin-top: ${t * margin_top}px;` +
                `margin-bottom: ${t * margin_bottom}px;` +
                `border-top-width: ${t * border_top_width}px;` +
                `border-bottom-width: ${t * border_bottom_width}px;`
        };
    }

    /* src/Utils/Navbar.svelte generated by Svelte v3.48.0 */

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i][0];
    	child_ctx[5] = list[i][1];
    	return child_ctx;
    }

    function get_each_context_1$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i][0];
    	child_ctx[5] = list[i][1];
    	return child_ctx;
    }

    // (41:6) {:else}
    function create_else_block_1$4(ctx) {
    	let a;
    	let t_value = /*name*/ ctx[5] + "";
    	let t;

    	return {
    		c() {
    			a = element("a");
    			t = text(t_value);
    			attr(a, "href", /*route*/ ctx[4][0]);
    		},
    		m(target, anchor) {
    			insert(target, a, anchor);
    			append(a, t);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(a);
    		}
    	};
    }

    // (35:6) {#if route.includes(pathname)}
    function create_if_block_2$7(ctx) {
    	let a;
    	let t_value = /*name*/ ctx[5] + "";
    	let t;

    	return {
    		c() {
    			a = element("a");
    			t = text(t_value);
    			attr(a, "href", /*route*/ ctx[4][0]);
    			attr(a, "class", "font-semibold relative after:w-1/2 after:border-b-2 after:absolute after:border-stone-600 after:bottom-0 after:left-1/2 after:-translate-x-1/2");
    		},
    		m(target, anchor) {
    			insert(target, a, anchor);
    			append(a, t);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(a);
    		}
    	};
    }

    // (34:4) {#each navOptions as [route, name]}
    function create_each_block_1$5(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*route*/ ctx[4].includes(/*pathname*/ ctx[1])) return create_if_block_2$7;
    		return create_else_block_1$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if_block.p(ctx, dirty);
    		},
    		d(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (46:2) <Link     to="/icon-sets"     class="items-center hidden px-6 pt-[0.9rem] pb-4 font-semibold tracking-wide  ssm:flex border-2 border-stone-600 gap-6"   >
    function create_default_slot$n(ctx) {
    	let t;
    	let svg;
    	let path0;
    	let path1;

    	return {
    		c() {
    			t = text("Browse Icons\n    ");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr(path0, "d", "M10.6786 14.8369L17.4286 8.33691L10.6786 1.83691");
    			attr(path0, "stroke", "currentColor");
    			attr(path0, "stroke-width", "2.6");
    			attr(path0, "stroke-linecap", "round");
    			attr(path0, "stroke-linejoin", "round");
    			attr(path1, "d", "M17.4286 8.33691L2.00002 8.33691");
    			attr(path1, "stroke", "currentColor");
    			attr(path1, "stroke-width", "2.6");
    			attr(path1, "stroke-linecap", "round");
    			attr(path1, "stroke-linejoin", "round");
    			attr(svg, "class", "flex-shrink-0 text-stone-800 w-4 h-4");
    			attr(svg, "width", "19");
    			attr(svg, "height", "17");
    			attr(svg, "viewBox", "0 0 19 17");
    			attr(svg, "fill", "none");
    			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    			insert(target, svg, anchor);
    			append(svg, path0);
    			append(svg, path1);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t);
    			if (detaching) detach(svg);
    		}
    	};
    }

    // (75:2) {#if isNavOpen}
    function create_if_block$9(ctx) {
    	let div;
    	let div_transition;
    	let current;
    	let each_value = /*navOptions*/ ctx[2];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "fixed z-40 top-0 left-0 w-full h-screen bg-stone-600 flex gap-16 flex-col items-center justify-center text-lg font-medium tracking-wide ");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty & /*navOptions, pathname*/ 6) {
    				each_value = /*navOptions*/ ctx[2];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o(local) {
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};
    }

    // (85:8) {:else}
    function create_else_block$4(ctx) {
    	let a;
    	let t_value = /*name*/ ctx[5] + "";
    	let t;

    	return {
    		c() {
    			a = element("a");
    			t = text(t_value);
    			attr(a, "href", /*route*/ ctx[4][0]);
    		},
    		m(target, anchor) {
    			insert(target, a, anchor);
    			append(a, t);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(a);
    		}
    	};
    }

    // (81:8) {#if route.includes(pathname)}
    function create_if_block_1$8(ctx) {
    	let a;
    	let t_value = /*name*/ ctx[5] + "";
    	let t;

    	return {
    		c() {
    			a = element("a");
    			t = text(t_value);
    			attr(a, "href", /*route*/ ctx[4][0]);
    			attr(a, "class", "font-semibold ");
    			set_style(a, "font-size", "1.3rem");
    		},
    		m(target, anchor) {
    			insert(target, a, anchor);
    			append(a, t);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(a);
    		}
    	};
    }

    // (80:6) {#each navOptions as [route, name]}
    function create_each_block$8(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*route*/ ctx[4].includes(/*pathname*/ ctx[1])) return create_if_block_1$8;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if_block.p(ctx, dirty);
    		},
    		d(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function create_fragment$G(ctx) {
    	let nav;
    	let div0;
    	let button;
    	let icon;
    	let t0;
    	let a;
    	let t1;
    	let div1;
    	let t2;
    	let link;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: {
    				icon: "gg:menu",
    				class: "",
    				width: "1.8rem",
    				height: "1.8rem"
    			}
    		});

    	let each_value_1 = /*navOptions*/ ctx[2];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
    	}

    	link = new Link$1({
    			props: {
    				to: "/icon-sets",
    				class: "items-center hidden px-6 pt-[0.9rem] pb-4 font-semibold tracking-wide  ssm:flex border-2 border-stone-600 gap-6",
    				$$slots: { default: [create_default_slot$n] },
    				$$scope: { ctx }
    			}
    		});

    	let if_block = /*isNavOpen*/ ctx[0] && create_if_block$9(ctx);

    	return {
    		c() {
    			nav = element("nav");
    			div0 = element("div");
    			button = element("button");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			a = element("a");
    			a.innerHTML = `<img src="../assets/logo.svg" alt="iconify logo"/>`;
    			t1 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			create_component(link.$$.fragment);
    			t3 = space();
    			if (if_block) if_block.c();
    			attr(button, "class", "block 1100:hidden");
    			attr(a, "href", "/");
    			attr(div0, "class", "flex items-center flex-shrink-0 gap-6 z-50");
    			attr(div1, "class", "items-center hidden -mt-1 font-medium tracking-wide gap-16 1100:flex");
    			attr(nav, "class", "flex items-center justify-between w-full px-3 390:px-8 ssm:px-12 mb-8");
    		},
    		m(target, anchor) {
    			insert(target, nav, anchor);
    			append(nav, div0);
    			append(div0, button);
    			mount_component(icon, button, null);
    			append(div0, t0);
    			append(div0, a);
    			append(nav, t1);
    			append(nav, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append(nav, t2);
    			mount_component(link, nav, null);
    			append(nav, t3);
    			if (if_block) if_block.m(nav, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen(button, "click", /*toggleNav*/ ctx[3]);
    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*navOptions, pathname*/ 6) {
    				each_value_1 = /*navOptions*/ ctx[2];
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$5(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			const link_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				link_changes.$$scope = { dirty, ctx };
    			}

    			link.$set(link_changes);

    			if (/*isNavOpen*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isNavOpen*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(nav, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(link.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(link.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(nav);
    			destroy_component(icon);
    			destroy_each(each_blocks, detaching);
    			destroy_component(link);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function instance$v($$self, $$props, $$invalidate) {
    	const pathname = `/${new URL(document.URL).pathname.split("/")[1]}`;

    	const navOptions = [
    		[["/"], "Home"],
    		[["/icon-sets", "/icon-set", "/search"], "Icons"],
    		[["https://docs.iconify.design/"], "Documentation"],
    		[["https://github.com/iconify"], "Github"]
    	];

    	let isNavOpen = false;

    	const toggleNav = () => {
    		$$invalidate(0, isNavOpen = !isNavOpen);
    	};

    	return [isNavOpen, pathname, navOptions, toggleNav];
    }

    class Navbar extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$v, create_fragment$G, safe_not_equal, {});
    	}
    }

    /* src/Utils/Footer.svelte generated by Svelte v3.48.0 */

    function create_fragment$F(ctx) {
    	let footer;
    	let div;
    	let icon0;
    	let t0;
    	let icon1;
    	let t1;
    	let icon2;
    	let t2;
    	let icon3;
    	let t3;
    	let icon4;
    	let t4;
    	let p;
    	let t5;
    	let a;
    	let t7;
    	let icon5;
    	let current;

    	icon0 = new Icon({
    			props: {
    				icon: "fluent:home-20-filled",
    				width: "20",
    				height: "20"
    			}
    		});

    	icon1 = new Icon({
    			props: {
    				icon: "fluent:news-20-filled",
    				width: "20",
    				height: "20"
    			}
    		});

    	icon2 = new Icon({
    			props: {
    				icon: "fluent:icons-20-filled",
    				width: "20",
    				height: "20"
    			}
    		});

    	icon3 = new Icon({
    			props: {
    				icon: "fluent:book-information-20-filled",
    				width: "20",
    				height: "20"
    			}
    		});

    	icon4 = new Icon({
    			props: {
    				icon: "ant-design:github-filled",
    				width: "20",
    				height: "20"
    			}
    		});

    	icon5 = new Icon({
    			props: {
    				icon: "akar-icons:linkedin-fill",
    				width: "20",
    				height: "20"
    			}
    		});

    	return {
    		c() {
    			footer = element("footer");
    			div = element("div");
    			create_component(icon0.$$.fragment);
    			t0 = space();
    			create_component(icon1.$$.fragment);
    			t1 = space();
    			create_component(icon2.$$.fragment);
    			t2 = space();
    			create_component(icon3.$$.fragment);
    			t3 = space();
    			create_component(icon4.$$.fragment);
    			t4 = space();
    			p = element("p");
    			t5 = text("© 2020, 2021 Iconify OÜ · ");
    			a = element("a");
    			a.textContent = "About";
    			t7 = text("\n    · ");
    			create_component(icon5.$$.fragment);
    			attr(div, "class", "flex gap-8");
    			attr(a, "class", "text-stone-100 underline");
    			attr(a, "href", "/");
    			attr(p, "class", "tracking-wide flex gap-2 items-center justify-center");
    			attr(footer, "class", "py-4 px-12 w-full mt-16 text-stone-100 flex flex-col gap-4 md:flex-row justify-between items-center bg-stone-600");
    		},
    		m(target, anchor) {
    			insert(target, footer, anchor);
    			append(footer, div);
    			mount_component(icon0, div, null);
    			append(div, t0);
    			mount_component(icon1, div, null);
    			append(div, t1);
    			mount_component(icon2, div, null);
    			append(div, t2);
    			mount_component(icon3, div, null);
    			append(div, t3);
    			mount_component(icon4, div, null);
    			append(footer, t4);
    			append(footer, p);
    			append(p, t5);
    			append(p, a);
    			append(p, t7);
    			mount_component(icon5, p, null);
    			current = true;
    		},
    		p: noop,
    		i(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			transition_in(icon2.$$.fragment, local);
    			transition_in(icon3.$$.fragment, local);
    			transition_in(icon4.$$.fragment, local);
    			transition_in(icon5.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			transition_out(icon2.$$.fragment, local);
    			transition_out(icon3.$$.fragment, local);
    			transition_out(icon4.$$.fragment, local);
    			transition_out(icon5.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(footer);
    			destroy_component(icon0);
    			destroy_component(icon1);
    			destroy_component(icon2);
    			destroy_component(icon3);
    			destroy_component(icon4);
    			destroy_component(icon5);
    		}
    	};
    }

    class Footer extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$F, safe_not_equal, {});
    	}
    }

    /* src/Homepage/Hero.svelte generated by Svelte v3.48.0 */

    function create_fragment$E(ctx) {
    	let div3;

    	return {
    		c() {
    			div3 = element("div");

    			div3.innerHTML = `<div class="inline-flex flex-col w-full ssm:w-auto"><div class="bg-stone-100 !border-b-0 -mb-[4px] pt-4 530:pt-6 inline relative w-min text-5xl 530:text-6xl 700:text-7xl xl:text-8xl font-bold tracking-wide">Unified</div> 
    <div class="bg-stone-100 w-full ssm:w-auto block text-2xl 390:text-3xl 530:text-4xl 700:text-5xl xl:text-6xl font-medium tracking-wide">Icons Framework</div></div> 
  <p class="text-xl sssm:text-xl ssm:text-2xl leading-7 sssm:leading-8 ssm:leading-10 tracking-wide mt-8">More than 100 icon sets, one library.
    <br class="hidden 700:inline"/>Over 100,000 open source vector icons.</p> 
  <form action="/search" class="mt-10 flex w-full md:w-9/12 border-2 border-stone-600 lg:w-5/12 overflow-hidden"><input autocomplete="off" name="q" type="text" class="bg-transparent placeholder-stone-600 w-full px-6 py-3 ssm:py-5 text-xl tracking-wide" placeholder="Search icons..."/> 
    <button type="submit" class="bg-stone-600 py-4 px-6"><svg class="mt-1 w-5 h-5" viewBox="0 0 19 17" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.6786 14.8369L17.4286 8.33691L10.6786 1.83691" stroke="white" stroke-width="2.6" stroke-linecap="round" stroke-linejoin="round"></path><path d="M17.4286 8.33691L2.00002 8.33691" stroke="white" stroke-width="2.6" stroke-linecap="round" stroke-linejoin="round"></path></svg></button></form> 
  <img src="./assets/hero.svg" alt="hero design" class="absolute right-0 top-0 h-full hidden lg:block"/>`;

    			attr(div3, "class", "w-full relative p-4 sssm:p-8 ssm:p-16 ");
    		},
    		m(target, anchor) {
    			insert(target, div3, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div3);
    		}
    	};
    }

    class Hero extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$E, safe_not_equal, {});
    	}
    }

    /* src/Utils/Paragraph.svelte generated by Svelte v3.48.0 */

    function create_fragment$D(ctx) {
    	let p;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	return {
    		c() {
    			p = element("p");
    			if (default_slot) default_slot.c();
    			attr(p, "class", "tracking-wide ");
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);

    			if (default_slot) {
    				default_slot.m(p, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(p);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class Paragraph extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$u, create_fragment$D, safe_not_equal, {});
    	}
    }

    /* src/Homepage/Intro.svelte generated by Svelte v3.48.0 */

    function create_default_slot$m(ctx) {
    	let p;

    	return {
    		c() {
    			p = element("p");

    			p.innerHTML = `There are many excellent icon sets available. Each has its own custom
      syntax, some are available only as fonts and almost all of them load
      entire set even if you are displaying just few icons.
      <br/><br/>
      Iconify tries to combine all those icon sets. Iconify is a unified open source
      icon framework that makes it possible to use many icons from different icon
      sets on same page or in same application using one syntax.
      <br/><br/>
      Iconify combines pixel perfect rendering of SVG with ease of use of glyph fonts,
      while offering more choice than any glyph font or SVG framework.
      <br/><br/>
      You can use Font Awesome, Material Design Icons, Unicons, Dashicons and many
      other icon sets on same page or application using one syntax.`;

    			attr(p, "class", "");
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(p);
    		}
    	};
    }

    function create_fragment$C(ctx) {
    	let div1;
    	let div0;
    	let t5;
    	let paragraph;
    	let current;

    	paragraph = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot$m] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");

    			div0.innerHTML = `Thousands of<br/>icons, one<br/> 
    <span class="">unified</span> framework.`;

    			t5 = space();
    			create_component(paragraph.$$.fragment);
    			attr(div0, "class", "text-5xl font-semibold tracking-wide text-center !leading-tight whitespace-nowrap ");
    			attr(div1, "class", "w-full flex flex-col lg:flex-row gap-12 lg:gap-20 items-center px-0 md:px-16");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    			append(div1, t5);
    			mount_component(paragraph, div1, null);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				paragraph_changes.$$scope = { dirty, ctx };
    			}

    			paragraph.$set(paragraph_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			destroy_component(paragraph);
    		}
    	};
    }

    class Intro extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$C, safe_not_equal, {});
    	}
    }

    /* src/Homepage/Tutorial.svelte generated by Svelte v3.48.0 */

    function create_default_slot_2$d(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.textContent = `Iconify is very easy to use: add one ${"<script>"} tag in head section of your
      document or before ${"</body>"} to include Iconify:`;

    			attr(div, "class", "");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (24:2) <Paragraph>
    function create_default_slot_1$f(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			div.textContent = "Then add icons to your page with simple code like this:";
    			attr(div, "class", "");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (42:2) <Paragraph>
    function create_default_slot$l(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.innerHTML = `If you do not want to use script, Iconify is available as <a>React</a>,
      <a>Vue</a>, <a>Svelte</a> and <a>Ember components</a>. Also there are
      tools available for developers to render SVG (<a>for PHP</a>,
      <a>for Node</a>) and to <a>convert icons</a>.`;

    			attr(div, "class", "");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    function create_fragment$B(ctx) {
    	let div2;
    	let p;
    	let t1;
    	let h2;
    	let t3;
    	let paragraph0;
    	let t4;
    	let div0;
    	let t12;
    	let paragraph1;
    	let t13;
    	let div1;
    	let t32;
    	let paragraph2;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$d] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_1$f] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot$l] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			div2 = element("div");
    			p = element("p");
    			p.textContent = "Get Started";
    			t1 = space();
    			h2 = element("h2");
    			h2.textContent = "How to use Iconify";
    			t3 = space();
    			create_component(paragraph0.$$.fragment);
    			t4 = space();
    			div0 = element("div");
    			div0.innerHTML = `<code class="break-words">&lt;<span style="all: inherit">script</span> src=&quot;<span style="all: inherit text-decoration: underline; text-decoration-thickness: 1px;">https://code.iconify.design/2/2.1.0/iconify.min.js</span>&quot;&gt;&lt;/<span class="" style="all: inherit">script</span>&gt;</code>`;
    			t12 = space();
    			create_component(paragraph1.$$.fragment);
    			t13 = space();
    			div1 = element("div");

    			div1.innerHTML = `<code>&lt;<span style="all: inherit">span</span> class=&quot;<span style="all: inherit">iconify</span>&quot; data-icon=&quot;<span style="all: inherit">fa:home</span>&quot;&gt;&lt;/<span style="all: inherit">span</span>&gt;
      <br/>
      &lt;<span style="all: inherit">span</span> class=&quot;<span style="all: inherit">iconify</span>&quot; data-icon=&quot;<span style="all: inherit">noto:bird&quot;</span>&gt;&lt;/<span style="all: inherit">span</span>&gt;</code>`;

    			t32 = space();
    			create_component(paragraph2.$$.fragment);
    			attr(p, "class", "font-medium text-xl mb-2 text-center tracking-wide");
    			attr(h2, "class", "text-5xl font-semibold tracking-wide text-center mb-6 lg:mb-12");
    			attr(div0, "class", "border-2 border-stone-600 py-4 px-5 mt-4 mb-8");
    			attr(div1, "class", "border-2 border-stone-600 py-4 px-5 mt-4 mb-8");
    			attr(div2, "class", "w-full px-0 md:px-16");
    		},
    		m(target, anchor) {
    			insert(target, div2, anchor);
    			append(div2, p);
    			append(div2, t1);
    			append(div2, h2);
    			append(div2, t3);
    			mount_component(paragraph0, div2, null);
    			append(div2, t4);
    			append(div2, div0);
    			append(div2, t12);
    			mount_component(paragraph1, div2, null);
    			append(div2, t13);
    			append(div2, div1);
    			append(div2, t32);
    			mount_component(paragraph2, div2, null);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div2);
    			destroy_component(paragraph0);
    			destroy_component(paragraph1);
    			destroy_component(paragraph2);
    		}
    	};
    }

    class Tutorial extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$B, safe_not_equal, {});
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    /*!
     * 
     *   typed.js - A JavaScript Typing Animation Library
     *   Author: Matt Boldt <me@mattboldt.com>
     *   Version: v2.0.12
     *   Url: https://github.com/mattboldt/typed.js
     *   License(s): MIT
     * 
     */

    var typed = createCommonjsModule(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(commonjsGlobal, function() {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId])
    /******/ 			return installedModules[moduleId].exports;
    /******/
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			exports: {},
    /******/ 			id: moduleId,
    /******/ 			loaded: false
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.loaded = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(0);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {
    	
    	Object.defineProperty(exports, '__esModule', {
    	  value: true
    	});
    	
    	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
    	
    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
    	
    	var _initializerJs = __webpack_require__(1);
    	
    	var _htmlParserJs = __webpack_require__(3);
    	
    	/**
    	 * Welcome to Typed.js!
    	 * @param {string} elementId HTML element ID _OR_ HTML element
    	 * @param {object} options options object
    	 * @returns {object} a new Typed object
    	 */
    	
    	var Typed = (function () {
    	  function Typed(elementId, options) {
    	    _classCallCheck(this, Typed);
    	
    	    // Initialize it up
    	    _initializerJs.initializer.load(this, options, elementId);
    	    // All systems go!
    	    this.begin();
    	  }
    	
    	  /**
    	   * Toggle start() and stop() of the Typed instance
    	   * @public
    	   */
    	
    	  _createClass(Typed, [{
    	    key: 'toggle',
    	    value: function toggle() {
    	      this.pause.status ? this.start() : this.stop();
    	    }
    	
    	    /**
    	     * Stop typing / backspacing and enable cursor blinking
    	     * @public
    	     */
    	  }, {
    	    key: 'stop',
    	    value: function stop() {
    	      if (this.typingComplete) return;
    	      if (this.pause.status) return;
    	      this.toggleBlinking(true);
    	      this.pause.status = true;
    	      this.options.onStop(this.arrayPos, this);
    	    }
    	
    	    /**
    	     * Start typing / backspacing after being stopped
    	     * @public
    	     */
    	  }, {
    	    key: 'start',
    	    value: function start() {
    	      if (this.typingComplete) return;
    	      if (!this.pause.status) return;
    	      this.pause.status = false;
    	      if (this.pause.typewrite) {
    	        this.typewrite(this.pause.curString, this.pause.curStrPos);
    	      } else {
    	        this.backspace(this.pause.curString, this.pause.curStrPos);
    	      }
    	      this.options.onStart(this.arrayPos, this);
    	    }
    	
    	    /**
    	     * Destroy this instance of Typed
    	     * @public
    	     */
    	  }, {
    	    key: 'destroy',
    	    value: function destroy() {
    	      this.reset(false);
    	      this.options.onDestroy(this);
    	    }
    	
    	    /**
    	     * Reset Typed and optionally restarts
    	     * @param {boolean} restart
    	     * @public
    	     */
    	  }, {
    	    key: 'reset',
    	    value: function reset() {
    	      var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
    	
    	      clearInterval(this.timeout);
    	      this.replaceText('');
    	      if (this.cursor && this.cursor.parentNode) {
    	        this.cursor.parentNode.removeChild(this.cursor);
    	        this.cursor = null;
    	      }
    	      this.strPos = 0;
    	      this.arrayPos = 0;
    	      this.curLoop = 0;
    	      if (restart) {
    	        this.insertCursor();
    	        this.options.onReset(this);
    	        this.begin();
    	      }
    	    }
    	
    	    /**
    	     * Begins the typing animation
    	     * @private
    	     */
    	  }, {
    	    key: 'begin',
    	    value: function begin() {
    	      var _this = this;
    	
    	      this.options.onBegin(this);
    	      this.typingComplete = false;
    	      this.shuffleStringsIfNeeded(this);
    	      this.insertCursor();
    	      if (this.bindInputFocusEvents) this.bindFocusEvents();
    	      this.timeout = setTimeout(function () {
    	        // Check if there is some text in the element, if yes start by backspacing the default message
    	        if (!_this.currentElContent || _this.currentElContent.length === 0) {
    	          _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);
    	        } else {
    	          // Start typing
    	          _this.backspace(_this.currentElContent, _this.currentElContent.length);
    	        }
    	      }, this.startDelay);
    	    }
    	
    	    /**
    	     * Called for each character typed
    	     * @param {string} curString the current string in the strings array
    	     * @param {number} curStrPos the current position in the curString
    	     * @private
    	     */
    	  }, {
    	    key: 'typewrite',
    	    value: function typewrite(curString, curStrPos) {
    	      var _this2 = this;
    	
    	      if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {
    	        this.el.classList.remove(this.fadeOutClass);
    	        if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);
    	      }
    	
    	      var humanize = this.humanizer(this.typeSpeed);
    	      var numChars = 1;
    	
    	      if (this.pause.status === true) {
    	        this.setPauseStatus(curString, curStrPos, true);
    	        return;
    	      }
    	
    	      // contain typing function in a timeout humanize'd delay
    	      this.timeout = setTimeout(function () {
    	        // skip over any HTML chars
    	        curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);
    	
    	        var pauseTime = 0;
    	        var substr = curString.substr(curStrPos);
    	        // check for an escape character before a pause value
    	        // format: \^\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^
    	        // single ^ are removed from string
    	        if (substr.charAt(0) === '^') {
    	          if (/^\^\d+/.test(substr)) {
    	            var skip = 1; // skip at least 1
    	            substr = /\d+/.exec(substr)[0];
    	            skip += substr.length;
    	            pauseTime = parseInt(substr);
    	            _this2.temporaryPause = true;
    	            _this2.options.onTypingPaused(_this2.arrayPos, _this2);
    	            // strip out the escape character and pause value so they're not printed
    	            curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);
    	            _this2.toggleBlinking(true);
    	          }
    	        }
    	
    	        // check for skip characters formatted as
    	        // "this is a `string to print NOW` ..."
    	        if (substr.charAt(0) === '`') {
    	          while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {
    	            numChars++;
    	            if (curStrPos + numChars > curString.length) break;
    	          }
    	          // strip out the escape characters and append all the string in between
    	          var stringBeforeSkip = curString.substring(0, curStrPos);
    	          var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);
    	          var stringAfterSkip = curString.substring(curStrPos + numChars + 1);
    	          curString = stringBeforeSkip + stringSkipped + stringAfterSkip;
    	          numChars--;
    	        }
    	
    	        // timeout for any pause after a character
    	        _this2.timeout = setTimeout(function () {
    	          // Accounts for blinking while paused
    	          _this2.toggleBlinking(false);
    	
    	          // We're done with this sentence!
    	          if (curStrPos >= curString.length) {
    	            _this2.doneTyping(curString, curStrPos);
    	          } else {
    	            _this2.keepTyping(curString, curStrPos, numChars);
    	          }
    	          // end of character pause
    	          if (_this2.temporaryPause) {
    	            _this2.temporaryPause = false;
    	            _this2.options.onTypingResumed(_this2.arrayPos, _this2);
    	          }
    	        }, pauseTime);
    	
    	        // humanized value for typing
    	      }, humanize);
    	    }
    	
    	    /**
    	     * Continue to the next string & begin typing
    	     * @param {string} curString the current string in the strings array
    	     * @param {number} curStrPos the current position in the curString
    	     * @private
    	     */
    	  }, {
    	    key: 'keepTyping',
    	    value: function keepTyping(curString, curStrPos, numChars) {
    	      // call before functions if applicable
    	      if (curStrPos === 0) {
    	        this.toggleBlinking(false);
    	        this.options.preStringTyped(this.arrayPos, this);
    	      }
    	      // start typing each new char into existing string
    	      // curString: arg, this.el.html: original text inside element
    	      curStrPos += numChars;
    	      var nextString = curString.substr(0, curStrPos);
    	      this.replaceText(nextString);
    	      // loop the function
    	      this.typewrite(curString, curStrPos);
    	    }
    	
    	    /**
    	     * We're done typing the current string
    	     * @param {string} curString the current string in the strings array
    	     * @param {number} curStrPos the current position in the curString
    	     * @private
    	     */
    	  }, {
    	    key: 'doneTyping',
    	    value: function doneTyping(curString, curStrPos) {
    	      var _this3 = this;
    	
    	      // fires callback function
    	      this.options.onStringTyped(this.arrayPos, this);
    	      this.toggleBlinking(true);
    	      // is this the final string
    	      if (this.arrayPos === this.strings.length - 1) {
    	        // callback that occurs on the last typed string
    	        this.complete();
    	        // quit if we wont loop back
    	        if (this.loop === false || this.curLoop === this.loopCount) {
    	          return;
    	        }
    	      }
    	      this.timeout = setTimeout(function () {
    	        _this3.backspace(curString, curStrPos);
    	      }, this.backDelay);
    	    }
    	
    	    /**
    	     * Backspaces 1 character at a time
    	     * @param {string} curString the current string in the strings array
    	     * @param {number} curStrPos the current position in the curString
    	     * @private
    	     */
    	  }, {
    	    key: 'backspace',
    	    value: function backspace(curString, curStrPos) {
    	      var _this4 = this;
    	
    	      if (this.pause.status === true) {
    	        this.setPauseStatus(curString, curStrPos, false);
    	        return;
    	      }
    	      if (this.fadeOut) return this.initFadeOut();
    	
    	      this.toggleBlinking(false);
    	      var humanize = this.humanizer(this.backSpeed);
    	
    	      this.timeout = setTimeout(function () {
    	        curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4);
    	        // replace text with base text + typed characters
    	        var curStringAtPosition = curString.substr(0, curStrPos);
    	        _this4.replaceText(curStringAtPosition);
    	
    	        // if smartBack is enabled
    	        if (_this4.smartBackspace) {
    	          // the remaining part of the current string is equal of the same part of the new string
    	          var nextString = _this4.strings[_this4.arrayPos + 1];
    	          if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {
    	            _this4.stopNum = curStrPos;
    	          } else {
    	            _this4.stopNum = 0;
    	          }
    	        }
    	
    	        // if the number (id of character in current string) is
    	        // less than the stop number, keep going
    	        if (curStrPos > _this4.stopNum) {
    	          // subtract characters one by one
    	          curStrPos--;
    	          // loop the function
    	          _this4.backspace(curString, curStrPos);
    	        } else if (curStrPos <= _this4.stopNum) {
    	          // if the stop number has been reached, increase
    	          // array position to next string
    	          _this4.arrayPos++;
    	          // When looping, begin at the beginning after backspace complete
    	          if (_this4.arrayPos === _this4.strings.length) {
    	            _this4.arrayPos = 0;
    	            _this4.options.onLastStringBackspaced();
    	            _this4.shuffleStringsIfNeeded();
    	            _this4.begin();
    	          } else {
    	            _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);
    	          }
    	        }
    	        // humanized value for typing
    	      }, humanize);
    	    }
    	
    	    /**
    	     * Full animation is complete
    	     * @private
    	     */
    	  }, {
    	    key: 'complete',
    	    value: function complete() {
    	      this.options.onComplete(this);
    	      if (this.loop) {
    	        this.curLoop++;
    	      } else {
    	        this.typingComplete = true;
    	      }
    	    }
    	
    	    /**
    	     * Has the typing been stopped
    	     * @param {string} curString the current string in the strings array
    	     * @param {number} curStrPos the current position in the curString
    	     * @param {boolean} isTyping
    	     * @private
    	     */
    	  }, {
    	    key: 'setPauseStatus',
    	    value: function setPauseStatus(curString, curStrPos, isTyping) {
    	      this.pause.typewrite = isTyping;
    	      this.pause.curString = curString;
    	      this.pause.curStrPos = curStrPos;
    	    }
    	
    	    /**
    	     * Toggle the blinking cursor
    	     * @param {boolean} isBlinking
    	     * @private
    	     */
    	  }, {
    	    key: 'toggleBlinking',
    	    value: function toggleBlinking(isBlinking) {
    	      if (!this.cursor) return;
    	      // if in paused state, don't toggle blinking a 2nd time
    	      if (this.pause.status) return;
    	      if (this.cursorBlinking === isBlinking) return;
    	      this.cursorBlinking = isBlinking;
    	      if (isBlinking) {
    	        this.cursor.classList.add('typed-cursor--blink');
    	      } else {
    	        this.cursor.classList.remove('typed-cursor--blink');
    	      }
    	    }
    	
    	    /**
    	     * Speed in MS to type
    	     * @param {number} speed
    	     * @private
    	     */
    	  }, {
    	    key: 'humanizer',
    	    value: function humanizer(speed) {
    	      return Math.round(Math.random() * speed / 2) + speed;
    	    }
    	
    	    /**
    	     * Shuffle the sequence of the strings array
    	     * @private
    	     */
    	  }, {
    	    key: 'shuffleStringsIfNeeded',
    	    value: function shuffleStringsIfNeeded() {
    	      if (!this.shuffle) return;
    	      this.sequence = this.sequence.sort(function () {
    	        return Math.random() - 0.5;
    	      });
    	    }
    	
    	    /**
    	     * Adds a CSS class to fade out current string
    	     * @private
    	     */
    	  }, {
    	    key: 'initFadeOut',
    	    value: function initFadeOut() {
    	      var _this5 = this;
    	
    	      this.el.className += ' ' + this.fadeOutClass;
    	      if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;
    	      return setTimeout(function () {
    	        _this5.arrayPos++;
    	        _this5.replaceText('');
    	
    	        // Resets current string if end of loop reached
    	        if (_this5.strings.length > _this5.arrayPos) {
    	          _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);
    	        } else {
    	          _this5.typewrite(_this5.strings[0], 0);
    	          _this5.arrayPos = 0;
    	        }
    	      }, this.fadeOutDelay);
    	    }
    	
    	    /**
    	     * Replaces current text in the HTML element
    	     * depending on element type
    	     * @param {string} str
    	     * @private
    	     */
    	  }, {
    	    key: 'replaceText',
    	    value: function replaceText(str) {
    	      if (this.attr) {
    	        this.el.setAttribute(this.attr, str);
    	      } else {
    	        if (this.isInput) {
    	          this.el.value = str;
    	        } else if (this.contentType === 'html') {
    	          this.el.innerHTML = str;
    	        } else {
    	          this.el.textContent = str;
    	        }
    	      }
    	    }
    	
    	    /**
    	     * If using input elements, bind focus in order to
    	     * start and stop the animation
    	     * @private
    	     */
    	  }, {
    	    key: 'bindFocusEvents',
    	    value: function bindFocusEvents() {
    	      var _this6 = this;
    	
    	      if (!this.isInput) return;
    	      this.el.addEventListener('focus', function (e) {
    	        _this6.stop();
    	      });
    	      this.el.addEventListener('blur', function (e) {
    	        if (_this6.el.value && _this6.el.value.length !== 0) {
    	          return;
    	        }
    	        _this6.start();
    	      });
    	    }
    	
    	    /**
    	     * On init, insert the cursor element
    	     * @private
    	     */
    	  }, {
    	    key: 'insertCursor',
    	    value: function insertCursor() {
    	      if (!this.showCursor) return;
    	      if (this.cursor) return;
    	      this.cursor = document.createElement('span');
    	      this.cursor.className = 'typed-cursor';
    	      this.cursor.setAttribute('aria-hidden', true);
    	      this.cursor.innerHTML = this.cursorChar;
    	      this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);
    	    }
    	  }]);
    	
    	  return Typed;
    	})();
    	
    	exports['default'] = Typed;
    	module.exports = exports['default'];

    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {
    	
    	Object.defineProperty(exports, '__esModule', {
    	  value: true
    	});
    	
    	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
    	
    	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
    	
    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
    	
    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
    	
    	var _defaultsJs = __webpack_require__(2);
    	
    	var _defaultsJs2 = _interopRequireDefault(_defaultsJs);
    	
    	/**
    	 * Initialize the Typed object
    	 */
    	
    	var Initializer = (function () {
    	  function Initializer() {
    	    _classCallCheck(this, Initializer);
    	  }
    	
    	  _createClass(Initializer, [{
    	    key: 'load',
    	
    	    /**
    	     * Load up defaults & options on the Typed instance
    	     * @param {Typed} self instance of Typed
    	     * @param {object} options options object
    	     * @param {string} elementId HTML element ID _OR_ instance of HTML element
    	     * @private
    	     */
    	
    	    value: function load(self, options, elementId) {
    	      // chosen element to manipulate text
    	      if (typeof elementId === 'string') {
    	        self.el = document.querySelector(elementId);
    	      } else {
    	        self.el = elementId;
    	      }
    	
    	      self.options = _extends({}, _defaultsJs2['default'], options);
    	
    	      // attribute to type into
    	      self.isInput = self.el.tagName.toLowerCase() === 'input';
    	      self.attr = self.options.attr;
    	      self.bindInputFocusEvents = self.options.bindInputFocusEvents;
    	
    	      // show cursor
    	      self.showCursor = self.isInput ? false : self.options.showCursor;
    	
    	      // custom cursor
    	      self.cursorChar = self.options.cursorChar;
    	
    	      // Is the cursor blinking
    	      self.cursorBlinking = true;
    	
    	      // text content of element
    	      self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;
    	
    	      // html or plain text
    	      self.contentType = self.options.contentType;
    	
    	      // typing speed
    	      self.typeSpeed = self.options.typeSpeed;
    	
    	      // add a delay before typing starts
    	      self.startDelay = self.options.startDelay;
    	
    	      // backspacing speed
    	      self.backSpeed = self.options.backSpeed;
    	
    	      // only backspace what doesn't match the previous string
    	      self.smartBackspace = self.options.smartBackspace;
    	
    	      // amount of time to wait before backspacing
    	      self.backDelay = self.options.backDelay;
    	
    	      // Fade out instead of backspace
    	      self.fadeOut = self.options.fadeOut;
    	      self.fadeOutClass = self.options.fadeOutClass;
    	      self.fadeOutDelay = self.options.fadeOutDelay;
    	
    	      // variable to check whether typing is currently paused
    	      self.isPaused = false;
    	
    	      // input strings of text
    	      self.strings = self.options.strings.map(function (s) {
    	        return s.trim();
    	      });
    	
    	      // div containing strings
    	      if (typeof self.options.stringsElement === 'string') {
    	        self.stringsElement = document.querySelector(self.options.stringsElement);
    	      } else {
    	        self.stringsElement = self.options.stringsElement;
    	      }
    	
    	      if (self.stringsElement) {
    	        self.strings = [];
    	        self.stringsElement.style.display = 'none';
    	        var strings = Array.prototype.slice.apply(self.stringsElement.children);
    	        var stringsLength = strings.length;
    	
    	        if (stringsLength) {
    	          for (var i = 0; i < stringsLength; i += 1) {
    	            var stringEl = strings[i];
    	            self.strings.push(stringEl.innerHTML.trim());
    	          }
    	        }
    	      }
    	
    	      // character number position of current string
    	      self.strPos = 0;
    	
    	      // current array position
    	      self.arrayPos = 0;
    	
    	      // index of string to stop backspacing on
    	      self.stopNum = 0;
    	
    	      // Looping logic
    	      self.loop = self.options.loop;
    	      self.loopCount = self.options.loopCount;
    	      self.curLoop = 0;
    	
    	      // shuffle the strings
    	      self.shuffle = self.options.shuffle;
    	      // the order of strings
    	      self.sequence = [];
    	
    	      self.pause = {
    	        status: false,
    	        typewrite: true,
    	        curString: '',
    	        curStrPos: 0
    	      };
    	
    	      // When the typing is complete (when not looped)
    	      self.typingComplete = false;
    	
    	      // Set the order in which the strings are typed
    	      for (var i in self.strings) {
    	        self.sequence[i] = i;
    	      }
    	
    	      // If there is some text in the element
    	      self.currentElContent = this.getCurrentElContent(self);
    	
    	      self.autoInsertCss = self.options.autoInsertCss;
    	
    	      this.appendAnimationCss(self);
    	    }
    	  }, {
    	    key: 'getCurrentElContent',
    	    value: function getCurrentElContent(self) {
    	      var elContent = '';
    	      if (self.attr) {
    	        elContent = self.el.getAttribute(self.attr);
    	      } else if (self.isInput) {
    	        elContent = self.el.value;
    	      } else if (self.contentType === 'html') {
    	        elContent = self.el.innerHTML;
    	      } else {
    	        elContent = self.el.textContent;
    	      }
    	      return elContent;
    	    }
    	  }, {
    	    key: 'appendAnimationCss',
    	    value: function appendAnimationCss(self) {
    	      var cssDataName = 'data-typed-js-css';
    	      if (!self.autoInsertCss) {
    	        return;
    	      }
    	      if (!self.showCursor && !self.fadeOut) {
    	        return;
    	      }
    	      if (document.querySelector('[' + cssDataName + ']')) {
    	        return;
    	      }
    	
    	      var css = document.createElement('style');
    	      css.type = 'text/css';
    	      css.setAttribute(cssDataName, true);
    	
    	      var innerCss = '';
    	      if (self.showCursor) {
    	        innerCss += '\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      ';
    	      }
    	      if (self.fadeOut) {
    	        innerCss += '\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      ';
    	      }
    	      if (css.length === 0) {
    	        return;
    	      }
    	      css.innerHTML = innerCss;
    	      document.body.appendChild(css);
    	    }
    	  }]);
    	
    	  return Initializer;
    	})();
    	
    	exports['default'] = Initializer;
    	var initializer = new Initializer();
    	exports.initializer = initializer;

    /***/ }),
    /* 2 */
    /***/ (function(module, exports) {
    	
    	Object.defineProperty(exports, '__esModule', {
    	  value: true
    	});
    	var defaults = {
    	  /**
    	   * @property {array} strings strings to be typed
    	   * @property {string} stringsElement ID of element containing string children
    	   */
    	  strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],
    	  stringsElement: null,
    	
    	  /**
    	   * @property {number} typeSpeed type speed in milliseconds
    	   */
    	  typeSpeed: 0,
    	
    	  /**
    	   * @property {number} startDelay time before typing starts in milliseconds
    	   */
    	  startDelay: 0,
    	
    	  /**
    	   * @property {number} backSpeed backspacing speed in milliseconds
    	   */
    	  backSpeed: 0,
    	
    	  /**
    	   * @property {boolean} smartBackspace only backspace what doesn't match the previous string
    	   */
    	  smartBackspace: true,
    	
    	  /**
    	   * @property {boolean} shuffle shuffle the strings
    	   */
    	  shuffle: false,
    	
    	  /**
    	   * @property {number} backDelay time before backspacing in milliseconds
    	   */
    	  backDelay: 700,
    	
    	  /**
    	   * @property {boolean} fadeOut Fade out instead of backspace
    	   * @property {string} fadeOutClass css class for fade animation
    	   * @property {boolean} fadeOutDelay Fade out delay in milliseconds
    	   */
    	  fadeOut: false,
    	  fadeOutClass: 'typed-fade-out',
    	  fadeOutDelay: 500,
    	
    	  /**
    	   * @property {boolean} loop loop strings
    	   * @property {number} loopCount amount of loops
    	   */
    	  loop: false,
    	  loopCount: Infinity,
    	
    	  /**
    	   * @property {boolean} showCursor show cursor
    	   * @property {string} cursorChar character for cursor
    	   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>
    	   */
    	  showCursor: true,
    	  cursorChar: '|',
    	  autoInsertCss: true,
    	
    	  /**
    	   * @property {string} attr attribute for typing
    	   * Ex: input placeholder, value, or just HTML text
    	   */
    	  attr: null,
    	
    	  /**
    	   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input
    	   */
    	  bindInputFocusEvents: false,
    	
    	  /**
    	   * @property {string} contentType 'html' or 'null' for plaintext
    	   */
    	  contentType: 'html',
    	
    	  /**
    	   * Before it begins typing
    	   * @param {Typed} self
    	   */
    	  onBegin: function onBegin(self) {},
    	
    	  /**
    	   * All typing is complete
    	   * @param {Typed} self
    	   */
    	  onComplete: function onComplete(self) {},
    	
    	  /**
    	   * Before each string is typed
    	   * @param {number} arrayPos
    	   * @param {Typed} self
    	   */
    	  preStringTyped: function preStringTyped(arrayPos, self) {},
    	
    	  /**
    	   * After each string is typed
    	   * @param {number} arrayPos
    	   * @param {Typed} self
    	   */
    	  onStringTyped: function onStringTyped(arrayPos, self) {},
    	
    	  /**
    	   * During looping, after last string is typed
    	   * @param {Typed} self
    	   */
    	  onLastStringBackspaced: function onLastStringBackspaced(self) {},
    	
    	  /**
    	   * Typing has been stopped
    	   * @param {number} arrayPos
    	   * @param {Typed} self
    	   */
    	  onTypingPaused: function onTypingPaused(arrayPos, self) {},
    	
    	  /**
    	   * Typing has been started after being stopped
    	   * @param {number} arrayPos
    	   * @param {Typed} self
    	   */
    	  onTypingResumed: function onTypingResumed(arrayPos, self) {},
    	
    	  /**
    	   * After reset
    	   * @param {Typed} self
    	   */
    	  onReset: function onReset(self) {},
    	
    	  /**
    	   * After stop
    	   * @param {number} arrayPos
    	   * @param {Typed} self
    	   */
    	  onStop: function onStop(arrayPos, self) {},
    	
    	  /**
    	   * After start
    	   * @param {number} arrayPos
    	   * @param {Typed} self
    	   */
    	  onStart: function onStart(arrayPos, self) {},
    	
    	  /**
    	   * After destroy
    	   * @param {Typed} self
    	   */
    	  onDestroy: function onDestroy(self) {}
    	};
    	
    	exports['default'] = defaults;
    	module.exports = exports['default'];

    /***/ }),
    /* 3 */
    /***/ (function(module, exports) {
    	
    	Object.defineProperty(exports, '__esModule', {
    	  value: true
    	});
    	
    	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
    	
    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
    	
    	var HTMLParser = (function () {
    	  function HTMLParser() {
    	    _classCallCheck(this, HTMLParser);
    	  }
    	
    	  _createClass(HTMLParser, [{
    	    key: 'typeHtmlChars',
    	
    	    /**
    	     * Type HTML tags & HTML Characters
    	     * @param {string} curString Current string
    	     * @param {number} curStrPos Position in current string
    	     * @param {Typed} self instance of Typed
    	     * @returns {number} a new string position
    	     * @private
    	     */
    	
    	    value: function typeHtmlChars(curString, curStrPos, self) {
    	      if (self.contentType !== 'html') return curStrPos;
    	      var curChar = curString.substr(curStrPos).charAt(0);
    	      if (curChar === '<' || curChar === '&') {
    	        var endTag = '';
    	        if (curChar === '<') {
    	          endTag = '>';
    	        } else {
    	          endTag = ';';
    	        }
    	        while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {
    	          curStrPos++;
    	          if (curStrPos + 1 > curString.length) {
    	            break;
    	          }
    	        }
    	        curStrPos++;
    	      }
    	      return curStrPos;
    	    }
    	
    	    /**
    	     * Backspace HTML tags and HTML Characters
    	     * @param {string} curString Current string
    	     * @param {number} curStrPos Position in current string
    	     * @param {Typed} self instance of Typed
    	     * @returns {number} a new string position
    	     * @private
    	     */
    	  }, {
    	    key: 'backSpaceHtmlChars',
    	    value: function backSpaceHtmlChars(curString, curStrPos, self) {
    	      if (self.contentType !== 'html') return curStrPos;
    	      var curChar = curString.substr(curStrPos).charAt(0);
    	      if (curChar === '>' || curChar === ';') {
    	        var endTag = '';
    	        if (curChar === '>') {
    	          endTag = '<';
    	        } else {
    	          endTag = '&';
    	        }
    	        while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {
    	          curStrPos--;
    	          if (curStrPos < 0) {
    	            break;
    	          }
    	        }
    	        curStrPos--;
    	      }
    	      return curStrPos;
    	    }
    	  }]);
    	
    	  return HTMLParser;
    	})();
    	
    	exports['default'] = HTMLParser;
    	var htmlParser = new HTMLParser();
    	exports.htmlParser = htmlParser;

    /***/ })
    /******/ ])
    });
    });

    var Typed = /*@__PURE__*/getDefaultExportFromCjs(typed);

    /* node_modules/@loscrackitos/svelte-typed-js/src/TypedJs.svelte generated by Svelte v3.48.0 */

    function create_fragment$A(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[19],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[19], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	const dispatch = createEventDispatcher();

    	onMount(() => {
    		let el = document.querySelector('.typing');

    		new Typed(el,
    		{
    				strings,
    				stringsElement,
    				typeSpeed,
    				startDelay,
    				backSpeed,
    				smartBackspace,
    				shuffle,
    				backDelay,
    				fadeOut,
    				fadeOutClass,
    				fadeOutDelay,
    				loop,
    				loopCount,
    				showCursor,
    				cursorChar,
    				autoInsertCss,
    				attr,
    				bindInputFocusEvents,
    				contentType,
    				onComplete: () => dispatch('complete'),
    				onPreStringTyped: () => dispatch('preStringTyped'),
    				onStringTyped: () => dispatch('stringTyped'),
    				onLastStringBackspaced: () => dispatch('lastStringBackspaced'),
    				onTypingPaused: () => dispatch('typingPaused'),
    				onTypingResumed: () => dispatch('typingResumed'),
    				onReset: () => dispatch('reset'),
    				onStop: () => dispatch('stop'),
    				onStart: () => dispatch('start'),
    				onDestroy: () => dispatch('destroy')
    			});
    	});

    	let { strings = ['Hello World!'] } = $$props;
    	let { stringsElement = null } = $$props;
    	let { typeSpeed = 50 } = $$props;
    	let { startDelay = 0 } = $$props;
    	let { backSpeed = 0 } = $$props;
    	let { smartBackspace = true } = $$props;
    	let { shuffle = false } = $$props;
    	let { backDelay = 700 } = $$props;
    	let { fadeOut = false } = $$props;
    	let { fadeOutClass = 'typed-fade-out' } = $$props;
    	let { fadeOutDelay = 500 } = $$props;
    	let { loop = false } = $$props;
    	let { loopCount = Infinity } = $$props;
    	let { showCursor = true } = $$props;
    	let { cursorChar = '|' } = $$props;
    	let { autoInsertCss = true } = $$props;
    	let { attr = null } = $$props;
    	let { bindInputFocusEvents = false } = $$props;
    	let { contentType = 'html' } = $$props;

    	$$self.$$set = $$props => {
    		if ('strings' in $$props) $$invalidate(0, strings = $$props.strings);
    		if ('stringsElement' in $$props) $$invalidate(1, stringsElement = $$props.stringsElement);
    		if ('typeSpeed' in $$props) $$invalidate(2, typeSpeed = $$props.typeSpeed);
    		if ('startDelay' in $$props) $$invalidate(3, startDelay = $$props.startDelay);
    		if ('backSpeed' in $$props) $$invalidate(4, backSpeed = $$props.backSpeed);
    		if ('smartBackspace' in $$props) $$invalidate(5, smartBackspace = $$props.smartBackspace);
    		if ('shuffle' in $$props) $$invalidate(6, shuffle = $$props.shuffle);
    		if ('backDelay' in $$props) $$invalidate(7, backDelay = $$props.backDelay);
    		if ('fadeOut' in $$props) $$invalidate(8, fadeOut = $$props.fadeOut);
    		if ('fadeOutClass' in $$props) $$invalidate(9, fadeOutClass = $$props.fadeOutClass);
    		if ('fadeOutDelay' in $$props) $$invalidate(10, fadeOutDelay = $$props.fadeOutDelay);
    		if ('loop' in $$props) $$invalidate(11, loop = $$props.loop);
    		if ('loopCount' in $$props) $$invalidate(12, loopCount = $$props.loopCount);
    		if ('showCursor' in $$props) $$invalidate(13, showCursor = $$props.showCursor);
    		if ('cursorChar' in $$props) $$invalidate(14, cursorChar = $$props.cursorChar);
    		if ('autoInsertCss' in $$props) $$invalidate(15, autoInsertCss = $$props.autoInsertCss);
    		if ('attr' in $$props) $$invalidate(16, attr = $$props.attr);
    		if ('bindInputFocusEvents' in $$props) $$invalidate(17, bindInputFocusEvents = $$props.bindInputFocusEvents);
    		if ('contentType' in $$props) $$invalidate(18, contentType = $$props.contentType);
    		if ('$$scope' in $$props) $$invalidate(19, $$scope = $$props.$$scope);
    	};

    	return [
    		strings,
    		stringsElement,
    		typeSpeed,
    		startDelay,
    		backSpeed,
    		smartBackspace,
    		shuffle,
    		backDelay,
    		fadeOut,
    		fadeOutClass,
    		fadeOutDelay,
    		loop,
    		loopCount,
    		showCursor,
    		cursorChar,
    		autoInsertCss,
    		attr,
    		bindInputFocusEvents,
    		contentType,
    		$$scope,
    		slots
    	];
    }

    class TypedJs extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$t, create_fragment$A, safe_not_equal, {
    			strings: 0,
    			stringsElement: 1,
    			typeSpeed: 2,
    			startDelay: 3,
    			backSpeed: 4,
    			smartBackspace: 5,
    			shuffle: 6,
    			backDelay: 7,
    			fadeOut: 8,
    			fadeOutClass: 9,
    			fadeOutDelay: 10,
    			loop: 11,
    			loopCount: 12,
    			showCursor: 13,
    			cursorChar: 14,
    			autoInsertCss: 15,
    			attr: 16,
    			bindInputFocusEvents: 17,
    			contentType: 18
    		});
    	}
    }

    /* src/Homepage/Features.svelte generated by Svelte v3.48.0 */

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (51:2) <Paragraph>
    function create_default_slot_5$8(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.innerHTML = `Iconify icons collection includes <a href="/icon-sets">over 100,000 icons</a>
      from popular fonts and emoji sets: <a>Font Awesome 4 and 5</a>,
      <a>Material Design Icons</a>, <a>IonIcons</a>, <a>Vaadin Icons</a>,
      <a>Entypo+</a>
      and many many more. You can use them all on same page without loading
      multiple glyph fonts. Only icons used on page will be loaded instead of
      entire fonts.
      <br/><br/>
      Icon designers can publish their own icon sets too. Iconify offers open source
      tools to clean up and publish custom icon sets.`;

    			attr(div, "class", "");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (73:8) <Paragraph>
    function create_default_slot_4$b(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.innerHTML = `Fonts and other SVG frameworks load entire collections. Even if you
            are using only 10-20 icons, your visitors are forced to load them
            all.
            <br/><br/>
            Iconify works differently. Very differently! Iconify loads only icons
            used on page. Icons are loaded as external resources that are cached
            by browser, not embedded into each page. No other SVG framework can do
            that.
            <br/><br/>
            What is advantage of this unique approach to handling icons? You are
            no longer limited to one collection. You can use them all on same page
            without having to load megabytes of data!
            <br/><br/>
            See <a href="/icon-sets">icon collections page</a> for list of available
            icons.`;

    			attr(div, "class", "text-base");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (172:12) <TypedJs               strings={svg_examples}               contentType={null}               backDelay={2000}               typeSpeed={10}               on:stringTyped={incrementSVGExampleCount}               style="all: inherit;"               loop={true}             >
    function create_default_slot_3$c(ctx) {
    	let span;

    	return {
    		c() {
    			span = element("span");
    			attr(span, "class", "typing");
    			set_style(span, "all", "inherit");
    		},
    		m(target, anchor) {
    			insert(target, span, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(span);
    		}
    	};
    }

    // (224:48) 
    function create_if_block_5$2(ctx) {
    	let div;
    	let icon;
    	let div_intro;
    	let div_outro;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "mdi:alert-octagon",
    				width: "64",
    				height: "64",
    				color: "#c41953"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fade, {});
    				div_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};
    }

    // (213:48) 
    function create_if_block_4$3(ctx) {
    	let div;
    	let p;
    	let t0;
    	let icon;
    	let t1;
    	let div_intro;
    	let div_outro;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "emojione-v1:cat-face",
    				inline: true,
    				width: "24",
    				height: "24"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			p = element("p");
    			t0 = text("Inline cat ");
    			create_component(icon.$$.fragment);
    			t1 = text(" emoji!");
    			set_style(p, "font-size", "24px");
    			attr(p, "class", "flex gap-2 items-center");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, p);
    			append(p, t0);
    			mount_component(icon, p, null);
    			append(p, t1);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fade, {});
    				div_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};
    }

    // (209:48) 
    function create_if_block_3$5(ctx) {
    	let div;
    	let icon;
    	let div_intro;
    	let div_outro;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "noto:waving-hand",
    				width: "64",
    				height: "64"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fade, {});
    				div_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};
    }

    // (201:48) 
    function create_if_block_2$6(ctx) {
    	let div;
    	let icon;
    	let div_intro;
    	let div_outro;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "flat-color-icons:alarm-clock",
    				width: "64",
    				height: "64"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fade, {});
    				div_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};
    }

    // (192:12) {#if current_svg_example === 1}
    function create_if_block_1$7(ctx) {
    	let div;
    	let icon;
    	let div_intro;
    	let div_outro;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "mdi:food-apple",
    				width: "64",
    				height: "64",
    				color: "#3C8A3F"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fade, {});
    				div_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			if (detaching && div_outro) div_outro.end();
    		}
    	};
    }

    // (241:8) <Paragraph>
    function create_default_slot_2$c(ctx) {
    	let div;
    	let t0;
    	let br0;
    	let br1;
    	let t1;
    	let br2;
    	let br3;
    	let t2;
    	let br4;
    	let br5;
    	let t3;
    	let t4_value = "</body>" + "";
    	let t4;
    	let t5;
    	let br6;
    	let br7;
    	let t6;
    	let a;
    	let t8;

    	return {
    		c() {
    			div = element("div");
    			t0 = text("Syntax is similar to glyph fonts. Write a placeholder element,\n            Iconify will replace it with SVG.\n            ");
    			br0 = element("br");
    			br1 = element("br");
    			t1 = text("\n            Use span or i or any other HTML tag with class=\"iconify\". If you want\n            an icon to behave like text, aligned slightly below baseline, use class=\"iconify-inline\".\n            ");
    			br2 = element("br");
    			br3 = element("br");
    			t2 = text("\n            Icons are easy to style with CSS: size is set by font-size, color for\n            monotone icons is set by text color. Just like glyph fonts.\n            ");
    			br4 = element("br");
    			br5 = element("br");
    			t3 = text("\n            Do not forget to add Iconify script tag in head section of your document\n            or before ");
    			t4 = text(t4_value);
    			t5 = text("!\n            ");
    			br6 = element("br");
    			br7 = element("br");
    			t6 = text("\n            See ");
    			a = element("a");
    			a.textContent = "how to use Iconify";
    			t8 = text(" tutorial.");
    			attr(a, "href", "https://docs.iconify.design");
    			attr(div, "class", "text-base");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t0);
    			append(div, br0);
    			append(div, br1);
    			append(div, t1);
    			append(div, br2);
    			append(div, br3);
    			append(div, t2);
    			append(div, br4);
    			append(div, br5);
    			append(div, t3);
    			append(div, t4);
    			append(div, t5);
    			append(div, br6);
    			append(div, br7);
    			append(div, t6);
    			append(div, a);
    			append(div, t8);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (265:8) <Paragraph>
    function create_default_slot_1$e(ctx) {
    	let t0;
    	let br0;
    	let br1;
    	let t1;

    	return {
    		c() {
    			t0 = text("One script to access thousands of icons from popular collections:\n          FontAwesome, Material Design, Vaadin Icons, Emoji One, Twemoji, Icons8\n          sets and many more.\n          ");
    			br0 = element("br");
    			br1 = element("br");
    			t1 = text("\n          You can use Iconify with custom and commercial icon sets too.");
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, br0, anchor);
    			insert(target, br1, anchor);
    			insert(target, t1, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(br0);
    			if (detaching) detach(br1);
    			if (detaching) detach(t1);
    		}
    	};
    }

    // (287:12) {#if index == current_icon_set}
    function create_if_block$8(ctx) {
    	let div;
    	let icon;
    	let div_intro;
    	let div_outro;
    	let t0;
    	let h4;
    	let t1_value = /*icon_set*/ ctx[8][0] + "";
    	let t1;
    	let h4_intro;
    	let h4_outro;
    	let t2;
    	let h5;
    	let t3_value = /*icon_set*/ ctx[8][2] + "";
    	let t3;
    	let t4;
    	let h5_intro;
    	let h5_outro;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: /*icon_set*/ ctx[8][1],
    				class: "w-32 h-32 380:w-48 380:h-48 xl:w-64 xl:h-64"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			h4 = element("h4");
    			t1 = text(t1_value);
    			t2 = space();
    			h5 = element("h5");
    			t3 = text(t3_value);
    			t4 = text(" icons\n              ");
    			attr(div, "class", "absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2");
    			attr(h4, "class", "font-medium text-3xl tracking-wider mt-16 absolute top-20 380:top-28 xl:top-56 whitespace-nowrap");
    			attr(h5, "class", "font-medium text-xl tracking-wider mt-16 absolute top-28 380:top-36 pt-2 xl:top-64 whitespace-nowrap");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			insert(target, t0, anchor);
    			insert(target, h4, anchor);
    			append(h4, t1);
    			insert(target, t2, anchor);
    			insert(target, h5, anchor);
    			append(h5, t3);
    			append(h5, t4);
    			current = true;
    		},
    		p: noop,
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fade, {});
    				div_intro.start();
    			});

    			add_render_callback(() => {
    				if (h4_outro) h4_outro.end(1);
    				h4_intro = create_in_transition(h4, fade, {});
    				h4_intro.start();
    			});

    			add_render_callback(() => {
    				if (h5_outro) h5_outro.end(1);
    				h5_intro = create_in_transition(h5, fade, {});
    				h5_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fade, {});
    			if (h4_intro) h4_intro.invalidate();
    			h4_outro = create_out_transition(h4, fade, {});
    			if (h5_intro) h5_intro.invalidate();
    			h5_outro = create_out_transition(h5, fade, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			if (detaching && div_outro) div_outro.end();
    			if (detaching) detach(t0);
    			if (detaching) detach(h4);
    			if (detaching && h4_outro) h4_outro.end();
    			if (detaching) detach(t2);
    			if (detaching) detach(h5);
    			if (detaching && h5_outro) h5_outro.end();
    		}
    	};
    }

    // (286:10) {#each icon_sets as icon_set, index}
    function create_each_block$7(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*index*/ ctx[10] == /*current_icon_set*/ ctx[0] && create_if_block$8(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (/*index*/ ctx[10] == /*current_icon_set*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*current_icon_set*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (337:8) <Paragraph>
    function create_default_slot$k(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.innerHTML = `Icons are loaded from Iconify API in bulk, reducing number of
            queries. Script is small and fast. Placeholders are replaced with
            SVG images in fraction of second.
            <br/><br/>
            Iconify API is hosted on network of servers spread across the globe.
            Visitors are always connected to closest server, reducing loading time
            to fraction of second.
            <br/><br/>
            If you want to, you can <a>create your own Iconify API server</a>!`;

    			attr(div, "class", "text-base");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    function create_fragment$z(ctx) {
    	let div34;
    	let p0;
    	let t1;
    	let h2;
    	let t3;
    	let paragraph0;
    	let t4;
    	let div33;
    	let div14;
    	let div0;
    	let h30;
    	let t6;
    	let paragraph1;
    	let t7;
    	let div13;
    	let t30;
    	let div24;
    	let div22;
    	let div15;
    	let code;
    	let t31;
    	let span0;
    	let t33;
    	let span1;
    	let t35;
    	let span2;
    	let t37;
    	let br0;
    	let br1;
    	let t38;
    	let typedjs;
    	let t39;
    	let div21;
    	let div19;
    	let t42;
    	let div20;
    	let current_block_type_index;
    	let if_block;
    	let t43;
    	let div23;
    	let h31;
    	let t45;
    	let paragraph2;
    	let t46;
    	let div29;
    	let div25;
    	let h32;
    	let t48;
    	let paragraph3;
    	let t49;
    	let div28;
    	let button0;
    	let icon0;
    	let t50;
    	let div27;
    	let div26;
    	let t51;
    	let t52;
    	let button1;
    	let icon1;
    	let t53;
    	let div32;
    	let div30;
    	let t54;
    	let div31;
    	let h33;
    	let t56;
    	let paragraph4;
    	let current;
    	let mounted;
    	let dispose;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_5$8] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$b] },
    				$$scope: { ctx }
    			}
    		});

    	typedjs = new TypedJs({
    			props: {
    				strings: /*svg_examples*/ ctx[3],
    				contentType: null,
    				backDelay: 2000,
    				typeSpeed: 10,
    				style: "all: inherit;",
    				loop: true,
    				$$slots: { default: [create_default_slot_3$c] },
    				$$scope: { ctx }
    			}
    		});

    	typedjs.$on("stringTyped", /*incrementSVGExampleCount*/ ctx[6]);

    	const if_block_creators = [
    		create_if_block_1$7,
    		create_if_block_2$6,
    		create_if_block_3$5,
    		create_if_block_4$3,
    		create_if_block_5$2
    	];

    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*current_svg_example*/ ctx[1] === 1) return 0;
    		if (/*current_svg_example*/ ctx[1] === 2) return 1;
    		if (/*current_svg_example*/ ctx[1] === 3) return 2;
    		if (/*current_svg_example*/ ctx[1] === 4) return 3;
    		if (/*current_svg_example*/ ctx[1] === 5) return 4;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$c] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph3 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_1$e] },
    				$$scope: { ctx }
    			}
    		});

    	icon0 = new Icon({
    			props: {
    				icon: "eva:chevron-left-outline",
    				width: "48",
    				height: "48",
    				class: " mt-16"
    			}
    		});

    	let each_value = /*icon_sets*/ ctx[2];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	icon1 = new Icon({
    			props: {
    				icon: "eva:chevron-right-outline",
    				width: "48",
    				height: "48",
    				class: " mt-16"
    			}
    		});

    	paragraph4 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot$k] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			div34 = element("div");
    			p0 = element("p");
    			p0.textContent = "Feautres";
    			t1 = space();
    			h2 = element("h2");
    			h2.textContent = "Many icons, one framework";
    			t3 = space();
    			create_component(paragraph0.$$.fragment);
    			t4 = space();
    			div33 = element("div");
    			div14 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			h30.textContent = "Load on demand";
    			t6 = space();
    			create_component(paragraph1.$$.fragment);
    			t7 = space();
    			div13 = element("div");

    			div13.innerHTML = `<div class="flex gap-6 flex-col relative"><div class="arrow svelte-1hy5s2q"></div> 
          <div class="border-2 border-stone-600 w-full flex flex-col"><h4 class="text-2xl md:text-3xl tracking-wide text-center font-medium m-6">API</h4> 
            <img src="./assets/iconsdemo.svg" alt="icons example w-full"/> 
            <p class="text-lg tracking-wide text-center m-6">100,000+ icons</p></div> 
          <div class="border-2 border-stone-600 w-full"><div class="flex flex-wrap justify-center gap-2 m-6"><div class="px-3 py-2 border-2 border-stone-600 font-medium text-lg tracking-wide">mdi:opacity</div> 
              <div class="px-3 py-2 border-2 border-stone-600 font-medium text-lg tracking-wide">ion:ios-cart</div> 
              <div class="px-3 py-2 border-2 border-stone-600 font-medium text-lg tracking-wide">mdi:flask</div> 
              <div class="px-3 py-2 border-2 border-stone-600 font-medium text-lg tracking-wide">noto:anchor</div> 
              <div class="px-3 py-2 border-2 border-stone-600 font-medium text-lg tracking-wide">fxemoji:alien</div></div> 
            <p class="text-lg tracking-wide text-center m-6">Only icons used on page are downloaded</p></div> 
          <div class="border-2 border-stone-600 w-full"><h4 class="text-2xl md:text-3xl tracking-wide text-center font-medium m-6">Browser</h4> 
            <div class="w-full flex justify-center"><img src="./assets/iconsdemoresult.svg" alt="icons example" class="w-96"/></div> 
            <p class="text-lg tracking-wide text-center m-6">5 icons = ~2.5 Kb of data (~0.5 Kb per icon)</p></div></div>`;

    			t30 = space();
    			div24 = element("div");
    			div22 = element("div");
    			div15 = element("div");
    			code = element("code");
    			t31 = text("<");
    			span0 = element("span");
    			span0.textContent = "script";
    			t33 = text("\n            src=\"");
    			span1 = element("span");
    			span1.textContent = "https://code.iconify.design/2/2.1.0/iconify.min.js";
    			t35 = text("\"></");
    			span2 = element("span");
    			span2.textContent = "script";
    			t37 = text(">\n            ");
    			br0 = element("br");
    			br1 = element("br");
    			t38 = space();
    			create_component(typedjs.$$.fragment);
    			t39 = space();
    			div21 = element("div");
    			div19 = element("div");

    			div19.innerHTML = `<div class="w-3 h-3 rounded-full bg-rose-600"></div> 
            <div class="w-3 h-3 rounded-full bg-orange-400"></div> 
            <div class="w-3 h-3 rounded-full bg-green-600"></div>`;

    			t42 = space();
    			div20 = element("div");
    			if (if_block) if_block.c();
    			t43 = space();
    			div23 = element("div");
    			h31 = element("h3");
    			h31.textContent = "Easy to use";
    			t45 = space();
    			create_component(paragraph2.$$.fragment);
    			t46 = space();
    			div29 = element("div");
    			div25 = element("div");
    			h32 = element("h3");
    			h32.textContent = "Over 100,000 icons to choose from";
    			t48 = space();
    			create_component(paragraph3.$$.fragment);
    			t49 = space();
    			div28 = element("div");
    			button0 = element("button");
    			create_component(icon0.$$.fragment);
    			t50 = space();
    			div27 = element("div");
    			div26 = element("div");
    			t51 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t52 = space();
    			button1 = element("button");
    			create_component(icon1.$$.fragment);
    			t53 = space();
    			div32 = element("div");
    			div30 = element("div");
    			div30.innerHTML = `<img src="./assets/servermap.svg" alt="server distribution" class="w-full"/>`;
    			t54 = space();
    			div31 = element("div");
    			h33 = element("h3");
    			h33.textContent = "Lightning fast";
    			t56 = space();
    			create_component(paragraph4.$$.fragment);
    			attr(p0, "class", "font-medium text-xl mb-2 text-center tracking-wide");
    			attr(h2, "class", "text-5xl font-semibold tracking-wide text-center mb-6 lg:mb-12");
    			attr(h30, "class", "font-semibold tracking-wide text-3xl mb-6 sm:mb-8");
    			attr(div0, "class", "w-full sm:w-1/2");
    			attr(div13, "class", "w-full sm:w-1/2");
    			attr(div14, "class", "flex flex-col sm:flex-row gap-12 items-center");
    			set_style(span0, "all", "inherit");
    			set_style(span0, "color", "rgb(49, 141, 225)");
    			set_style(span1, "all", "inherit");
    			set_style(span1, "color", "rgb(225, 62, 49)");
    			set_style(span1, "text-decoration", "underline");
    			set_style(span1, "text-decoration-thickness", "1px");
    			attr(span2, "class", "");
    			set_style(span2, "all", "inherit");
    			set_style(span2, "color", "rgb(49, 141, 225)");
    			attr(code, "class", "break-words");
    			attr(div15, "class", "border-2 border-stone-600 py-4 px-5 mt-4 mb-4");
    			attr(div19, "class", "flex items-center gap-2 p-3 border-b border-stone-600");
    			attr(div20, "class", "w-full h-full items-center justify-center flex");
    			attr(div21, "class", "w-full h-64 flex flex-col border border-stone-600");
    			attr(div22, "class", "w-full sm:w-1/2");
    			attr(h31, "to", "");
    			attr(h31, "use", "");
    			attr(h31, "class", "font-semibold tracking-wide text-3xl mb-6 sm:mb-8");
    			attr(div23, "class", "w-full sm:w-1/2");
    			attr(div24, "class", "flex flex-col-reverse sm:flex-row gap-12 items-center");
    			attr(h32, "to", "");
    			attr(h32, "use", "");
    			attr(h32, "class", "font-semibold tracking-wide text-3xl mb-6 sm:mb-8");
    			attr(div25, "class", "w-full sm:w-1/2");
    			attr(div26, "class", "w-20 h-32 xl:w-64 xl:h-64");
    			attr(div27, "class", "flex relative h-full flex-col items-center");
    			attr(div28, "class", "w-full sm:w-1/2 h-full flex items-center justify-center gap-24 mb-20");
    			attr(div29, "class", "flex flex-col sm:flex-row gap-12 items-center");
    			attr(div30, "class", "w-full sm:w-1/2 -mb-12");
    			attr(h33, "to", "");
    			attr(h33, "use", "");
    			attr(h33, "class", "font-semibold tracking-wide text-3xl mb-6 sm:mb-8");
    			attr(div31, "class", "w-full 530:sm:w-1/2");
    			attr(div32, "class", "flex flex-col-reverse sm:flex-row gap-12 items-center");
    			attr(div33, "class", "pt-20 w-full flex flex-col gap-24");
    			attr(div34, "class", "w-full px-0 md:px-16");
    		},
    		m(target, anchor) {
    			insert(target, div34, anchor);
    			append(div34, p0);
    			append(div34, t1);
    			append(div34, h2);
    			append(div34, t3);
    			mount_component(paragraph0, div34, null);
    			append(div34, t4);
    			append(div34, div33);
    			append(div33, div14);
    			append(div14, div0);
    			append(div0, h30);
    			append(div0, t6);
    			mount_component(paragraph1, div0, null);
    			append(div14, t7);
    			append(div14, div13);
    			append(div33, t30);
    			append(div33, div24);
    			append(div24, div22);
    			append(div22, div15);
    			append(div15, code);
    			append(code, t31);
    			append(code, span0);
    			append(code, t33);
    			append(code, span1);
    			append(code, t35);
    			append(code, span2);
    			append(code, t37);
    			append(code, br0);
    			append(code, br1);
    			append(code, t38);
    			mount_component(typedjs, code, null);
    			append(div22, t39);
    			append(div22, div21);
    			append(div21, div19);
    			append(div21, t42);
    			append(div21, div20);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div20, null);
    			}

    			append(div24, t43);
    			append(div24, div23);
    			append(div23, h31);
    			append(div23, t45);
    			mount_component(paragraph2, div23, null);
    			append(div33, t46);
    			append(div33, div29);
    			append(div29, div25);
    			append(div25, h32);
    			append(div25, t48);
    			mount_component(paragraph3, div25, null);
    			append(div29, t49);
    			append(div29, div28);
    			append(div28, button0);
    			mount_component(icon0, button0, null);
    			append(div28, t50);
    			append(div28, div27);
    			append(div27, div26);
    			append(div27, t51);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div27, null);
    			}

    			append(div28, t52);
    			append(div28, button1);
    			mount_component(icon1, button1, null);
    			append(div33, t53);
    			append(div33, div32);
    			append(div32, div30);
    			append(div32, t54);
    			append(div32, div31);
    			append(div31, h33);
    			append(div31, t56);
    			mount_component(paragraph4, div31, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(button0, "click", /*prevIcon*/ ctx[4]),
    					listen(button1, "click", /*nextIcon*/ ctx[5])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const typedjs_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				typedjs_changes.$$scope = { dirty, ctx };
    			}

    			typedjs.$set(typedjs_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(div20, null);
    				} else {
    					if_block = null;
    				}
    			}

    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const paragraph3_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				paragraph3_changes.$$scope = { dirty, ctx };
    			}

    			paragraph3.$set(paragraph3_changes);

    			if (dirty & /*icon_sets, current_icon_set*/ 5) {
    				each_value = /*icon_sets*/ ctx[2];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div27, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			const paragraph4_changes = {};

    			if (dirty & /*$$scope*/ 2048) {
    				paragraph4_changes.$$scope = { dirty, ctx };
    			}

    			paragraph4.$set(paragraph4_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(typedjs.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(paragraph3.$$.fragment, local);
    			transition_in(icon0.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(icon1.$$.fragment, local);
    			transition_in(paragraph4.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(typedjs.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(paragraph3.$$.fragment, local);
    			transition_out(icon0.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(icon1.$$.fragment, local);
    			transition_out(paragraph4.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div34);
    			destroy_component(paragraph0);
    			destroy_component(paragraph1);
    			destroy_component(typedjs);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(paragraph2);
    			destroy_component(paragraph3);
    			destroy_component(icon0);
    			destroy_each(each_blocks, detaching);
    			destroy_component(icon1);
    			destroy_component(paragraph4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance$s($$self, $$props, $$invalidate) {
    	const icon_sets = [
    		["Emoji One", "emojione-v1:speaker-high-volume", "4500+"],
    		["Noto Emoji", "noto:anchor", "3000+"]
    	];

    	const svg_examples = [
    		`<i class="iconify" data-icon="mdi:food-apple" style="font-size: 64px; color: #3C8A3F;"></i>`,
    		`<span class="iconify" data-icon="flat-color-icons:alarm-clock"></span>`,
    		`<i class="iconify" data-icon="noto:waving-hand"></i>`,
    		`<p style="font-size: 24px;">Inline cat <span data-icon="emojione-v1:cat-face" class="iconify" data-inline="true"></span> emoji!</p>`,
    		`<span class="iconify" data-icon="mdi:alert-octagon" data-icon-inline="false" style="font-size: 48px; color: #c41953;"></span>`
    	];

    	let current_icon_set = 0;
    	let current_svg_example = 0;
    	let last_current_svg_example = 0;

    	const prevIcon = () => {
    		current_icon_set > 0 && $$invalidate(0, current_icon_set--, current_icon_set);
    	};

    	const nextIcon = () => {
    		current_icon_set < icon_sets.length - 1 && $$invalidate(0, current_icon_set++, current_icon_set);
    	};

    	const incrementSVGExampleCount = () => {
    		$$invalidate(1, current_svg_example = last_current_svg_example + 0);

    		current_svg_example < svg_examples.length
    		? $$invalidate(1, current_svg_example++, current_svg_example)
    		: $$invalidate(1, current_svg_example = 1);

    		last_current_svg_example = current_svg_example + 0;

    		setTimeout(
    			() => {
    				$$invalidate(1, current_svg_example = null);
    			},
    			2000
    		);
    	};

    	return [
    		current_icon_set,
    		current_svg_example,
    		icon_sets,
    		svg_examples,
    		prevIcon,
    		nextIcon,
    		incrementSVGExampleCount
    	];
    }

    class Features extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$s, create_fragment$z, safe_not_equal, {});
    	}
    }

    var ic = {
    	name: "Google Material Icons",
    	total: 10945,
    	version: "1.0.28",
    	author: {
    		name: "Material Design Authors",
    		url: "https://github.com/material-icons/material-icons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/material-icons/material-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"baseline-notifications-active",
    		"outline-person-outline",
    		"twotone-videocam-off"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var mdi = {
    	name: "Material Design Icons",
    	total: 6990,
    	author: {
    		name: "Austin Andrews",
    		url: "https://github.com/Templarian/MaterialDesign"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/Templarian/MaterialDesign/blob/master/LICENSE"
    	},
    	samples: [
    		"account-check",
    		"bell-alert-outline",
    		"calendar-edit"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var ph = {
    	name: "Phosphor",
    	total: 6282,
    	version: "1.4.2",
    	author: {
    		name: "Phosphor Icons",
    		url: "https://github.com/phosphor-icons/phosphor-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/phosphor-icons/phosphor-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"folder-notch-open-duotone",
    		"check-square-offset-thin",
    		"pencil-line-fill"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var ri = {
    	name: "Remix Icon",
    	total: 2271,
    	version: "2.5.0",
    	author: {
    		name: "Remix Design",
    		url: "https://github.com/Remix-Design/RemixIcon"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/Remix-Design/RemixIcon/blob/master/License"
    	},
    	samples: [
    		"lock-2-line",
    		"mark-pen-fill",
    		"moon-line"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var carbon = {
    	name: "Carbon",
    	total: 1798,
    	version: "11.4.0",
    	author: {
    		name: "IBM",
    		url: "https://github.com/carbon-design-system/carbon/tree/main/packages/icons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0"
    	},
    	samples: [
    		"user-certification",
    		"humidity",
    		"edit-off"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: false
    };
    var bi = {
    	name: "Bootstrap Icons",
    	total: 1668,
    	version: "1.8.3",
    	author: {
    		name: "The Bootstrap Authors",
    		url: "https://github.com/twbs/icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/twbs/icons/blob/main/LICENSE.md"
    	},
    	samples: [
    		"graph-up",
    		"card-image",
    		"code-slash"
    	],
    	height: 16,
    	category: "General",
    	palette: false
    };
    var tabler = {
    	name: "Tabler Icons",
    	total: 1978,
    	version: "1.68.0",
    	author: {
    		name: "Paweł Kuna",
    		url: "https://github.com/tabler/tabler-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/tabler/tabler-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"alien",
    		"device-desktop",
    		"photo"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var ion = {
    	name: "IonIcons",
    	total: 1332,
    	version: "6.0.0",
    	author: {
    		name: "Ben Sperry",
    		url: "https://github.com/ionic-team/ionicons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/ionic-team/ionicons/blob/main/LICENSE"
    	},
    	samples: [
    		"code-download-sharp",
    		"contrast-outline",
    		"checkmark-done"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: false
    };
    var uil = {
    	name: "Unicons",
    	total: 1206,
    	version: "4.0.1",
    	author: {
    		name: "Iconscout",
    		url: "https://github.com/Iconscout/unicons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/Iconscout/unicons/blob/master/LICENSE"
    	},
    	samples: [
    		"arrow-circle-right",
    		"chat-bubble-user",
    		"edit-alt"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var teenyicons = {
    	name: "Teenyicons",
    	total: 1200,
    	version: "0.4.1",
    	author: {
    		name: "smhmd",
    		url: "https://github.com/teenyicons/teenyicons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/teenyicons/teenyicons/blob/master/LICENSE"
    	},
    	samples: [
    		"face-id-solid",
    		"user-outline",
    		"page-break-outline"
    	],
    	height: 15,
    	category: "General",
    	palette: false
    };
    var clarity = {
    	name: "Clarity",
    	total: 1103,
    	author: {
    		name: "VMware",
    		url: "https://github.com/vmware/clarity"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/vmware/clarity-assets/blob/master/LICENSE"
    	},
    	samples: [
    		"help-outline-badged",
    		"heart-broken-solid",
    		"shield-outline-alerted"
    	],
    	height: 36,
    	displayHeight: 18,
    	category: "General",
    	palette: false
    };
    var iconoir = {
    	name: "Iconoir",
    	total: 1091,
    	version: "4.9.2",
    	author: {
    		name: "Luca Burgio",
    		url: "https://github.com/lucaburgio/iconoir"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/lucaburgio/iconoir/blob/master/LICENSE"
    	},
    	samples: [
    		"chat-bubble-check-1",
    		"edit",
    		"terminal-simple"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var majesticons = {
    	name: "Majesticons",
    	total: 760,
    	version: "2.1.1",
    	author: {
    		name: "Gerrit Halfmann",
    		url: "https://github.com/halfmage/majesticons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/halfmage/majesticons/blob/main/LICENSE"
    	},
    	samples: [
    		"chats-line",
    		"home",
    		"edit-pen-4-line"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var zondicons = {
    	name: "Zondicons",
    	total: 297,
    	version: "0.1.0",
    	author: {
    		name: "Steve Schoger",
    		url: "https://github.com/dukestreetstudio/zondicons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/dukestreetstudio/zondicons/blob/master/LICENSE"
    	},
    	samples: [
    		"copy",
    		"hand-stop",
    		"mouse"
    	],
    	height: 20,
    	category: "General",
    	palette: false
    };
    var bx = {
    	name: "BoxIcons",
    	total: 797,
    	version: "2.1.2",
    	author: {
    		name: "Atisa",
    		url: "https://github.com/atisawd/boxicons"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"heart-circle",
    		"last-page",
    		"bar-chart-square"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var bxs = {
    	name: "BoxIcons Solid",
    	total: 650,
    	version: "2.1.2",
    	author: {
    		name: "Atisa",
    		url: "https://github.com/atisawd/boxicons"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"edit-alt",
    		"tree-alt",
    		"circle-half"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var gg = {
    	name: "css.gg",
    	total: 704,
    	version: "2.0.0",
    	author: {
    		name: "Astrit",
    		url: "https://github.com/astrit/css.gg"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/astrit/css.gg/blob/master/LICENSE"
    	},
    	samples: [
    		"align-left",
    		"server",
    		"overflow"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var cil = {
    	name: "CoreUI Free",
    	total: 554,
    	version: "2.0.1",
    	author: {
    		name: "creativeLabs Łukasz Holeczek",
    		url: "https://github.com/coreui/coreui-icons"
    	},
    	license: {
    		title: "CC0 1.0",
    		spdx: "CC0-1.0",
    		url: "https://creativecommons.org/publicdomain/zero/1.0/"
    	},
    	samples: [
    		"airplane-mode-off",
    		"badge",
    		"color-border"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: false
    };
    var lucide = {
    	name: "Lucide",
    	total: 624,
    	author: {
    		name: "Lucide Contributors",
    		url: "https://github.com/lucide-icons/lucide"
    	},
    	license: {
    		title: "ISC",
    		spdx: "ISC",
    		url: "https://github.com/lucide-icons/lucide/blob/master/LICENSE"
    	},
    	samples: [
    		"check-circle",
    		"award",
    		"home"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var pixelarticons = {
    	name: "Pixelarticons",
    	total: 460,
    	version: "1.5.0",
    	author: {
    		name: "Gerrit Halfmann",
    		url: "https://github.com/halfmage/pixelarticons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/halfmage/pixelarticons/blob/master/LICENSE"
    	},
    	samples: [
    		"drag-and-drop",
    		"arrows-horizontal",
    		"heart"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var ci = {
    	name: "coolicons",
    	total: 412,
    	version: "2.5",
    	author: {
    		name: "Kryston Schwarze",
    		url: "https://github.com/krystonschwarze/coolicons"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"building",
    		"search-small-plus",
    		"group"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var typcn = {
    	name: "Typicons",
    	total: 336,
    	version: "2.1.2",
    	author: {
    		name: "Stephen Hutchings",
    		url: "https://github.com/stephenhutchings/typicons.font"
    	},
    	license: {
    		title: "CC BY SA 4.0",
    		spdx: "CC-BY-SA-4.0",
    		url: "https://creativecommons.org/licenses/by-sa/4.0/"
    	},
    	samples: [
    		"pin-outline",
    		"cloud-storage",
    		"bell"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var ep = {
    	name: "Element Plus",
    	total: 283,
    	version: "2.0.0-beta.1",
    	author: {
    		name: "Element Plus",
    		url: "https://github.com/element-plus/element-plus-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/element-plus/element-plus-icons/blob/main/packages/svg/package.json"
    	},
    	samples: [
    		"home-filled",
    		"partly-cloudy",
    		"avatar"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: false
    };
    var fe = {
    	name: "Feather Icon",
    	total: 255,
    	version: "1.0.2",
    	author: {
    		name: "Megumi Hano",
    		url: "https://github.com/feathericon/feathericon"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/feathericon/feathericon/blob/master/LICENSE"
    	},
    	samples: [
    		"add-cart",
    		"comments",
    		"link-external"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var charm = {
    	name: "Charm Icons",
    	total: 250,
    	version: "0.12.1",
    	author: {
    		name: "Jay Newey",
    		url: "https://github.com/jaynewey/charm-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/jaynewey/charm-icons/blob/main/LICENSE"
    	},
    	samples: [
    		"chart-line",
    		"image",
    		"thumb-up"
    	],
    	height: 16,
    	category: "General",
    	palette: false
    };
    var prime = {
    	name: "Prime Icons",
    	total: 238,
    	author: {
    		name: "PrimeTek",
    		url: "https://github.com/primefaces/primeicons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/primefaces/primeicons/blob/master/LICENSE"
    	},
    	samples: [
    		"book",
    		"telegram",
    		"volume-off"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var uiw = {
    	name: "uiw icons",
    	total: 214,
    	version: "2.6.7",
    	author: {
    		name: "liwen0526",
    		url: "https://github.com/uiwjs/icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/uiwjs/icons/blob/master/LICENSE"
    	},
    	samples: [
    		"cut",
    		"like-o",
    		"download"
    	],
    	height: 20,
    	category: "General",
    	palette: false
    };
    var uim = {
    	name: "Unicons Monochrome",
    	total: 296,
    	version: "4.0.1",
    	author: {
    		name: "Iconscout",
    		url: "https://github.com/Iconscout/unicons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/Iconscout/unicons/blob/master/LICENSE"
    	},
    	samples: [
    		"airplay",
    		"circle-layer",
    		"lock-access"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var uit = {
    	name: "Unicons Thin Line",
    	total: 214,
    	version: "4.0.1",
    	author: {
    		name: "Iconscout",
    		url: "https://github.com/Iconscout/unicons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/Iconscout/unicons/blob/master/LICENSE"
    	},
    	samples: [
    		"circuit",
    		"favorite",
    		"toggle-on"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var uis = {
    	name: "Unicons Solid",
    	total: 189,
    	version: "4.0.1",
    	author: {
    		name: "Iconscout",
    		url: "https://github.com/Iconscout/unicons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/Iconscout/unicons/blob/master/LICENSE"
    	},
    	samples: [
    		"analysis",
    		"check",
    		"user-md"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var maki = {
    	name: "Maki",
    	total: 207,
    	version: "7.1.0",
    	author: {
    		name: "Mapbox",
    		url: "https://github.com/mapbox/maki"
    	},
    	license: {
    		title: "CC0",
    		spdx: "CC0-1.0",
    		url: "https://creativecommons.org/publicdomain/zero/1.0/"
    	},
    	samples: [
    		"entrance-alt1",
    		"clothing-store",
    		"grocery"
    	],
    	height: 15,
    	category: "General",
    	palette: false
    };
    var gridicons = {
    	name: "Gridicons",
    	total: 201,
    	version: "3.4.0",
    	author: {
    		name: "Automattic",
    		url: "https://github.com/Automattic/gridicons"
    	},
    	license: {
    		title: "GPL 2.0",
    		spdx: "GPL-2.0-only",
    		url: "https://github.com/Automattic/gridicons/blob/trunk/LICENSE.md"
    	},
    	samples: [
    		"code",
    		"multiple-users",
    		"types"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var mi = {
    	name: "Mono Icons",
    	total: 180,
    	version: "1.3.1",
    	author: {
    		name: "Mono",
    		url: "https://github.com/mono-company/mono-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/mono-company/mono-icons/blob/master/LICENSE.md"
    	},
    	samples: [
    		"bar-chart",
    		"cloud-upload",
    		"log-out"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var quill = {
    	name: "Quill Icons",
    	total: 140,
    	author: {
    		name: "Casper Lourens",
    		url: "https://www.figma.com/community/file/1034432054377533052/Quill-Iconset"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/yourtempo/tempo-quill-icons/blob/main/LICENSE"
    	},
    	samples: [
    		"collapse",
    		"desktop",
    		"moon"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: false
    };
    var gala = {
    	name: "Gala Icons",
    	total: 51,
    	author: {
    		name: "Jake Wells",
    		url: "https://github.com/sisyphusion/gala-icons"
    	},
    	license: {
    		title: "GPL",
    		spdx: "GPL-3.0",
    		url: "https://github.com/sisyphusion/gala-icons/blob/main/LICENSE"
    	},
    	samples: [
    		"brochure",
    		"remove",
    		"chart"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: false
    };
    var fluent = {
    	name: "Fluent UI System Icons",
    	total: 11422,
    	version: "1.1.170",
    	author: {
    		name: "Microsoft Corporation",
    		url: "https://github.com/microsoft/fluentui-system-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/microsoft/fluentui-system-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"zoom-out-24-filled",
    		"drink-coffee-24-regular",
    		"photo-filter-24-regular"
    	],
    	displayHeight: 24,
    	category: "General",
    	palette: false
    };
    var jam = {
    	name: "Jam Icons",
    	total: 940,
    	author: {
    		name: "Michael Amprimo",
    		url: "https://github.com/michaelampr/jam"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/michaelampr/jam/blob/master/LICENSE"
    	},
    	samples: [
    		"chevrons-square-up-right",
    		"luggage-f",
    		"rubber"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    };
    var codicon = {
    	name: "Codicons",
    	total: 412,
    	version: "0.0.30",
    	author: {
    		name: "Microsoft Corporation",
    		url: "https://github.com/microsoft/vscode-codicons"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://github.com/microsoft/vscode-codicons/blob/main/LICENSE"
    	},
    	samples: [
    		"account",
    		"bell-dot",
    		"new-file"
    	],
    	displayHeight: 24,
    	category: "General",
    	palette: false
    };
    var pepicons = {
    	name: "Pepicons",
    	total: 410,
    	version: "1.1.0",
    	author: {
    		name: "CyCraft",
    		url: "https://github.com/CyCraft/pepicons"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://github.com/CyCraft/pepicons/blob/dev/LICENSE"
    	},
    	samples: [
    		"bookmark-print",
    		"moon",
    		"pen-print"
    	],
    	displayHeight: 20,
    	category: "General",
    	palette: false
    };
    var bytesize = {
    	name: "Bytesize Icons",
    	total: 101,
    	version: "1.4.0",
    	author: {
    		name: "Dan Klammer",
    		url: "https://github.com/danklammer/bytesize-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/danklammer/bytesize-icons/blob/master/LICENSE.md"
    	},
    	samples: [
    		"desktop",
    		"code",
    		"sign-out"
    	],
    	height: 32,
    	displayHeight: 24,
    	category: "General",
    	palette: false
    };
    var ei = {
    	name: "Evil Icons",
    	total: 70,
    	version: "1.10.1",
    	author: {
    		name: "Alexander Madyankin and Roman Shamin",
    		url: "https://github.com/evil-icons/evil-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/evil-icons/evil-icons/blob/master/LICENSE.txt"
    	},
    	samples: [
    		"paperclip",
    		"like",
    		"arrow-right"
    	],
    	height: 25,
    	category: "General",
    	palette: false
    };
    var octicon = {
    	name: "Octicons",
    	total: 499,
    	version: "17.2.0",
    	author: {
    		name: "GitHub",
    		url: "https://github.com/primer/octicons/"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/primer/octicons/blob/main/LICENSE"
    	},
    	samples: [
    		"alert-24",
    		"bell-slash-24",
    		"hourglass-24"
    	],
    	displayHeight: 24,
    	category: "General",
    	palette: false
    };
    var ooui = {
    	name: "OOUI",
    	total: 322,
    	version: "0.44.0",
    	author: {
    		name: "OOUI Team",
    		url: "https://github.com/wikimedia/oojs-ui"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/wikimedia/oojs-ui/blob/master/LICENSE-MIT"
    	},
    	samples: [
    		"search",
    		"share",
    		"restore"
    	],
    	height: 20,
    	category: "General",
    	palette: false
    };
    var nimbus = {
    	name: "Nimbus",
    	total: 134,
    	version: "0.2.5",
    	author: {
    		name: "Linkedstore S.A.",
    		url: "https://github.com/TiendaNube/nimbus-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/TiendaNube/nimbus-icons/blob/develop/LICENSE"
    	},
    	samples: [
    		"barcode",
    		"mail",
    		"calendar"
    	],
    	height: 16,
    	category: "General",
    	palette: false
    };
    var openmoji = {
    	name: "OpenMoji",
    	total: 4027,
    	author: {
    		name: "OpenMoji",
    		url: "https://github.com/hfg-gmuend/openmoji"
    	},
    	license: {
    		title: "CC BY-SA 4.0",
    		spdx: "CC-BY-SA-4.0",
    		url: "https://creativecommons.org/licenses/by-sa/4.0/"
    	},
    	samples: [
    		"bicycle",
    		"bow-and-arrow",
    		"full-moon-face"
    	],
    	height: 18,
    	category: "Emoji",
    	palette: true
    };
    var twemoji = {
    	name: "Twitter Emoji",
    	total: 3668,
    	author: {
    		name: "Twitter",
    		url: "https://github.com/twitter/twemoji"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"anguished-face",
    		"duck",
    		"crossed-swords"
    	],
    	height: 36,
    	displayHeight: 18,
    	category: "Emoji",
    	palette: true
    };
    var noto = {
    	name: "Noto Emoji",
    	total: 3418,
    	author: {
    		name: "Google Inc",
    		url: "https://github.com/googlefonts/noto-emoji"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/googlefonts/noto-emoji/blob/main/LICENSE"
    	},
    	samples: [
    		"beaming-face-with-smiling-eyes",
    		"computer-mouse",
    		"dove"
    	],
    	height: 16,
    	category: "Emoji",
    	palette: true
    };
    var emojione = {
    	name: "Emoji One (Colored)",
    	total: 1834,
    	version: "2.3.0",
    	author: {
    		name: "Emoji One",
    		url: "https://github.com/EmojiTwo/emojitwo"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"anxious-face-with-sweat",
    		"cloud-with-snow",
    		"studio-microphone"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Emoji",
    	palette: true
    };
    var fxemoji = {
    	name: "Firefox OS Emoji",
    	total: 1034,
    	version: "0.0.2",
    	author: {
    		name: "Mozilla",
    		url: "https://github.com/mozilla/fxemoji"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://mozilla.github.io/fxemoji/LICENSE.md"
    	},
    	samples: [
    		"foxweary",
    		"loveletter",
    		"openlock"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Emoji",
    	palette: true
    };
    var bxl = {
    	name: "BoxIcons Logo",
    	total: 153,
    	version: "2.1.2",
    	author: {
    		name: "Atisa",
    		url: "https://github.com/atisawd/boxicons"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"patreon",
    		"adobe",
    		"vuejs"
    	],
    	height: 24,
    	category: "Brands / Social",
    	palette: false
    };
    var logos = {
    	name: "SVG Logos",
    	total: 1438,
    	author: {
    		name: "Gil Barbara",
    		url: "https://github.com/gilbarbara/logos"
    	},
    	license: {
    		title: "CC0",
    		spdx: "CC0-1.0",
    		url: "https://raw.githubusercontent.com/gilbarbara/logos/master/LICENSE.txt"
    	},
    	samples: [
    		"angular-icon",
    		"firefox",
    		"google-drive"
    	],
    	category: "Brands / Social",
    	palette: true
    };
    var cib = {
    	name: "CoreUI Brands",
    	total: 830,
    	version: "2.0.1",
    	author: {
    		name: "creativeLabs Łukasz Holeczek",
    		url: "https://github.com/coreui/coreui-icons"
    	},
    	license: {
    		title: "CC0 1.0",
    		spdx: "CC0-1.0",
    		url: "https://creativecommons.org/publicdomain/zero/1.0/"
    	},
    	samples: [
    		"cc-amazon-pay",
    		"hotjar",
    		"open-id"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Brands / Social",
    	palette: false
    };
    var arcticons = {
    	name: "Arcticons",
    	total: 4274,
    	author: {
    		name: "Donno",
    		url: "https://github.com/Donno/Arcticons"
    	},
    	license: {
    		title: "CC BY-SA 4.0",
    		spdx: "CC-BY-SA-4.0",
    		url: "https://creativecommons.org/licenses/by-sa/4.0/"
    	},
    	samples: [
    		"paperlaunch",
    		"gravadordevoz",
    		"appstract"
    	],
    	height: 48,
    	displayHeight: 24,
    	category: "Brands / Social",
    	palette: false
    };
    var brandico = {
    	name: "Brandico",
    	total: 45,
    	author: {
    		name: "Fontello",
    		url: "https://github.com/fontello/brandico.font"
    	},
    	license: {
    		title: "CC BY SA",
    		spdx: "CC-BY-SA-3.0",
    		url: "https://creativecommons.org/licenses/by-sa/3.0/"
    	},
    	samples: [
    		"vimeo",
    		"twitter-bird",
    		"yandex"
    	],
    	category: "Brands / Social",
    	palette: false
    };
    var cryptocurrency = {
    	name: "Cryptocurrency Icons",
    	total: 471,
    	version: "0.18.0",
    	author: {
    		name: "Christopher Downer",
    		url: "https://github.com/atomiclabs/cryptocurrency-icons"
    	},
    	license: {
    		title: "CC0 1.0",
    		spdx: "CC0-1.0",
    		url: "https://creativecommons.org/publicdomain/zero/1.0/"
    	},
    	samples: [
    		"btc",
    		"ltc",
    		"eth"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Brands / Social",
    	palette: false
    };
    var flag = {
    	name: "Flag Icons",
    	total: 530,
    	version: "6.4.4",
    	author: {
    		name: "Panayiotis Lipiridis",
    		url: "https://github.com/lipis/flag-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/lipis/flag-icons/blob/main/LICENSE"
    	},
    	samples: [
    		"fr-4x3",
    		"kr-1x1",
    		"ee-1x1"
    	],
    	category: "Maps / Flags",
    	palette: true
    };
    var flagpack = {
    	name: "Flagpack",
    	total: 255,
    	version: "2.0.0",
    	author: {
    		name: "Yummygum",
    		url: "https://github.com/Yummygum/flagpack-core"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/Yummygum/flagpack-core/blob/main/LICENSE"
    	},
    	samples: [
    		"ci",
    		"gb-eng",
    		"wf"
    	],
    	height: 24,
    	category: "Maps / Flags",
    	palette: true
    };
    var cif = {
    	name: "CoreUI Flags",
    	total: 199,
    	version: "2.0.1",
    	author: {
    		name: "creativeLabs Łukasz Holeczek",
    		url: "https://github.com/coreui/coreui-icons"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"ee",
    		"ca",
    		"sk"
    	],
    	category: "Maps / Flags",
    	palette: true
    };
    var gis = {
    	name: "Font-GIS",
    	total: 344,
    	version: "1.0.5",
    	author: {
    		name: "Jean-Marc Viglino",
    		url: "https://github.com/viglino/font-gis"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://github.com/Viglino/font-gis/blob/main/LICENSE-CC-BY.md"
    	},
    	samples: [
    		"layer-o",
    		"poi-o",
    		"bbox"
    	],
    	height: 100,
    	category: "Maps / Flags",
    	palette: false
    };
    var map = {
    	name: "Map Icons",
    	total: 167,
    	version: "3.0.2",
    	author: {
    		name: "Scott de Jonge",
    		url: "https://github.com/scottdejonge/map-icons"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"restaurant",
    		"real-estate-agency",
    		"wheelchair"
    	],
    	height: 50,
    	category: "Maps / Flags",
    	palette: false
    };
    var geo = {
    	name: "GeoGlyphs",
    	total: 30,
    	version: "0.0.10",
    	author: {
    		name: "Sam Matthews",
    		url: "https://github.com/cugos/geoglyphs"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/cugos/geoglyphs/blob/main/LICENSE.md"
    	},
    	samples: [
    		"turf-center",
    		"turf-erased",
    		"turf-point-on-line"
    	],
    	displayHeight: 24,
    	category: "Maps / Flags",
    	palette: false
    };
    var fad = {
    	name: "FontAudio",
    	total: 155,
    	author: {
    		name: "@fefanto",
    		url: "https://github.com/fefanto/fontaudio"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"shuffle",
    		"headphones",
    		"rew"
    	],
    	height: 16,
    	category: "Thematic",
    	palette: false
    };
    var academicons = {
    	name: "Academicons",
    	total: 149,
    	version: "1.9.2",
    	author: {
    		name: "James Walsh",
    		url: "https://github.com/jpswalsh/academicons"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"conversation",
    		"crossref-square",
    		"stackoverflow"
    	],
    	height: 16,
    	displayHeight: 24,
    	category: "Thematic",
    	palette: false
    };
    var wi = {
    	name: "Weather Icons",
    	total: 219,
    	version: "2.0.12",
    	author: {
    		name: "Erik Flowers",
    		url: "https://github.com/erikflowers/weather-icons"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"day-hail",
    		"barometer",
    		"day-windy"
    	],
    	height: 30,
    	category: "Thematic",
    	palette: false
    };
    var healthicons = {
    	name: "Health Icons",
    	total: 1731,
    	version: "0.1.0",
    	author: {
    		name: "Resolve to Save Lives",
    		url: "https://github.com/resolvetosavelives/healthicons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/resolvetosavelives/healthicons/blob/main/LICENSE"
    	},
    	samples: [
    		"cold-chain",
    		"emergency-post",
    		"asthma-outline"
    	],
    	height: 24,
    	category: "Thematic",
    	palette: false
    };
    var la = {
    	name: "Line Awesome",
    	total: 1544,
    	version: "1.2.1",
    	author: {
    		name: "Icons8",
    		url: "https://github.com/icons8/line-awesome"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://www.apache.org/licenses/LICENSE-2.0"
    	},
    	samples: [
    		"archive-solid",
    		"female-solid",
    		"check-circle"
    	],
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var eva = {
    	name: "Eva Icons",
    	total: 490,
    	version: "1.1.3",
    	author: {
    		name: "Akveo",
    		url: "https://github.com/akveo/eva-icons/"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/akveo/eva-icons/blob/master/LICENSE.txt"
    	},
    	samples: [
    		"droplet-off-outline",
    		"flash-fill",
    		"printer-outline"
    	],
    	height: 24,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var dashicons = {
    	name: "Dashicons",
    	total: 342,
    	version: "0.9.0",
    	author: {
    		name: "WordPress",
    		url: "https://github.com/WordPress/dashicons"
    	},
    	license: {
    		title: "GPL",
    		spdx: "GPL-2.0-or-later",
    		url: "https://github.com/WordPress/dashicons/blob/master/gpl.txt"
    	},
    	samples: [
    		"shortcode",
    		"businessperson",
    		"editor-expand"
    	],
    	height: 20,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var entypo = {
    	name: "Entypo+",
    	total: 321,
    	author: {
    		name: "Daniel Bruce",
    		url: "https://github.com/chancancode/entypo-plus"
    	},
    	license: {
    		title: "CC BY-SA 4.0",
    		spdx: "CC-BY-SA-4.0",
    		url: "https://creativecommons.org/licenses/by-sa/4.0/"
    	},
    	samples: [
    		"bell",
    		"image",
    		"erase"
    	],
    	height: 20,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var foundation = {
    	name: "Foundation",
    	total: 283,
    	version: "3.0.0",
    	author: {
    		name: "Zurb",
    		url: "https://github.com/zurb/foundation-icon-fonts"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT"
    	},
    	samples: [
    		"graph-trend",
    		"indent-more",
    		"lock"
    	],
    	height: 20,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var raphael = {
    	name: "Raphael",
    	total: 266,
    	author: {
    		name: "Dmitry Baranovskiy",
    		url: "https://github.com/dmitrybaranovskiy/raphael"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT"
    	},
    	samples: [
    		"home",
    		"cloud",
    		"parent"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var icons8 = {
    	name: "Icons8 Windows 10 Icons",
    	total: 234,
    	version: "1.0.0",
    	author: {
    		name: "Icons8",
    		url: "https://github.com/icons8/windows-10-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT"
    	},
    	samples: [
    		"checked",
    		"create-new",
    		"group"
    	],
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var iwwa = {
    	name: "Innowatio Font",
    	total: 105,
    	version: "1.1.3",
    	author: {
    		name: "Innowatio",
    		url: "https://github.com/innowatio/iwwa-icons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://www.apache.org/licenses/LICENSE-2.0"
    	},
    	samples: [
    		"tag",
    		"settings",
    		"connection-o"
    	],
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var fa = {
    	name: "Font Awesome 4",
    	total: 678,
    	version: "4.7.0",
    	author: {
    		name: "Dave Gandy",
    		url: "https://github.com/FortAwesome/Font-Awesome/tree/fa-4"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"wrench",
    		"bell-o",
    		"user-o"
    	],
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var fontisto = {
    	name: "Fontisto",
    	total: 615,
    	version: "3.0.4",
    	author: {
    		name: "Kenan Gündoğan",
    		url: "https://github.com/kenangundogan/fontisto"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/kenangundogan/fontisto/blob/master/LICENSE"
    	},
    	samples: [
    		"prescription",
    		"heartbeat-alt",
    		"rain"
    	],
    	height: 24,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var ps = {
    	name: "PrestaShop Icons",
    	total: 479,
    	author: {
    		name: "PrestaShop",
    		url: "https://github.com/PrestaShop/prestashop-icon-font"
    	},
    	license: {
    		title: "CC BY-NC 4.0",
    		spdx: "CC-BY-NC-4.0",
    		url: "https://creativecommons.org/licenses/by-nc/4.0/"
    	},
    	samples: [
    		"bell",
    		"girl",
    		"home"
    	],
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var subway = {
    	name: "Subway Icon Set",
    	total: 306,
    	author: {
    		name: "Mariusz Ostrowski",
    		url: "https://github.com/mariuszostrowski/subway"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"call-2",
    		"power-batton",
    		"admin"
    	],
    	height: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var oi = {
    	name: "Open Iconic",
    	total: 223,
    	version: "1.1.1",
    	author: {
    		name: "Iconic",
    		url: "https://github.com/icons8/line-awesome"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/iconic/open-iconic/blob/master/ICON-LICENSE"
    	},
    	samples: [
    		"bug",
    		"bullhorn",
    		"chat"
    	],
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var wpf = {
    	name: "Icons8 Windows 8 Icons",
    	total: 200,
    	author: {
    		name: "Icons8",
    		url: "https://github.com/icons8/WPF-UI-Framework"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT"
    	},
    	samples: [
    		"check-file",
    		"add-image",
    		"geo-fence"
    	],
    	height: 26,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var et = {
    	name: "Elegant",
    	total: 100,
    	version: "1.0.1",
    	author: {
    		name: "Kenny Sing",
    		url: "https://github.com/pprince/etlinefont-bower"
    	},
    	license: {
    		title: "GPL 3.0",
    		spdx: "GPL-3.0-or-later",
    		url: "https://www.gnu.org/licenses/gpl.html"
    	},
    	samples: [
    		"profile-female",
    		"ribbon",
    		"layers"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var el = {
    	name: "Elusive Icons",
    	total: 304,
    	version: "2.0.0",
    	author: {
    		name: "Team Redux",
    		url: "https://github.com/dovy/elusive-icons"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"headphones",
    		"cog",
    		"user"
    	],
    	height: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    };
    var vaadin = {
    	name: "Vaadin Icons",
    	total: 636,
    	version: "4.3.2",
    	author: {
    		name: "Vaadin",
    		url: "https://github.com/vaadin/web-components"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0"
    	},
    	samples: [
    		"area-select",
    		"file-picture",
    		"plus-circle-o"
    	],
    	height: 32,
    	displayHeight: 16,
    	palette: false,
    	hidden: true
    };
    var whh = {
    	name: "WebHostingHub Glyphs",
    	total: 2125,
    	author: {
    		name: "WebHostingHub"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"addtags",
    		"brightness",
    		"circlecallincoming"
    	],
    	palette: false,
    	hidden: true
    };
    var zmdi = {
    	name: "Material Design Iconic Font",
    	total: 777,
    	author: {
    		name: "MDI Community",
    		url: "https://github.com/zavoloklom/material-design-iconic-font"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1"
    	},
    	samples: [
    		"alarm-snooze",
    		"cloud-off",
    		"library"
    	],
    	palette: false,
    	hidden: true
    };
    var ls = {
    	name: "Ligature Symbols",
    	total: 348,
    	author: {
    		name: "Kazuyuki Motoyama",
    		url: "https://github.com/kudakurage/LigatureSymbols"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"bad",
    		"search",
    		"bag"
    	],
    	palette: false,
    	hidden: true
    };
    var bpmn = {
    	name: "BPMN",
    	total: 112,
    	version: "0.10.0",
    	author: {
    		name: "Camunda Services GmbH",
    		url: "https://github.com/bpmn-io/bpmn-font"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://github.com/bpmn-io/bpmn-font/blob/master/LICENSE"
    	},
    	samples: [
    		"intermediate-event-catch-non-interrupting-escalation",
    		"user",
    		"lane-insert-above"
    	],
    	displayHeight: 24,
    	palette: false,
    	hidden: true
    };
    var vs = {
    	name: "Vesper Icons",
    	total: 159,
    	version: "5.11.2",
    	author: {
    		name: "TableCheck",
    		url: "https://github.com/kkvesper/vesper-icons"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"edit-page",
    		"kakao-square",
    		"person"
    	],
    	palette: false,
    	hidden: true
    };
    var topcoat = {
    	name: "TopCoat Icons",
    	total: 89,
    	version: "0.2.0",
    	author: {
    		name: "TopCoat",
    		url: "https://github.com/topcoat/icons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/topcoat/icons/blob/master/LICENSE"
    	},
    	samples: [
    		"wifi",
    		"feedback",
    		"pencil"
    	],
    	palette: false,
    	hidden: true
    };
    var il = {
    	name: "Icalicons",
    	total: 84,
    	version: "0.0.1",
    	author: {
    		name: "Icalia Labs"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT"
    	},
    	samples: [
    		"calendar",
    		"users",
    		"conversation"
    	],
    	palette: false,
    	hidden: true
    };
    var websymbol = {
    	name: "Web Symbols Liga",
    	total: 85,
    	author: {
    		name: "Just Be Nice studio"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL"
    	},
    	samples: [
    		"clock",
    		"resize-full-circle",
    		"tag"
    	],
    	palette: false,
    	hidden: true
    };
    var fontelico = {
    	name: "Fontelico",
    	total: 34,
    	author: {
    		name: "Fontello",
    		url: "https://github.com/fontello/fontelico.font"
    	},
    	license: {
    		title: "CC BY SA",
    		spdx: "CC-BY-SA-3.0",
    		url: "https://creativecommons.org/licenses/by-sa/3.0/"
    	},
    	samples: [
    		"spin5",
    		"emo-sunglasses",
    		"crown-plus"
    	],
    	displayHeight: 20,
    	palette: false,
    	hidden: true
    };
    var feather = {
    	name: "Feather Icons",
    	total: 286,
    	author: {
    		name: "Cole Bemis",
    		url: "https://github.com/feathericons/feather"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/feathericons/feather/blob/master/LICENSE"
    	},
    	samples: [
    		"check-circle",
    		"award",
    		"home"
    	],
    	height: 24,
    	palette: false,
    	hidden: true
    };
    var importedCollections = {
    	"material-symbols": {
    	name: "Material Symbols",
    	total: 7702,
    	author: {
    		name: "Google",
    		url: "https://github.com/google/material-design-icons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/google/material-design-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"downloading",
    		"privacy-tip",
    		"filter-drama-outline"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	ic: ic,
    	mdi: mdi,
    	ph: ph,
    	ri: ri,
    	carbon: carbon,
    	bi: bi,
    	tabler: tabler,
    	ion: ion,
    	uil: uil,
    	teenyicons: teenyicons,
    	clarity: clarity,
    	iconoir: iconoir,
    	majesticons: majesticons,
    	zondicons: zondicons,
    	"ant-design": {
    	name: "Ant Design Icons",
    	total: 789,
    	version: "4.2.1",
    	author: {
    		name: "HeskeyBaozi",
    		url: "https://github.com/ant-design/ant-design-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/ant-design/ant-design-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"pushpin-filled",
    		"pie-chart-outlined",
    		"shopping-twotone"
    	],
    	height: 16,
    	category: "General",
    	palette: false
    },
    	bx: bx,
    	bxs: bxs,
    	gg: gg,
    	cil: cil,
    	lucide: lucide,
    	pixelarticons: pixelarticons,
    	"system-uicons": {
    	name: "System UIcons",
    	total: 430,
    	author: {
    		name: "Corey Ginnivan",
    		url: "https://github.com/CoreyGinnivan/system-uicons"
    	},
    	license: {
    		title: "Unlicense",
    		spdx: "Unlicense",
    		url: "https://github.com/CoreyGinnivan/system-uicons/blob/master/LICENSE"
    	},
    	samples: [
    		"bell",
    		"message-writing",
    		"write"
    	],
    	height: 21,
    	category: "General",
    	palette: false
    },
    	ci: ci,
    	"akar-icons": {
    	name: "Akar Icons",
    	total: 398,
    	version: "1.9.17",
    	author: {
    		name: "Arturo Wibawa",
    		url: "https://github.com/artcoholic/akar-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/artcoholic/akar-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"paper",
    		"pencil",
    		"location"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	typcn: typcn,
    	"radix-icons": {
    	name: "Radix Icons",
    	total: 318,
    	version: "1.1.1",
    	author: {
    		name: "Modulz",
    		url: "https://github.com/modulz/radix-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/radix-ui/icons/blob/master/LICENSE"
    	},
    	samples: [
    		"width",
    		"checkbox",
    		"code"
    	],
    	height: 15,
    	category: "General",
    	palette: false
    },
    	ep: ep,
    	"mdi-light": {
    	name: "Material Design Light",
    	total: 267,
    	author: {
    		name: "Austin Andrews",
    		url: "https://github.com/Templarian/MaterialDesignLight"
    	},
    	license: {
    		title: "Open Font License",
    		spdx: "OFL-1.1",
    		url: "https://github.com/Templarian/MaterialDesignLight/blob/master/LICENSE.md"
    	},
    	samples: [
    		"cart",
    		"home",
    		"login"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	fe: fe,
    	"eos-icons": {
    	name: "EOS Icons",
    	total: 253,
    	version: "5.4.0",
    	author: {
    		name: "SUSE UX/UI team",
    		url: "https://gitlab.com/SUSE-UIUX/eos-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://gitlab.com/SUSE-UIUX/eos-icons/-/blob/master/LICENSE"
    	},
    	samples: [
    		"modified-date-outlined",
    		"arrow-rotate",
    		"package"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	"line-md": {
    	name: "Material Line Icons",
    	total: 256,
    	version: "0.2.0",
    	author: {
    		name: "Vjacheslav Trushkin",
    		url: "https://github.com/cyberalien/line-md"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/cyberalien/line-md/blob/master/license.txt"
    	},
    	samples: [
    		"home",
    		"edit-twotone",
    		"image-twotone"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	charm: charm,
    	prime: prime,
    	"heroicons-outline": {
    	name: "HeroIcons Outline",
    	total: 230,
    	version: "1.0.6",
    	author: {
    		name: "Refactoring UI Inc",
    		url: "https://github.com/tailwindlabs/heroicons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/tailwindlabs/heroicons/blob/master/LICENSE"
    	},
    	samples: [
    		"color-swatch",
    		"library",
    		"receipt-refund"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	"heroicons-solid": {
    	name: "HeroIcons Solid",
    	total: 230,
    	version: "1.0.6",
    	author: {
    		name: "Refactoring UI Inc",
    		url: "https://github.com/tailwindlabs/heroicons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/tailwindlabs/heroicons/blob/master/LICENSE"
    	},
    	samples: [
    		"color-swatch",
    		"library",
    		"receipt-refund"
    	],
    	height: 20,
    	category: "General",
    	palette: false
    },
    	uiw: uiw,
    	uim: uim,
    	uit: uit,
    	uis: uis,
    	maki: maki,
    	gridicons: gridicons,
    	mi: mi,
    	quill: quill,
    	gala: gala,
    	fluent: fluent,
    	"icon-park-outline": {
    	name: "IconPark Outline",
    	total: 2657,
    	version: "1.4.0",
    	author: {
    		name: "ByteDance",
    		url: "https://github.com/bytedance/IconPark"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/bytedance/IconPark/blob/master/LICENSE"
    	},
    	samples: [
    		"add-one",
    		"english-mustache",
    		"basketball-clothes"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	"icon-park-solid": {
    	name: "IconPark Solid",
    	total: 1937,
    	version: "1.4.0",
    	author: {
    		name: "ByteDance",
    		url: "https://github.com/bytedance/IconPark"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/bytedance/IconPark/blob/master/LICENSE"
    	},
    	samples: [
    		"add-one",
    		"english-mustache",
    		"basketball-clothes"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	"icon-park-twotone": {
    	name: "IconPark TwoTone",
    	total: 1915,
    	version: "1.4.0",
    	author: {
    		name: "ByteDance",
    		url: "https://github.com/bytedance/IconPark"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/bytedance/IconPark/blob/master/LICENSE"
    	},
    	samples: [
    		"add-one",
    		"english-mustache",
    		"basketball-clothes"
    	],
    	height: 24,
    	category: "General",
    	palette: false
    },
    	"icon-park": {
    	name: "IconPark",
    	total: 2657,
    	version: "1.4.0",
    	author: {
    		name: "ByteDance",
    		url: "https://github.com/bytedance/IconPark"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/bytedance/IconPark/blob/master/LICENSE"
    	},
    	samples: [
    		"add-one",
    		"english-mustache",
    		"basketball-clothes"
    	],
    	height: 24,
    	category: "General",
    	palette: true
    },
    	"vscode-icons": {
    	name: "VSCode Icons",
    	total: 1138,
    	version: "11.12.0",
    	author: {
    		name: "Roberto Huertas",
    		url: "https://github.com/vscode-icons/vscode-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/vscode-icons/vscode-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"file-type-actionscript2",
    		"file-type-json",
    		"file-type-manifest"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: true
    },
    	jam: jam,
    	codicon: codicon,
    	pepicons: pepicons,
    	bytesize: bytesize,
    	ei: ei,
    	"fa6-solid": {
    	name: "Font Awesome Solid",
    	total: 1387,
    	version: "6.1.1",
    	author: {
    		name: "Dave Gandy",
    		url: "https://github.com/FortAwesome/Font-Awesome"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"location-pin",
    		"gem",
    		"folder"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: false
    },
    	"fa6-regular": {
    	name: "Font Awesome Regular",
    	total: 162,
    	version: "6.1.1",
    	author: {
    		name: "Dave Gandy",
    		url: "https://github.com/FortAwesome/Font-Awesome"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"message",
    		"clock",
    		"folder"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "General",
    	palette: false
    },
    	octicon: octicon,
    	ooui: ooui,
    	nimbus: nimbus,
    	openmoji: openmoji,
    	twemoji: twemoji,
    	noto: noto,
    	"noto-v1": {
    	name: "Noto Emoji (v1)",
    	total: 2157,
    	author: {
    		name: "Google Inc",
    		url: "https://github.com/googlefonts/noto-emoji"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://github.com/googlefonts/noto-emoji/blob/main/LICENSE"
    	},
    	samples: [
    		"face-with-open-mouth",
    		"no-littering",
    		"scissors"
    	],
    	height: 16,
    	category: "Emoji",
    	palette: true
    },
    	emojione: emojione,
    	"emojione-monotone": {
    	name: "Emoji One (Monotone)",
    	total: 1403,
    	version: "2.2.7",
    	author: {
    		name: "Emoji One",
    		url: "https://github.com/EmojiTwo/emojitwo"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"face-with-tongue",
    		"envelope",
    		"frog-face"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Emoji",
    	palette: false
    },
    	"emojione-v1": {
    	name: "Emoji One (v1)",
    	total: 1262,
    	version: "1.5.2",
    	author: {
    		name: "Emoji One",
    		url: "https://github.com/joypixels/emojione-legacy"
    	},
    	license: {
    		title: "CC BY-SA 4.0",
    		spdx: "CC-BY-SA-4.0",
    		url: "https://creativecommons.org/licenses/by-sa/4.0/"
    	},
    	samples: [
    		"face-savoring-food",
    		"panda-face",
    		"artist-palette"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Emoji",
    	palette: true
    },
    	fxemoji: fxemoji,
    	bxl: bxl,
    	logos: logos,
    	"simple-icons": {
    	name: "Simple Icons",
    	total: 2255,
    	version: "6.23.0",
    	author: {
    		name: "Simple Icons Collaborators",
    		url: "https://github.com/simple-icons/simple-icons"
    	},
    	license: {
    		title: "CC0 1.0",
    		spdx: "CC0-1.0",
    		url: "https://github.com/simple-icons/simple-icons/blob/develop/LICENSE.md"
    	},
    	samples: [
    		"transferwise",
    		"nintendo",
    		"vuetify"
    	],
    	height: 24,
    	category: "Brands / Social",
    	palette: false
    },
    	cib: cib,
    	"fa6-brands": {
    	name: "Font Awesome Brands",
    	total: 462,
    	version: "6.1.1",
    	author: {
    		name: "Dave Gandy",
    		url: "https://github.com/FortAwesome/Font-Awesome"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"strava",
    		"css3",
    		"y-combinator"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Brands / Social",
    	palette: false
    },
    	arcticons: arcticons,
    	"file-icons": {
    	name: "File Icons",
    	total: 930,
    	author: {
    		name: "John Gardner",
    		url: "https://github.com/file-icons/icons"
    	},
    	license: {
    		title: "ISC",
    		spdx: "ISC",
    		url: "https://github.com/file-icons/icons/blob/master/LICENSE.md"
    	},
    	samples: [
    		"adobe",
    		"chartjs",
    		"dom"
    	],
    	height: 16,
    	category: "Brands / Social",
    	palette: false
    },
    	brandico: brandico,
    	"entypo-social": {
    	name: "Entypo+ Social",
    	total: 76,
    	author: {
    		name: "Daniel Bruce",
    		url: "https://github.com/chancancode/entypo-plus"
    	},
    	license: {
    		title: "CC BY-SA 4.0",
    		spdx: "CC-BY-SA-4.0",
    		url: "https://creativecommons.org/licenses/by-sa/4.0/"
    	},
    	samples: [
    		"linkedin-with-circle",
    		"twitter",
    		"youtube"
    	],
    	height: 20,
    	category: "Brands / Social",
    	palette: false
    },
    	cryptocurrency: cryptocurrency,
    	flag: flag,
    	"circle-flags": {
    	name: "Circle Flags",
    	total: 348,
    	version: "1.0.0",
    	author: {
    		name: "HatScripts",
    		url: "https://github.com/HatScripts/circle-flags"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/HatScripts/circle-flags/blob/gh-pages/LICENSE"
    	},
    	samples: [
    		"ee",
    		"klingon",
    		"jp"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Maps / Flags",
    	palette: true
    },
    	flagpack: flagpack,
    	cif: cif,
    	gis: gis,
    	map: map,
    	geo: geo,
    	fad: fad,
    	academicons: academicons,
    	wi: wi,
    	healthicons: healthicons,
    	"medical-icon": {
    	name: "Medical Icons",
    	total: 144,
    	version: "1.0.0",
    	author: {
    		name: "Samuel Frémondière",
    		url: "https://github.com/samcome/webfont-medical-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/samcome/webfont-medical-icons/blob/master/LICENSE"
    	},
    	samples: [
    		"i-care-staff-area",
    		"i-nursery",
    		"immunizations"
    	],
    	category: "Thematic",
    	palette: false
    },
    	la: la,
    	eva: eva,
    	dashicons: dashicons,
    	"flat-color-icons": {
    	name: "Flat Color Icons",
    	total: 329,
    	version: "1.0.2",
    	author: {
    		name: "Icons8",
    		url: "https://github.com/icons8/flat-Color-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT"
    	},
    	samples: [
    		"edit-image",
    		"donate",
    		"planner"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Archive / Unmaintained",
    	palette: true
    },
    	entypo: entypo,
    	foundation: foundation,
    	raphael: raphael,
    	icons8: icons8,
    	iwwa: iwwa,
    	"fa-solid": {
    	name: "Font Awesome 5 Solid",
    	total: 1001,
    	version: "5.15.4",
    	author: {
    		name: "Dave Gandy",
    		url: "https://github.com/FortAwesome/Font-Awesome"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"search-plus",
    		"paste",
    		"comment-dots"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    },
    	"fa-regular": {
    	name: "Font Awesome 5 Regular",
    	total: 151,
    	version: "5.15.4",
    	author: {
    		name: "Dave Gandy",
    		url: "https://github.com/FortAwesome/Font-Awesome"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"bell",
    		"comment",
    		"hand-point-left"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    },
    	"fa-brands": {
    	name: "Font Awesome 5 Brands",
    	total: 457,
    	version: "5.15.4",
    	author: {
    		name: "Dave Gandy",
    		url: "https://github.com/FortAwesome/Font-Awesome"
    	},
    	license: {
    		title: "CC BY 4.0",
    		spdx: "CC-BY-4.0",
    		url: "https://creativecommons.org/licenses/by/4.0/"
    	},
    	samples: [
    		"amazon",
    		"cc-visa",
    		"chrome"
    	],
    	height: 32,
    	displayHeight: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    },
    	fa: fa,
    	fontisto: fontisto,
    	"icomoon-free": {
    	name: "IcoMoon Free",
    	total: 491,
    	author: {
    		name: "Keyamoon",
    		url: "https://github.com/Keyamoon/IcoMoon-Free"
    	},
    	license: {
    		title: "GPL",
    		spdx: "GPL-3.0-or-later",
    		url: "https://www.gnu.org/licenses/gpl.html"
    	},
    	samples: [
    		"bubbles3",
    		"forward",
    		"volume-medium"
    	],
    	height: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    },
    	ps: ps,
    	subway: subway,
    	oi: oi,
    	wpf: wpf,
    	"simple-line-icons": {
    	name: "Simple line icons",
    	total: 189,
    	version: "2.5.5",
    	author: {
    		name: "Sabbir Ahmed",
    		url: "https://github.com/thesabbir/simple-line-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/thesabbir/simple-line-icons/blob/master/LICENSE.md"
    	},
    	samples: [
    		"bubbles",
    		"camrecorder",
    		"cloud-upload"
    	],
    	height: 16,
    	category: "Archive / Unmaintained",
    	palette: false
    },
    	et: et,
    	el: el,
    	vaadin: vaadin,
    	"grommet-icons": {
    	name: "Grommet Icons",
    	total: 614,
    	version: "4.7.0",
    	author: {
    		name: "Grommet",
    		url: "https://github.com/grommet/grommet-icons"
    	},
    	license: {
    		title: "Apache 2.0",
    		spdx: "Apache-2.0",
    		url: "https://www.apache.org/licenses/LICENSE-2.0"
    	},
    	samples: [
    		"user-expert",
    		"action",
    		"home"
    	],
    	height: 24,
    	palette: false,
    	hidden: true
    },
    	whh: whh,
    	"si-glyph": {
    	name: "SmartIcons Glyph",
    	total: 799,
    	version: "0.0.2",
    	author: {
    		name: "SmartIcons"
    	},
    	license: {
    		title: "CC BY SA 4.0",
    		spdx: "CC-BY-SA-4.0",
    		url: "https://creativecommons.org/licenses/by-sa/4.0/"
    	},
    	samples: [
    		"circle-load-left",
    		"basket-arrow-right",
    		"slide-show"
    	],
    	palette: false,
    	hidden: true
    },
    	zmdi: zmdi,
    	ls: ls,
    	bpmn: bpmn,
    	"flat-ui": {
    	name: "Flat UI Icons",
    	total: 100,
    	author: {
    		name: "Designmodo, Inc.",
    		url: "https://github.com/designmodo/Flat-UI"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/designmodo/Flat-UI/blob/master/LICENSE"
    	},
    	samples: [
    		"map",
    		"graph",
    		"imac"
    	],
    	palette: true,
    	hidden: true
    },
    	vs: vs,
    	topcoat: topcoat,
    	il: il,
    	websymbol: websymbol,
    	fontelico: fontelico,
    	feather: feather,
    	"mono-icons": {
    	name: "Mono Icons",
    	total: 180,
    	version: "1.3.1",
    	author: {
    		name: "Mono",
    		url: "https://github.com/mono-company/mono-icons"
    	},
    	license: {
    		title: "MIT",
    		spdx: "MIT",
    		url: "https://github.com/mono-company/mono-icons/blob/master/LICENSE.md"
    	},
    	samples: [
    		"user",
    		"log-in",
    		"play"
    	],
    	height: 24,
    	palette: false,
    	hidden: true
    }
    };

    /**
     * @type {Record<string, import('@iconify/types').IconifyInfo>} collections
     */
    const collections = importedCollections;

    /* src/Homepage/IconList.svelte generated by Svelte v3.48.0 */

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i][0];
    	child_ctx[0] = list[i][1];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (51:18) {#each iconSet.samples as sampleIcon}
    function create_each_block_2$1(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: `${/*iconSet*/ ctx[5].prefix}:${/*sampleIcon*/ ctx[8]}`,
    				class: "w-9 h-9 sssm:w-8 sssm:h-8"
    			}
    		});

    	return {
    		c() {
    			create_component(icon.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*iconSets*/ 1) icon_changes.icon = `${/*iconSet*/ ctx[5].prefix}:${/*sampleIcon*/ ctx[8]}`;
    			icon.$set(icon_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};
    }

    // (62:18) {#if iconSet.height}
    function create_if_block$7(ctx) {
    	let div;
    	let icon;
    	let t0;
    	let p;
    	let t1_value = /*iconSet*/ ctx[5].height + "";
    	let t1;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "icon-park-outline:auto-height-one",
    				width: "20",
    				height: "20"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			attr(p, "class", "ml-1");
    			attr(div, "class", "flex items-center");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			append(div, t0);
    			append(div, p);
    			append(p, t1);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if ((!current || dirty & /*iconSets*/ 1) && t1_value !== (t1_value = /*iconSet*/ ctx[5].height + "")) set_data(t1, t1_value);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    		}
    	};
    }

    // (41:10) {#each iconSets as iconSet}
    function create_each_block_1$4(ctx) {
    	let div4;
    	let div2;
    	let div0;
    	let t0;
    	let div1;
    	let p0;
    	let t1_value = /*iconSet*/ ctx[5].total + "";
    	let t1;
    	let t2;
    	let t3;
    	let div3;
    	let a0;
    	let t4_value = /*iconSet*/ ctx[5].name + "";
    	let t4;
    	let a0_href_value;
    	let t5;
    	let p1;
    	let t6;
    	let a1;
    	let t7_value = /*iconSet*/ ctx[5].author.name + "";
    	let t7;
    	let a1_href_value;
    	let t8;
    	let current;
    	let each_value_2 = /*iconSet*/ ctx[5].samples;
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block = /*iconSet*/ ctx[5].height && create_if_block$7(ctx);

    	return {
    		c() {
    			div4 = element("div");
    			div2 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div1 = element("div");
    			p0 = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			if (if_block) if_block.c();
    			t3 = space();
    			div3 = element("div");
    			a0 = element("a");
    			t4 = text(t4_value);
    			t5 = space();
    			p1 = element("p");
    			t6 = text("By ");
    			a1 = element("a");
    			t7 = text(t7_value);
    			t8 = space();
    			attr(div0, "class", "w-full h-full flex items-center justify-center px-4 py-3 gap-5 sssm:gap-3 ");
    			attr(div1, "class", "w-full h-full border-t-2 border-stone-600 flex p-4 py-4 sssm:py-0 justify-between items-center text-smr");
    			attr(div2, "class", "flex flex-col flex-shrink-0 border-r-2 border-stone-600 font-medium tracking-wide text-stone-800 w-full sssm:w-36");
    			attr(a0, "href", a0_href_value = "./icon-set/" + /*iconSet*/ ctx[5].prefix);
    			attr(a0, "class", "w-11/12 whitespace-nowrap overflow-ellipsis overflow-hidden tracking-wide text-xl font-medium");
    			attr(a1, "target", "_blank");
    			attr(a1, "href", a1_href_value = /*iconSet*/ ctx[5].author.url || "/");
    			attr(a1, "class", "underline");
    			attr(p1, "class", "mt-3 overflow-hidden tracking-wide whitespace-nowrap overflow-ellipsis w-11/12");
    			attr(div3, "class", "flex flex-col justify-between px-4 py-3 w-full");
    			attr(div4, "class", "flex flex-col sssm:flex-row flex-grow overflow-hidden w-full border-2 border-stone-600");
    		},
    		m(target, anchor) {
    			insert(target, div4, anchor);
    			append(div4, div2);
    			append(div2, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append(div2, t0);
    			append(div2, div1);
    			append(div1, p0);
    			append(p0, t1);
    			append(div1, t2);
    			if (if_block) if_block.m(div1, null);
    			append(div4, t3);
    			append(div4, div3);
    			append(div3, a0);
    			append(a0, t4);
    			append(div3, t5);
    			append(div3, p1);
    			append(p1, t6);
    			append(p1, a1);
    			append(a1, t7);
    			append(div4, t8);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty & /*Object, iconSets*/ 1) {
    				each_value_2 = /*iconSet*/ ctx[5].samples;
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if ((!current || dirty & /*iconSets*/ 1) && t1_value !== (t1_value = /*iconSet*/ ctx[5].total + "")) set_data(t1, t1_value);

    			if (/*iconSet*/ ctx[5].height) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*iconSets*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*iconSets*/ 1) && t4_value !== (t4_value = /*iconSet*/ ctx[5].name + "")) set_data(t4, t4_value);

    			if (!current || dirty & /*iconSets*/ 1 && a0_href_value !== (a0_href_value = "./icon-set/" + /*iconSet*/ ctx[5].prefix)) {
    				attr(a0, "href", a0_href_value);
    			}

    			if ((!current || dirty & /*iconSets*/ 1) && t7_value !== (t7_value = /*iconSet*/ ctx[5].author.name + "")) set_data(t7, t7_value);

    			if (!current || dirty & /*iconSets*/ 1 && a1_href_value !== (a1_href_value = /*iconSet*/ ctx[5].author.url || "/")) {
    				attr(a1, "href", a1_href_value);
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div4);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};
    }

    // (29:4) {#each Object.entries(iconSets) as [name, iconSets], index}
    function create_each_block$6(ctx) {
    	let div2;
    	let div0;
    	let t0_value = /*name*/ ctx[2] + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2_intro;
    	let div2_outro;
    	let current;
    	let each_value_1 = /*iconSets*/ ctx[0];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	return {
    		c() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			attr(div0, "class", "bg-stone-600 p-8 text-stone-100 text-2xl font-medium tracking-wide");
    			attr(div1, "class", "flex-wrap p-4 md:p-12 grid gap-4 icon-list svelte-wnymtn");
    			attr(div2, "class", "w-full mb-6 overflow-hidden border-2 border-stone-600");
    		},
    		m(target, anchor) {
    			insert(target, div2, anchor);
    			append(div2, div0);
    			append(div0, t0);
    			append(div2, t1);
    			append(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append(div2, t2);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if ((!current || dirty & /*iconSets*/ 1) && t0_value !== (t0_value = /*name*/ ctx[2] + "")) set_data(t0, t0_value);

    			if (dirty & /*Object, iconSets*/ 1) {
    				each_value_1 = /*iconSets*/ ctx[0];
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			add_render_callback(() => {
    				if (div2_outro) div2_outro.end(1);
    				div2_intro = create_in_transition(div2, slide, {});
    				div2_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			if (div2_intro) div2_intro.invalidate();
    			div2_outro = create_out_transition(div2, slide, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div2);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div2_outro) div2_outro.end();
    		}
    	};
    }

    function create_fragment$y(ctx) {
    	let div1;
    	let div0;
    	let current;
    	let each_value = Object.entries(/*iconSets*/ ctx[0]);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div0, "class", "flex flex-col w-full pt-12");
    			attr(div1, "class", "flex flex-col items-center w-full mt-8 px-0 md:px-16");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*Object, iconSets*/ 1) {
    				each_value = Object.entries(/*iconSets*/ ctx[0]);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let iconSets = {
    		General: [],
    		"Brands / Social": [],
    		Emoji: [],
    		"Maps / Flags": [],
    		Thematic: [],
    		"Archive / Unmaintained": [],
    		Other: []
    	};

    	for (let [key, value] of Object.entries(collections)) {
    		value.prefix = key;
    		iconSets[value.category || "Other"] = [...iconSets[value.category || "Other"], value];
    	}
    	return [iconSets];
    }

    class IconList$2 extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$r, create_fragment$y, safe_not_equal, {});
    	}
    }

    /* src/Homepage/Compatibility.svelte generated by Svelte v3.48.0 */

    function create_default_slot$j(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.innerHTML = `Iconify supports all modern browsers.
      <br/><br/>
      Older browsers that are supported:
      <br/><br/> 
      <ul class="list-disc"><li class="ml-8">Internet Explorer 9 and newer.</li> 
        <li class="ml-8">iOS Safari for iOS 8 and newer.</li> 
        <li class="ml-8">Opera Mini and UC Browser are not supported.</li></ul> 
      <br/>
      IE 9, 10 and iOS 8 Safari do not support some modern functions that Iconify
      relies on. Iconify will automatically load polyfills for those browsers. All
      newer browsers do not require those polyfills.
      <br/><br/>
      Goal of Iconify is to offer unified icon framework for multiple platforms.
      Currently Iconify is available only as JavaScript library for browsers, React
      and Angular components.
      <br/><br/>
      If you use HTML or CSS syntax, Iconify loads icons from Iconify API. To use
      Iconify without relying on Iconify API there is possibility to
      <a>host custom API</a>
      and <a>bundle icons with custom scripts</a>.
      <br/><br/>
      Additionally you can copy or download SVG code. You can use it in editors (if
      you are using Sketch, check out <a>Iconify plug-in for Sketch</a>) or
      embed SVG directly into pages instead of using Iconify JavaScript.
      <br/><br/>
      See <a href="/">about</a> page to learn more about Iconify and project goals.`;

    			attr(div, "class", "text-base");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    function create_fragment$x(ctx) {
    	let div;
    	let p;
    	let t1;
    	let h2;
    	let t3;
    	let paragraph;
    	let current;

    	paragraph = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot$j] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "Compatibility";
    			t1 = space();
    			h2 = element("h2");
    			h2.textContent = "Iconify in different browsers";
    			t3 = space();
    			create_component(paragraph.$$.fragment);
    			attr(p, "class", "font-medium text-xl mb-2 text-center tracking-wide");
    			attr(h2, "class", "text-5xl font-semibold tracking-wide text-center mb-6 lg:mb-12");
    			attr(div, "class", "w-full px-0 md:px-16");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, p);
    			append(div, t1);
    			append(div, h2);
    			append(div, t3);
    			mount_component(paragraph, div, null);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				paragraph_changes.$$scope = { dirty, ctx };
    			}

    			paragraph.$set(paragraph_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(paragraph);
    		}
    	};
    }

    class Compatibility extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$x, safe_not_equal, {});
    	}
    }

    /* src/Homepage/License.svelte generated by Svelte v3.48.0 */

    function create_default_slot$i(ctx) {
    	let p;

    	return {
    		c() {
    			p = element("p");

    			p.innerHTML = `Iconify SVG framework is dual licensed under <a>Apache 2.0 license</a> and
      <a>GPL 2.0 license</a>. You may select, at your option, one of the
      above-listed licenses.
      <br/><br/>
      Apache 2.0 license allows pretty much anything, including commercial use.
      <br/><br/>
      GPL 2.0 license allows use with more restrictive popular open source projects.
      <br/><br/>
      This license does not apply to icons. Icons are released under different licenses,
      see each collection for details. Icon collections available by default are
      all licensed under some kind of open source or free license, making it possible
      to use them in Iconify project.`;

    			attr(p, "class", "text-base");
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(p);
    		}
    	};
    }

    function create_fragment$w(ctx) {
    	let div;
    	let p;
    	let t1;
    	let h2;
    	let t3;
    	let paragraph;
    	let current;

    	paragraph = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot$i] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "License";
    			t1 = space();
    			h2 = element("h2");
    			h2.textContent = "Iconify under legal protection";
    			t3 = space();
    			create_component(paragraph.$$.fragment);
    			attr(p, "class", "font-medium text-xl mb-2 text-center tracking-wide");
    			attr(h2, "class", "text-5xl font-semibold tracking-wide text-center mb-6 lg:mb-12");
    			attr(div, "class", "w-full px-0 md:px-16");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, p);
    			append(div, t1);
    			append(div, h2);
    			append(div, t3);
    			mount_component(paragraph, div, null);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				paragraph_changes.$$scope = { dirty, ctx };
    			}

    			paragraph.$set(paragraph_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(paragraph);
    		}
    	};
    }

    class License extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$w, safe_not_equal, {});
    	}
    }

    /* src/Homepage/Home.svelte generated by Svelte v3.48.0 */

    function create_fragment$v(ctx) {
    	let div;
    	let hero;
    	let t0;
    	let intro;
    	let t1;
    	let tutorial;
    	let t2;
    	let features;
    	let t3;
    	let iconlist;
    	let t4;
    	let compatibility;
    	let t5;
    	let license;
    	let current;
    	hero = new Hero({});
    	intro = new Intro({});
    	tutorial = new Tutorial({});
    	features = new Features({});
    	iconlist = new IconList$2({});
    	compatibility = new Compatibility({});
    	license = new License({});

    	return {
    		c() {
    			div = element("div");
    			create_component(hero.$$.fragment);
    			t0 = space();
    			create_component(intro.$$.fragment);
    			t1 = space();
    			create_component(tutorial.$$.fragment);
    			t2 = space();
    			create_component(features.$$.fragment);
    			t3 = space();
    			create_component(iconlist.$$.fragment);
    			t4 = space();
    			create_component(compatibility.$$.fragment);
    			t5 = space();
    			create_component(license.$$.fragment);
    			attr(div, "class", "flex flex-col px-3 390:px-8 ssm:px-12 gap-20 sm:gap-32");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(hero, div, null);
    			append(div, t0);
    			mount_component(intro, div, null);
    			append(div, t1);
    			mount_component(tutorial, div, null);
    			append(div, t2);
    			mount_component(features, div, null);
    			append(div, t3);
    			mount_component(iconlist, div, null);
    			append(div, t4);
    			mount_component(compatibility, div, null);
    			append(div, t5);
    			mount_component(license, div, null);
    			current = true;
    		},
    		p: noop,
    		i(local) {
    			if (current) return;
    			transition_in(hero.$$.fragment, local);
    			transition_in(intro.$$.fragment, local);
    			transition_in(tutorial.$$.fragment, local);
    			transition_in(features.$$.fragment, local);
    			transition_in(iconlist.$$.fragment, local);
    			transition_in(compatibility.$$.fragment, local);
    			transition_in(license.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(hero.$$.fragment, local);
    			transition_out(intro.$$.fragment, local);
    			transition_out(tutorial.$$.fragment, local);
    			transition_out(features.$$.fragment, local);
    			transition_out(iconlist.$$.fragment, local);
    			transition_out(compatibility.$$.fragment, local);
    			transition_out(license.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(hero);
    			destroy_component(intro);
    			destroy_component(tutorial);
    			destroy_component(features);
    			destroy_component(iconlist);
    			destroy_component(compatibility);
    			destroy_component(license);
    		}
    	};
    }

    class Home extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$v, safe_not_equal, {});
    	}
    }

    const iconFilterTerm = writable('');
    const count = writable(0);

    /* src/Browse/IconList.svelte generated by Svelte v3.48.0 */

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i][0];
    	child_ctx[2] = list[i][1];
    	child_ctx[6] = i;
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (39:6) {#if (selectedCategory === null || selectedCategory === index) && iconSets.filter((iconSet) => !iconFilterTerm.trim() || iconSet.name               .toLowerCase()               .includes(iconFilterTerm.trim().toLowerCase())).length}
    function create_if_block$6(ctx) {
    	let div2;
    	let div0;
    	let t0_value = /*name*/ ctx[4] + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let div2_intro;
    	let div2_outro;
    	let current;
    	let each_value_1 = /*iconSets*/ ctx[2];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	return {
    		c() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			attr(div0, "class", "bg-stone-600 p-8 text-stone-100 text-2xl font-medium tracking-wide");
    			attr(div1, "class", "flex-wrap p-4 md:p-12 grid gap-4 icon-list svelte-wnymtn");
    			attr(div2, "class", "w-full mb-6 overflow-hidden border-2 border-stone-600");
    		},
    		m(target, anchor) {
    			insert(target, div2, anchor);
    			append(div2, div0);
    			append(div0, t0);
    			append(div2, t1);
    			append(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append(div2, t2);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if ((!current || dirty & /*iconSets*/ 4) && t0_value !== (t0_value = /*name*/ ctx[4] + "")) set_data(t0, t0_value);

    			if (dirty & /*Object, iconSets, iconFilterTerm*/ 6) {
    				each_value_1 = /*iconSets*/ ctx[2];
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			add_render_callback(() => {
    				if (div2_outro) div2_outro.end(1);
    				div2_intro = create_in_transition(div2, slide, {});
    				div2_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			if (div2_intro) div2_intro.invalidate();
    			div2_outro = create_out_transition(div2, slide, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div2);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div2_outro) div2_outro.end();
    		}
    	};
    }

    // (54:14) {#if !iconFilterTerm.trim() || iconSet.name                   .toLowerCase()                   .includes(iconFilterTerm.trim().toLowerCase())}
    function create_if_block_1$6(ctx) {
    	let div4;
    	let div2;
    	let div0;
    	let t0;
    	let div1;
    	let p0;
    	let t1_value = /*iconSet*/ ctx[7].total + "";
    	let t1;
    	let t2;
    	let t3;
    	let div3;
    	let a0;
    	let t4_value = /*iconSet*/ ctx[7].name + "";
    	let t4;
    	let a0_href_value;
    	let t5;
    	let p1;
    	let t6;
    	let a1;
    	let t7_value = /*iconSet*/ ctx[7].author.name + "";
    	let t7;
    	let a1_href_value;
    	let t8;
    	let current;
    	let each_value_2 = /*iconSet*/ ctx[7].samples;
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block = /*iconSet*/ ctx[7].height && create_if_block_2$5(ctx);

    	return {
    		c() {
    			div4 = element("div");
    			div2 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div1 = element("div");
    			p0 = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			if (if_block) if_block.c();
    			t3 = space();
    			div3 = element("div");
    			a0 = element("a");
    			t4 = text(t4_value);
    			t5 = space();
    			p1 = element("p");
    			t6 = text("By ");
    			a1 = element("a");
    			t7 = text(t7_value);
    			t8 = space();
    			attr(div0, "class", "w-full h-full flex items-center justify-center px-4 py-3 gap-5 sssm:gap-3 ");
    			attr(div1, "class", "w-full h-full border-t-2 border-stone-600 flex p-4 py-4 sssm:py-0 justify-between items-center text-smr");
    			attr(div2, "class", "flex flex-col flex-shrink-0 border-r-2 border-stone-600 font-medium tracking-wide text-stone-800 w-full sssm:w-36");
    			attr(a0, "href", a0_href_value = "./icon-set/" + /*iconSet*/ ctx[7].prefix);
    			attr(a0, "class", "w-11/12 whitespace-nowrap overflow-ellipsis overflow-hidden tracking-wide text-xl font-medium");
    			attr(a1, "target", "_blank");
    			attr(a1, "href", a1_href_value = /*iconSet*/ ctx[7].author.url || "/");
    			attr(a1, "class", "underline");
    			attr(p1, "class", "mt-3 overflow-hidden tracking-wide whitespace-nowrap overflow-ellipsis w-11/12");
    			attr(div3, "class", "flex flex-col justify-between px-4 py-3 w-full");
    			attr(div4, "class", "flex flex-col sssm:flex-row flex-grow overflow-hidden w-full border-2 border-stone-600");
    		},
    		m(target, anchor) {
    			insert(target, div4, anchor);
    			append(div4, div2);
    			append(div2, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append(div2, t0);
    			append(div2, div1);
    			append(div1, p0);
    			append(p0, t1);
    			append(div1, t2);
    			if (if_block) if_block.m(div1, null);
    			append(div4, t3);
    			append(div4, div3);
    			append(div3, a0);
    			append(a0, t4);
    			append(div3, t5);
    			append(div3, p1);
    			append(p1, t6);
    			append(p1, a1);
    			append(a1, t7);
    			append(div4, t8);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty & /*Object, iconSets*/ 4) {
    				each_value_2 = /*iconSet*/ ctx[7].samples;
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if ((!current || dirty & /*iconSets*/ 4) && t1_value !== (t1_value = /*iconSet*/ ctx[7].total + "")) set_data(t1, t1_value);

    			if (/*iconSet*/ ctx[7].height) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*iconSets*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*iconSets*/ 4) && t4_value !== (t4_value = /*iconSet*/ ctx[7].name + "")) set_data(t4, t4_value);

    			if (!current || dirty & /*iconSets*/ 4 && a0_href_value !== (a0_href_value = "./icon-set/" + /*iconSet*/ ctx[7].prefix)) {
    				attr(a0, "href", a0_href_value);
    			}

    			if ((!current || dirty & /*iconSets*/ 4) && t7_value !== (t7_value = /*iconSet*/ ctx[7].author.name + "")) set_data(t7, t7_value);

    			if (!current || dirty & /*iconSets*/ 4 && a1_href_value !== (a1_href_value = /*iconSet*/ ctx[7].author.url || "/")) {
    				attr(a1, "href", a1_href_value);
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div4);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};
    }

    // (66:22) {#each iconSet.samples as sampleIcon}
    function create_each_block_2(ctx) {
    	let icon;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: `${/*iconSet*/ ctx[7].prefix}:${/*sampleIcon*/ ctx[10]}`,
    				class: "w-9 h-9 sssm:w-8 sssm:h-8"
    			}
    		});

    	return {
    		c() {
    			create_component(icon.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(icon, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty & /*iconSets*/ 4) icon_changes.icon = `${/*iconSet*/ ctx[7].prefix}:${/*sampleIcon*/ ctx[10]}`;
    			icon.$set(icon_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(icon, detaching);
    		}
    	};
    }

    // (77:22) {#if iconSet.height}
    function create_if_block_2$5(ctx) {
    	let div;
    	let icon;
    	let t0;
    	let p;
    	let t1_value = /*iconSet*/ ctx[7].height + "";
    	let t1;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "icon-park-outline:auto-height-one",
    				width: "20",
    				height: "20"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			attr(p, "class", "ml-1");
    			attr(div, "class", "flex items-center");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			append(div, t0);
    			append(div, p);
    			append(p, t1);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if ((!current || dirty & /*iconSets*/ 4) && t1_value !== (t1_value = /*iconSet*/ ctx[7].height + "")) set_data(t1, t1_value);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    		}
    	};
    }

    // (53:12) {#each iconSets as iconSet}
    function create_each_block_1$3(ctx) {
    	let show_if = !/*iconFilterTerm*/ ctx[1].trim() || /*iconSet*/ ctx[7].name.toLowerCase().includes(/*iconFilterTerm*/ ctx[1].trim().toLowerCase());
    	let if_block_anchor;
    	let current;
    	let if_block = show_if && create_if_block_1$6(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty & /*iconFilterTerm, iconSets*/ 6) show_if = !/*iconFilterTerm*/ ctx[1].trim() || /*iconSet*/ ctx[7].name.toLowerCase().includes(/*iconFilterTerm*/ ctx[1].trim().toLowerCase());

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*iconFilterTerm, iconSets*/ 6) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (38:4) {#each Object.entries(iconSets) as [name, iconSets], index}
    function create_each_block$5(ctx) {
    	let show_if = (/*selectedCategory*/ ctx[0] === null || /*selectedCategory*/ ctx[0] === /*index*/ ctx[6]) && /*iconSets*/ ctx[2].filter(/*func*/ ctx[3]).length;
    	let if_block_anchor;
    	let current;
    	let if_block = show_if && create_if_block$6(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty & /*selectedCategory, iconSets, iconFilterTerm*/ 7) show_if = (/*selectedCategory*/ ctx[0] === null || /*selectedCategory*/ ctx[0] === /*index*/ ctx[6]) && /*iconSets*/ ctx[2].filter(/*func*/ ctx[3]).length;

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*selectedCategory, iconSets, iconFilterTerm*/ 7) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function create_fragment$u(ctx) {
    	let div1;
    	let div0;
    	let current;
    	let each_value = Object.entries(/*iconSets*/ ctx[2]);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div0, "class", "flex flex-col w-full pt-12");
    			attr(div1, "class", "flex flex-col items-center w-full mt-8");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*Object, iconSets, iconFilterTerm, selectedCategory*/ 7) {
    				each_value = Object.entries(/*iconSets*/ ctx[2]);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let iconSets = {
    		General: [],
    		"Brands / Social": [],
    		Emoji: [],
    		"Maps / Flags": [],
    		Thematic: [],
    		"Archive / Unmaintained": [],
    		Other: []
    	};

    	for (let [key, value] of Object.entries(collections)) {
    		value.prefix = key;
    		iconSets[value.category || "Other"] = [...iconSets[value.category || "Other"], value];
    	}

    	count.set(Object.values(iconSets).flat().map(e => e.total).reduce((a, b) => a + b));
    	let { selectedCategory = null } = $$props;
    	let { iconFilterTerm } = $$props;
    	const func = iconSet => !iconFilterTerm.trim() || iconSet.name.toLowerCase().includes(iconFilterTerm.trim().toLowerCase());

    	$$self.$$set = $$props => {
    		if ('selectedCategory' in $$props) $$invalidate(0, selectedCategory = $$props.selectedCategory);
    		if ('iconFilterTerm' in $$props) $$invalidate(1, iconFilterTerm = $$props.iconFilterTerm);
    	};

    	return [selectedCategory, iconFilterTerm, iconSets, func];
    }

    class IconList$1 extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$q, create_fragment$u, safe_not_equal, { selectedCategory: 0, iconFilterTerm: 1 });
    	}
    }

    /* src/Browse/Header.svelte generated by Svelte v3.48.0 */

    function create_default_slot$h(ctx) {
    	let p;

    	return {
    		c() {
    			p = element("p");

    			p.innerHTML = `All icon sets listed below are released by their authors with some kind of
    free or open source license. Collections include popular icon sets, icon
    fonts and several Emoji sets.
    <br/><br/>
    Click icon set name to see all available icons.`;

    			attr(p, "class", "text-center text-base ");
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(p);
    		}
    	};
    }

    function create_fragment$t(ctx) {
    	let h1;
    	let t1;
    	let paragraph;
    	let current;

    	paragraph = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot$h] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			h1 = element("h1");
    			h1.textContent = "Browse Icons";
    			t1 = space();
    			create_component(paragraph.$$.fragment);
    			attr(h1, "class", "mb-4 text-2xl font-semibold tracking-wide text-center sm:mb-8 sm:text-5xl mt-12");
    		},
    		m(target, anchor) {
    			insert(target, h1, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				paragraph_changes.$$scope = { dirty, ctx };
    			}

    			paragraph.$set(paragraph_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(h1);
    			if (detaching) detach(t1);
    			destroy_component(paragraph, detaching);
    		}
    	};
    }

    class Header extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$t, safe_not_equal, {});
    	}
    }

    /* src/Browse/Search.svelte generated by Svelte v3.48.0 */

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i][0];
    	child_ctx[8] = list[i][1];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (54:4) {#each Object.entries(categories) as [color, category], index}
    function create_each_block$4(ctx) {
    	let button;
    	let t_value = /*category*/ ctx[8] + "";
    	let t;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[5](/*index*/ ctx[10]);
    	}

    	return {
    		c() {
    			button = element("button");
    			t = text(t_value);

    			attr(button, "class", button_class_value = "" + ((/*selectedCategory*/ ctx[2] === /*index*/ ctx[10]
    			? `bg-stone-600 text-stone-100`
    			: ``) + " border-2 border-stone-600 whitespace-nowrap h-11 flex flex-grow md:flex-grow-0 transition-all items-center justify-center font-medium px-8"));
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			append(button, t);

    			if (!mounted) {
    				dispose = listen(button, "click", click_handler);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*selectedCategory*/ 4 && button_class_value !== (button_class_value = "" + ((/*selectedCategory*/ ctx[2] === /*index*/ ctx[10]
    			? `bg-stone-600 text-stone-100`
    			: ``) + " border-2 border-stone-600 whitespace-nowrap h-11 flex flex-grow md:flex-grow-0 transition-all items-center justify-center font-medium px-8"))) {
    				attr(button, "class", button_class_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function create_fragment$s(ctx) {
    	let form;
    	let div0;
    	let icon0;
    	let t0;
    	let input0;
    	let input0_placeholder_value;
    	let t1;
    	let button;
    	let t3;
    	let div3;
    	let div1;
    	let t4;
    	let div2;
    	let icon1;
    	let t5;
    	let input1;
    	let current;
    	let mounted;
    	let dispose;

    	icon0 = new Icon({
    			props: {
    				icon: "uil:search",
    				class: "",
    				width: "24",
    				height: "24"
    			}
    		});

    	let each_value = Object.entries(/*categories*/ ctx[4]);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	icon1 = new Icon({
    			props: {
    				icon: "octicon:filter-16",
    				class: "",
    				width: "24",
    				height: "24"
    			}
    		});

    	return {
    		c() {
    			form = element("form");
    			div0 = element("div");
    			create_component(icon0.$$.fragment);
    			t0 = space();
    			input0 = element("input");
    			t1 = space();
    			button = element("button");
    			button.textContent = "Search Icons";
    			t3 = space();
    			div3 = element("div");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			div2 = element("div");
    			create_component(icon1.$$.fragment);
    			t5 = space();
    			input1 = element("input");
    			attr(input0, "autocomplete", "off");
    			attr(input0, "name", "q");
    			attr(input0, "id", "q");
    			attr(input0, "type", "text");
    			attr(input0, "class", "w-full tracking-wide placeholder-stone-600 bg-transparent");
    			attr(input0, "placeholder", input0_placeholder_value = "Search " + /*count_value*/ ctx[3].toLocaleString() + " icons");
    			attr(div0, "class", "inline-flex items-center w-full p-4 overflow-hidden border-2 border-stone-600 gap-4 ");
    			attr(button, "type", "submit");
    			attr(button, "class", "flex items-center justify-center h-16 sm:h-full px-12 font-semibold tracking-wide border-2 border-stone-600 whitespace-nowrap gap-6");
    			attr(form, "action", "/search");
    			attr(form, "class", "flex flex-col w-full sm:h-16 mt-12 sm:flex-row gap-2");
    			attr(div1, "class", "flex flex-wrap gap-2");
    			attr(input1, "type", "text");
    			attr(input1, "class", "w-full tracking-wide placeholder-stone-600 bg-transparent");
    			attr(input1, "placeholder", "Filter icon sets");
    			attr(div2, "class", "inline-flex items-center p-4 overflow-hidden border-2 border-stone-600 gap-3 w-full md:w-96 flex-shrink-0");
    			attr(div3, "class", "flex flex-col md:flex-row items-start justify-between w-full mt-4 gap-4");
    		},
    		m(target, anchor) {
    			insert(target, form, anchor);
    			append(form, div0);
    			mount_component(icon0, div0, null);
    			append(div0, t0);
    			append(div0, input0);
    			append(form, t1);
    			append(form, button);
    			insert(target, t3, anchor);
    			insert(target, div3, anchor);
    			append(div3, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append(div3, t4);
    			append(div3, div2);
    			mount_component(icon1, div2, null);
    			append(div2, t5);
    			append(div2, input1);
    			set_input_value(input1, /*value*/ ctx[0]);
    			current = true;

    			if (!mounted) {
    				dispose = listen(input1, "input", /*input1_input_handler*/ ctx[6]);
    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (!current || dirty & /*count_value*/ 8 && input0_placeholder_value !== (input0_placeholder_value = "Search " + /*count_value*/ ctx[3].toLocaleString() + " icons")) {
    				attr(input0, "placeholder", input0_placeholder_value);
    			}

    			if (dirty & /*selectedCategory, setSelectedCategory, Object, categories*/ 22) {
    				each_value = Object.entries(/*categories*/ ctx[4]);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*value*/ 1 && input1.value !== /*value*/ ctx[0]) {
    				set_input_value(input1, /*value*/ ctx[0]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(form);
    			destroy_component(icon0);
    			if (detaching) detach(t3);
    			if (detaching) detach(div3);
    			destroy_each(each_blocks, detaching);
    			destroy_component(icon1);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function instance$p($$self, $$props, $$invalidate) {
    	const categories = {
    		rose: "General",
    		orange: "Brands / Social",
    		emerald: "Emoji",
    		sky: "Maps / Flags",
    		purple: "Thematic",
    		gray: "Archive / Unmaintained",
    		teal: "Other"
    	};

    	let { setSelectedCategory } = $$props;
    	let { selectedCategory } = $$props;
    	let { value = "" } = $$props;
    	let count_value;

    	count.subscribe(value => {
    		$$invalidate(3, count_value = value);
    	});

    	const click_handler = index => setSelectedCategory(selectedCategory == index ? null : index);

    	function input1_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$props => {
    		if ('setSelectedCategory' in $$props) $$invalidate(1, setSelectedCategory = $$props.setSelectedCategory);
    		if ('selectedCategory' in $$props) $$invalidate(2, selectedCategory = $$props.selectedCategory);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    	};

    	return [
    		value,
    		setSelectedCategory,
    		selectedCategory,
    		count_value,
    		categories,
    		click_handler,
    		input1_input_handler
    	];
    }

    class Search extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$p, create_fragment$s, safe_not_equal, {
    			setSelectedCategory: 1,
    			selectedCategory: 2,
    			value: 0
    		});
    	}
    }

    /* src/Utils/BottomDec.svelte generated by Svelte v3.48.0 */

    function create_default_slot$g(ctx) {
    	let p;

    	return {
    		c() {
    			p = element("p");

    			p.innerHTML = `Icon sets are automatically kept up to date, making sure you always have
    access to the newest icons.
    <br/><br/>
    If you are author of icon set that you would like to be published on Iconify,
    please <a>open an issue at GitHub repository for icon sets</a>. Icon set
    must be your own original work, it must have open source license and it must
    be published on GitHub or NPM.
    <br/><br/>
    Goal of Iconify is to make using icons as simple as possible, while offering
    huge number of icons.
    <br/><br/>
    Currently you can use icons in your projects as JavaScript library for browsers,
    React, Vue and Svelte components. Plug-ins for Sketch and Figma are available
    to make life of designers easier. <a>Iconify Icon Finder</a> will be
    available soon to help developers add icon piclers to their projects, such
    as website builders and website customisers.
    <br/><br/>
    See <a>about Iconify page</a> to learn more about Iconify project.`;

    			attr(p, "class", "mt-8");
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(p);
    		}
    	};
    }

    function create_fragment$r(ctx) {
    	let paragraph;
    	let current;

    	paragraph = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot$g] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				paragraph_changes.$$scope = { dirty, ctx };
    			}

    			paragraph.$set(paragraph_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph, detaching);
    		}
    	};
    }

    class BottomDec extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, null, create_fragment$r, safe_not_equal, {});
    	}
    }

    /* src/Browse/Browse.svelte generated by Svelte v3.48.0 */

    function create_fragment$q(ctx) {
    	let div;
    	let header;
    	let t0;
    	let search;
    	let updating_value;
    	let t1;
    	let iconlist;
    	let t2;
    	let bottomdec;
    	let current;
    	header = new Header({});

    	function search_value_binding(value) {
    		/*search_value_binding*/ ctx[3](value);
    	}

    	let search_props = {
    		setSelectedCategory: /*setSelectedCategory*/ ctx[2],
    		selectedCategory: /*selectedCategory*/ ctx[0],
    		iconFilterTerm: /*$iconFilterTerm*/ ctx[1]
    	};

    	if (/*$iconFilterTerm*/ ctx[1] !== void 0) {
    		search_props.value = /*$iconFilterTerm*/ ctx[1];
    	}

    	search = new Search({ props: search_props });
    	binding_callbacks.push(() => bind(search, 'value', search_value_binding));

    	iconlist = new IconList$1({
    			props: {
    				selectedCategory: /*selectedCategory*/ ctx[0],
    				iconFilterTerm: /*$iconFilterTerm*/ ctx[1]
    			}
    		});

    	bottomdec = new BottomDec({});

    	return {
    		c() {
    			div = element("div");
    			create_component(header.$$.fragment);
    			t0 = space();
    			create_component(search.$$.fragment);
    			t1 = space();
    			create_component(iconlist.$$.fragment);
    			t2 = space();
    			create_component(bottomdec.$$.fragment);
    			attr(div, "class", "flex flex-col px-3 390:px-8 ssm:px-12");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(header, div, null);
    			append(div, t0);
    			mount_component(search, div, null);
    			append(div, t1);
    			mount_component(iconlist, div, null);
    			append(div, t2);
    			mount_component(bottomdec, div, null);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const search_changes = {};
    			if (dirty & /*selectedCategory*/ 1) search_changes.selectedCategory = /*selectedCategory*/ ctx[0];
    			if (dirty & /*$iconFilterTerm*/ 2) search_changes.iconFilterTerm = /*$iconFilterTerm*/ ctx[1];

    			if (!updating_value && dirty & /*$iconFilterTerm*/ 2) {
    				updating_value = true;
    				search_changes.value = /*$iconFilterTerm*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			search.$set(search_changes);
    			const iconlist_changes = {};
    			if (dirty & /*selectedCategory*/ 1) iconlist_changes.selectedCategory = /*selectedCategory*/ ctx[0];
    			if (dirty & /*$iconFilterTerm*/ 2) iconlist_changes.iconFilterTerm = /*$iconFilterTerm*/ ctx[1];
    			iconlist.$set(iconlist_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(search.$$.fragment, local);
    			transition_in(iconlist.$$.fragment, local);
    			transition_in(bottomdec.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(search.$$.fragment, local);
    			transition_out(iconlist.$$.fragment, local);
    			transition_out(bottomdec.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(header);
    			destroy_component(search);
    			destroy_component(iconlist);
    			destroy_component(bottomdec);
    		}
    	};
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let $iconFilterTerm;
    	component_subscribe($$self, iconFilterTerm, $$value => $$invalidate(1, $iconFilterTerm = $$value));
    	let selectedCategory = null;

    	const setSelectedCategory = value => {
    		$$invalidate(0, selectedCategory = value);
    	};

    	function search_value_binding(value) {
    		$iconFilterTerm = value;
    		iconFilterTerm.set($iconFilterTerm);
    	}

    	return [selectedCategory, $iconFilterTerm, setSelectedCategory, search_value_binding];
    }

    class Browse extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$o, create_fragment$q, safe_not_equal, {});
    	}
    }

    var lottie = createCommonjsModule(function (module, exports) {
    (typeof navigator !== "undefined") && (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      var svgNS = 'http://www.w3.org/2000/svg';
      var locationHref = '';
      var _useWebWorker = false;
      var initialDefaultFrame = -999999;

      var setWebWorker = function setWebWorker(flag) {
        _useWebWorker = !!flag;
      };

      var getWebWorker = function getWebWorker() {
        return _useWebWorker;
      };

      var setLocationHref = function setLocationHref(value) {
        locationHref = value;
      };

      var getLocationHref = function getLocationHref() {
        return locationHref;
      };

      function createTag(type) {
        // return {appendChild:function(){},setAttribute:function(){},style:{}}
        return document.createElement(type);
      }

      function extendPrototype(sources, destination) {
        var i;
        var len = sources.length;
        var sourcePrototype;

        for (i = 0; i < len; i += 1) {
          sourcePrototype = sources[i].prototype;

          for (var attr in sourcePrototype) {
            if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr)) destination.prototype[attr] = sourcePrototype[attr];
          }
        }
      }

      function getDescriptor(object, prop) {
        return Object.getOwnPropertyDescriptor(object, prop);
      }

      function createProxyFunction(prototype) {
        function ProxyFunction() {}

        ProxyFunction.prototype = prototype;
        return ProxyFunction;
      }

      // import Howl from '../../3rd_party/howler';
      var audioControllerFactory = function () {
        function AudioController(audioFactory) {
          this.audios = [];
          this.audioFactory = audioFactory;
          this._volume = 1;
          this._isMuted = false;
        }

        AudioController.prototype = {
          addAudio: function addAudio(audio) {
            this.audios.push(audio);
          },
          pause: function pause() {
            var i;
            var len = this.audios.length;

            for (i = 0; i < len; i += 1) {
              this.audios[i].pause();
            }
          },
          resume: function resume() {
            var i;
            var len = this.audios.length;

            for (i = 0; i < len; i += 1) {
              this.audios[i].resume();
            }
          },
          setRate: function setRate(rateValue) {
            var i;
            var len = this.audios.length;

            for (i = 0; i < len; i += 1) {
              this.audios[i].setRate(rateValue);
            }
          },
          createAudio: function createAudio(assetPath) {
            if (this.audioFactory) {
              return this.audioFactory(assetPath);
            }

            if (window.Howl) {
              return new window.Howl({
                src: [assetPath]
              });
            }

            return {
              isPlaying: false,
              play: function play() {
                this.isPlaying = true;
              },
              seek: function seek() {
                this.isPlaying = false;
              },
              playing: function playing() {},
              rate: function rate() {},
              setVolume: function setVolume() {}
            };
          },
          setAudioFactory: function setAudioFactory(audioFactory) {
            this.audioFactory = audioFactory;
          },
          setVolume: function setVolume(value) {
            this._volume = value;

            this._updateVolume();
          },
          mute: function mute() {
            this._isMuted = true;

            this._updateVolume();
          },
          unmute: function unmute() {
            this._isMuted = false;

            this._updateVolume();
          },
          getVolume: function getVolume() {
            return this._volume;
          },
          _updateVolume: function _updateVolume() {
            var i;
            var len = this.audios.length;

            for (i = 0; i < len; i += 1) {
              this.audios[i].volume(this._volume * (this._isMuted ? 0 : 1));
            }
          }
        };
        return function () {
          return new AudioController();
        };
      }();

      var createTypedArray = function () {
        function createRegularArray(type, len) {
          var i = 0;
          var arr = [];
          var value;

          switch (type) {
            case 'int16':
            case 'uint8c':
              value = 1;
              break;

            default:
              value = 1.1;
              break;
          }

          for (i = 0; i < len; i += 1) {
            arr.push(value);
          }

          return arr;
        }

        function createTypedArrayFactory(type, len) {
          if (type === 'float32') {
            return new Float32Array(len);
          }

          if (type === 'int16') {
            return new Int16Array(len);
          }

          if (type === 'uint8c') {
            return new Uint8ClampedArray(len);
          }

          return createRegularArray(type, len);
        }

        if (typeof Uint8ClampedArray === 'function' && typeof Float32Array === 'function') {
          return createTypedArrayFactory;
        }

        return createRegularArray;
      }();

      function createSizedArray(len) {
        return Array.apply(null, {
          length: len
        });
      }

      function _typeof$6(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }
      var subframeEnabled = true;
      var expressionsPlugin = null;
      var idPrefix$1 = '';
      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      var bmPow = Math.pow;
      var bmSqrt = Math.sqrt;
      var bmFloor = Math.floor;
      var bmMax = Math.max;
      var bmMin = Math.min;
      var BMMath = {};

      (function () {
        var propertyNames = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'atan2', 'ceil', 'cbrt', 'expm1', 'clz32', 'cos', 'cosh', 'exp', 'floor', 'fround', 'hypot', 'imul', 'log', 'log1p', 'log2', 'log10', 'max', 'min', 'pow', 'random', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc', 'E', 'LN10', 'LN2', 'LOG10E', 'LOG2E', 'PI', 'SQRT1_2', 'SQRT2'];
        var i;
        var len = propertyNames.length;

        for (i = 0; i < len; i += 1) {
          BMMath[propertyNames[i]] = Math[propertyNames[i]];
        }
      })();

      BMMath.random = Math.random;

      BMMath.abs = function (val) {
        var tOfVal = _typeof$6(val);

        if (tOfVal === 'object' && val.length) {
          var absArr = createSizedArray(val.length);
          var i;
          var len = val.length;

          for (i = 0; i < len; i += 1) {
            absArr[i] = Math.abs(val[i]);
          }

          return absArr;
        }

        return Math.abs(val);
      };

      var defaultCurveSegments = 150;
      var degToRads = Math.PI / 180;
      var roundCorner = 0.5519;

      function styleDiv(element) {
        element.style.position = 'absolute';
        element.style.top = 0;
        element.style.left = 0;
        element.style.display = 'block';
        element.style.transformOrigin = '0 0';
        element.style.webkitTransformOrigin = '0 0';
        element.style.backfaceVisibility = 'visible';
        element.style.webkitBackfaceVisibility = 'visible';
        element.style.transformStyle = 'preserve-3d';
        element.style.webkitTransformStyle = 'preserve-3d';
        element.style.mozTransformStyle = 'preserve-3d';
      }

      function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
        this.type = type;
        this.currentTime = currentTime;
        this.totalTime = totalTime;
        this.direction = frameMultiplier < 0 ? -1 : 1;
      }

      function BMCompleteEvent(type, frameMultiplier) {
        this.type = type;
        this.direction = frameMultiplier < 0 ? -1 : 1;
      }

      function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {
        this.type = type;
        this.currentLoop = currentLoop;
        this.totalLoops = totalLoops;
        this.direction = frameMultiplier < 0 ? -1 : 1;
      }

      function BMSegmentStartEvent(type, firstFrame, totalFrames) {
        this.type = type;
        this.firstFrame = firstFrame;
        this.totalFrames = totalFrames;
      }

      function BMDestroyEvent(type, target) {
        this.type = type;
        this.target = target;
      }

      function BMRenderFrameErrorEvent(nativeError, currentTime) {
        this.type = 'renderFrameError';
        this.nativeError = nativeError;
        this.currentTime = currentTime;
      }

      function BMConfigErrorEvent(nativeError) {
        this.type = 'configError';
        this.nativeError = nativeError;
      }

      var createElementID = function () {
        var _count = 0;
        return function createID() {
          _count += 1;
          return idPrefix$1 + '__lottie_element_' + _count;
        };
      }();

      function HSVtoRGB(h, s, v) {
        var r;
        var g;
        var b;
        var i;
        var f;
        var p;
        var q;
        var t;
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);

        switch (i % 6) {
          case 0:
            r = v;
            g = t;
            b = p;
            break;

          case 1:
            r = q;
            g = v;
            b = p;
            break;

          case 2:
            r = p;
            g = v;
            b = t;
            break;

          case 3:
            r = p;
            g = q;
            b = v;
            break;

          case 4:
            r = t;
            g = p;
            b = v;
            break;

          case 5:
            r = v;
            g = p;
            b = q;
            break;
        }

        return [r, g, b];
      }

      function RGBtoHSV(r, g, b) {
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var d = max - min;
        var h;
        var s = max === 0 ? 0 : d / max;
        var v = max / 255;

        switch (max) {
          case min:
            h = 0;
            break;

          case r:
            h = g - b + d * (g < b ? 6 : 0);
            h /= 6 * d;
            break;

          case g:
            h = b - r + d * 2;
            h /= 6 * d;
            break;

          case b:
            h = r - g + d * 4;
            h /= 6 * d;
            break;
        }

        return [h, s, v];
      }

      function addSaturationToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[1] += offset;

        if (hsv[1] > 1) {
          hsv[1] = 1;
        } else if (hsv[1] <= 0) {
          hsv[1] = 0;
        }

        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
      }

      function addBrightnessToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[2] += offset;

        if (hsv[2] > 1) {
          hsv[2] = 1;
        } else if (hsv[2] < 0) {
          hsv[2] = 0;
        }

        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
      }

      function addHueToRGB(color, offset) {
        var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
        hsv[0] += offset / 360;

        if (hsv[0] > 1) {
          hsv[0] -= 1;
        } else if (hsv[0] < 0) {
          hsv[0] += 1;
        }

        return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
      }

      var rgbToHex = function () {
        var colorMap = [];
        var i;
        var hex;

        for (i = 0; i < 256; i += 1) {
          hex = i.toString(16);
          colorMap[i] = hex.length === 1 ? '0' + hex : hex;
        }

        return function (r, g, b) {
          if (r < 0) {
            r = 0;
          }

          if (g < 0) {
            g = 0;
          }

          if (b < 0) {
            b = 0;
          }

          return '#' + colorMap[r] + colorMap[g] + colorMap[b];
        };
      }();

      var setSubframeEnabled = function setSubframeEnabled(flag) {
        subframeEnabled = !!flag;
      };

      var getSubframeEnabled = function getSubframeEnabled() {
        return subframeEnabled;
      };

      var setExpressionsPlugin = function setExpressionsPlugin(value) {
        expressionsPlugin = value;
      };

      var getExpressionsPlugin = function getExpressionsPlugin() {
        return expressionsPlugin;
      };

      var setDefaultCurveSegments = function setDefaultCurveSegments(value) {
        defaultCurveSegments = value;
      };

      var getDefaultCurveSegments = function getDefaultCurveSegments() {
        return defaultCurveSegments;
      };

      var setIdPrefix = function setIdPrefix(value) {
        idPrefix$1 = value;
      };

      function createNS(type) {
        // return {appendChild:function(){},setAttribute:function(){},style:{}}
        return document.createElementNS(svgNS, type);
      }

      function _typeof$5(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }

      var dataManager = function () {
        var _counterId = 1;
        var processes = [];
        var workerFn;
        var workerInstance;
        var workerProxy = {
          onmessage: function onmessage() {},
          postMessage: function postMessage(path) {
            workerFn({
              data: path
            });
          }
        };
        var _workerSelf = {
          postMessage: function postMessage(data) {
            workerProxy.onmessage({
              data: data
            });
          }
        };

        function createWorker(fn) {
          if (window.Worker && window.Blob && getWebWorker()) {
            var blob = new Blob(['var _workerSelf = self; self.onmessage = ', fn.toString()], {
              type: 'text/javascript'
            }); // var blob = new Blob(['self.onmessage = ', fn.toString()], { type: 'text/javascript' });

            var url = URL.createObjectURL(blob);
            return new Worker(url);
          }

          workerFn = fn;
          return workerProxy;
        }

        function setupWorker() {
          if (!workerInstance) {
            workerInstance = createWorker(function workerStart(e) {
              function dataFunctionManager() {
                function completeLayers(layers, comps) {
                  var layerData;
                  var i;
                  var len = layers.length;
                  var j;
                  var jLen;
                  var k;
                  var kLen;

                  for (i = 0; i < len; i += 1) {
                    layerData = layers[i];

                    if ('ks' in layerData && !layerData.completed) {
                      layerData.completed = true;

                      if (layerData.tt) {
                        layers[i - 1].td = layerData.tt;
                      }

                      if (layerData.hasMask) {
                        var maskProps = layerData.masksProperties;
                        jLen = maskProps.length;

                        for (j = 0; j < jLen; j += 1) {
                          if (maskProps[j].pt.k.i) {
                            convertPathsToAbsoluteValues(maskProps[j].pt.k);
                          } else {
                            kLen = maskProps[j].pt.k.length;

                            for (k = 0; k < kLen; k += 1) {
                              if (maskProps[j].pt.k[k].s) {
                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
                              }

                              if (maskProps[j].pt.k[k].e) {
                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
                              }
                            }
                          }
                        }
                      }

                      if (layerData.ty === 0) {
                        layerData.layers = findCompLayers(layerData.refId, comps);
                        completeLayers(layerData.layers, comps);
                      } else if (layerData.ty === 4) {
                        completeShapes(layerData.shapes);
                      } else if (layerData.ty === 5) {
                        completeText(layerData);
                      }
                    }
                  }
                }

                function completeChars(chars, assets) {
                  if (chars) {
                    var i = 0;
                    var len = chars.length;

                    for (i = 0; i < len; i += 1) {
                      if (chars[i].t === 1) {
                        // var compData = findComp(chars[i].data.refId, assets);
                        chars[i].data.layers = findCompLayers(chars[i].data.refId, assets); // chars[i].data.ip = 0;
                        // chars[i].data.op = 99999;
                        // chars[i].data.st = 0;
                        // chars[i].data.sr = 1;
                        // chars[i].w = compData.w;
                        // chars[i].data.ks = {
                        //   a: { k: [0, 0, 0], a: 0 },
                        //   p: { k: [0, -compData.h, 0], a: 0 },
                        //   r: { k: 0, a: 0 },
                        //   s: { k: [100, 100], a: 0 },
                        //   o: { k: 100, a: 0 },
                        // };

                        completeLayers(chars[i].data.layers, assets);
                      }
                    }
                  }
                }

                function findComp(id, comps) {
                  var i = 0;
                  var len = comps.length;

                  while (i < len) {
                    if (comps[i].id === id) {
                      return comps[i];
                    }

                    i += 1;
                  }

                  return null;
                }

                function findCompLayers(id, comps) {
                  var comp = findComp(id, comps);

                  if (comp) {
                    if (!comp.layers.__used) {
                      comp.layers.__used = true;
                      return comp.layers;
                    }

                    return JSON.parse(JSON.stringify(comp.layers));
                  }

                  return null;
                }

                function completeShapes(arr) {
                  var i;
                  var len = arr.length;
                  var j;
                  var jLen;

                  for (i = len - 1; i >= 0; i -= 1) {
                    if (arr[i].ty === 'sh') {
                      if (arr[i].ks.k.i) {
                        convertPathsToAbsoluteValues(arr[i].ks.k);
                      } else {
                        jLen = arr[i].ks.k.length;

                        for (j = 0; j < jLen; j += 1) {
                          if (arr[i].ks.k[j].s) {
                            convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
                          }

                          if (arr[i].ks.k[j].e) {
                            convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
                          }
                        }
                      }
                    } else if (arr[i].ty === 'gr') {
                      completeShapes(arr[i].it);
                    }
                  }
                }

                function convertPathsToAbsoluteValues(path) {
                  var i;
                  var len = path.i.length;

                  for (i = 0; i < len; i += 1) {
                    path.i[i][0] += path.v[i][0];
                    path.i[i][1] += path.v[i][1];
                    path.o[i][0] += path.v[i][0];
                    path.o[i][1] += path.v[i][1];
                  }
                }

                function checkVersion(minimum, animVersionString) {
                  var animVersion = animVersionString ? animVersionString.split('.') : [100, 100, 100];

                  if (minimum[0] > animVersion[0]) {
                    return true;
                  }

                  if (animVersion[0] > minimum[0]) {
                    return false;
                  }

                  if (minimum[1] > animVersion[1]) {
                    return true;
                  }

                  if (animVersion[1] > minimum[1]) {
                    return false;
                  }

                  if (minimum[2] > animVersion[2]) {
                    return true;
                  }

                  if (animVersion[2] > minimum[2]) {
                    return false;
                  }

                  return null;
                }

                var checkText = function () {
                  var minimumVersion = [4, 4, 14];

                  function updateTextLayer(textLayer) {
                    var documentData = textLayer.t.d;
                    textLayer.t.d = {
                      k: [{
                        s: documentData,
                        t: 0
                      }]
                    };
                  }

                  function iterateLayers(layers) {
                    var i;
                    var len = layers.length;

                    for (i = 0; i < len; i += 1) {
                      if (layers[i].ty === 5) {
                        updateTextLayer(layers[i]);
                      }
                    }
                  }

                  return function (animationData) {
                    if (checkVersion(minimumVersion, animationData.v)) {
                      iterateLayers(animationData.layers);

                      if (animationData.assets) {
                        var i;
                        var len = animationData.assets.length;

                        for (i = 0; i < len; i += 1) {
                          if (animationData.assets[i].layers) {
                            iterateLayers(animationData.assets[i].layers);
                          }
                        }
                      }
                    }
                  };
                }();

                var checkChars = function () {
                  var minimumVersion = [4, 7, 99];
                  return function (animationData) {
                    if (animationData.chars && !checkVersion(minimumVersion, animationData.v)) {
                      var i;
                      var len = animationData.chars.length;

                      for (i = 0; i < len; i += 1) {
                        var charData = animationData.chars[i];

                        if (charData.data && charData.data.shapes) {
                          completeShapes(charData.data.shapes);
                          charData.data.ip = 0;
                          charData.data.op = 99999;
                          charData.data.st = 0;
                          charData.data.sr = 1;
                          charData.data.ks = {
                            p: {
                              k: [0, 0],
                              a: 0
                            },
                            s: {
                              k: [100, 100],
                              a: 0
                            },
                            a: {
                              k: [0, 0],
                              a: 0
                            },
                            r: {
                              k: 0,
                              a: 0
                            },
                            o: {
                              k: 100,
                              a: 0
                            }
                          };

                          if (!animationData.chars[i].t) {
                            charData.data.shapes.push({
                              ty: 'no'
                            });
                            charData.data.shapes[0].it.push({
                              p: {
                                k: [0, 0],
                                a: 0
                              },
                              s: {
                                k: [100, 100],
                                a: 0
                              },
                              a: {
                                k: [0, 0],
                                a: 0
                              },
                              r: {
                                k: 0,
                                a: 0
                              },
                              o: {
                                k: 100,
                                a: 0
                              },
                              sk: {
                                k: 0,
                                a: 0
                              },
                              sa: {
                                k: 0,
                                a: 0
                              },
                              ty: 'tr'
                            });
                          }
                        }
                      }
                    }
                  };
                }();

                var checkPathProperties = function () {
                  var minimumVersion = [5, 7, 15];

                  function updateTextLayer(textLayer) {
                    var pathData = textLayer.t.p;

                    if (typeof pathData.a === 'number') {
                      pathData.a = {
                        a: 0,
                        k: pathData.a
                      };
                    }

                    if (typeof pathData.p === 'number') {
                      pathData.p = {
                        a: 0,
                        k: pathData.p
                      };
                    }

                    if (typeof pathData.r === 'number') {
                      pathData.r = {
                        a: 0,
                        k: pathData.r
                      };
                    }
                  }

                  function iterateLayers(layers) {
                    var i;
                    var len = layers.length;

                    for (i = 0; i < len; i += 1) {
                      if (layers[i].ty === 5) {
                        updateTextLayer(layers[i]);
                      }
                    }
                  }

                  return function (animationData) {
                    if (checkVersion(minimumVersion, animationData.v)) {
                      iterateLayers(animationData.layers);

                      if (animationData.assets) {
                        var i;
                        var len = animationData.assets.length;

                        for (i = 0; i < len; i += 1) {
                          if (animationData.assets[i].layers) {
                            iterateLayers(animationData.assets[i].layers);
                          }
                        }
                      }
                    }
                  };
                }();

                var checkColors = function () {
                  var minimumVersion = [4, 1, 9];

                  function iterateShapes(shapes) {
                    var i;
                    var len = shapes.length;
                    var j;
                    var jLen;

                    for (i = 0; i < len; i += 1) {
                      if (shapes[i].ty === 'gr') {
                        iterateShapes(shapes[i].it);
                      } else if (shapes[i].ty === 'fl' || shapes[i].ty === 'st') {
                        if (shapes[i].c.k && shapes[i].c.k[0].i) {
                          jLen = shapes[i].c.k.length;

                          for (j = 0; j < jLen; j += 1) {
                            if (shapes[i].c.k[j].s) {
                              shapes[i].c.k[j].s[0] /= 255;
                              shapes[i].c.k[j].s[1] /= 255;
                              shapes[i].c.k[j].s[2] /= 255;
                              shapes[i].c.k[j].s[3] /= 255;
                            }

                            if (shapes[i].c.k[j].e) {
                              shapes[i].c.k[j].e[0] /= 255;
                              shapes[i].c.k[j].e[1] /= 255;
                              shapes[i].c.k[j].e[2] /= 255;
                              shapes[i].c.k[j].e[3] /= 255;
                            }
                          }
                        } else {
                          shapes[i].c.k[0] /= 255;
                          shapes[i].c.k[1] /= 255;
                          shapes[i].c.k[2] /= 255;
                          shapes[i].c.k[3] /= 255;
                        }
                      }
                    }
                  }

                  function iterateLayers(layers) {
                    var i;
                    var len = layers.length;

                    for (i = 0; i < len; i += 1) {
                      if (layers[i].ty === 4) {
                        iterateShapes(layers[i].shapes);
                      }
                    }
                  }

                  return function (animationData) {
                    if (checkVersion(minimumVersion, animationData.v)) {
                      iterateLayers(animationData.layers);

                      if (animationData.assets) {
                        var i;
                        var len = animationData.assets.length;

                        for (i = 0; i < len; i += 1) {
                          if (animationData.assets[i].layers) {
                            iterateLayers(animationData.assets[i].layers);
                          }
                        }
                      }
                    }
                  };
                }();

                var checkShapes = function () {
                  var minimumVersion = [4, 4, 18];

                  function completeClosingShapes(arr) {
                    var i;
                    var len = arr.length;
                    var j;
                    var jLen;

                    for (i = len - 1; i >= 0; i -= 1) {
                      if (arr[i].ty === 'sh') {
                        if (arr[i].ks.k.i) {
                          arr[i].ks.k.c = arr[i].closed;
                        } else {
                          jLen = arr[i].ks.k.length;

                          for (j = 0; j < jLen; j += 1) {
                            if (arr[i].ks.k[j].s) {
                              arr[i].ks.k[j].s[0].c = arr[i].closed;
                            }

                            if (arr[i].ks.k[j].e) {
                              arr[i].ks.k[j].e[0].c = arr[i].closed;
                            }
                          }
                        }
                      } else if (arr[i].ty === 'gr') {
                        completeClosingShapes(arr[i].it);
                      }
                    }
                  }

                  function iterateLayers(layers) {
                    var layerData;
                    var i;
                    var len = layers.length;
                    var j;
                    var jLen;
                    var k;
                    var kLen;

                    for (i = 0; i < len; i += 1) {
                      layerData = layers[i];

                      if (layerData.hasMask) {
                        var maskProps = layerData.masksProperties;
                        jLen = maskProps.length;

                        for (j = 0; j < jLen; j += 1) {
                          if (maskProps[j].pt.k.i) {
                            maskProps[j].pt.k.c = maskProps[j].cl;
                          } else {
                            kLen = maskProps[j].pt.k.length;

                            for (k = 0; k < kLen; k += 1) {
                              if (maskProps[j].pt.k[k].s) {
                                maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
                              }

                              if (maskProps[j].pt.k[k].e) {
                                maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
                              }
                            }
                          }
                        }
                      }

                      if (layerData.ty === 4) {
                        completeClosingShapes(layerData.shapes);
                      }
                    }
                  }

                  return function (animationData) {
                    if (checkVersion(minimumVersion, animationData.v)) {
                      iterateLayers(animationData.layers);

                      if (animationData.assets) {
                        var i;
                        var len = animationData.assets.length;

                        for (i = 0; i < len; i += 1) {
                          if (animationData.assets[i].layers) {
                            iterateLayers(animationData.assets[i].layers);
                          }
                        }
                      }
                    }
                  };
                }();

                function completeData(animationData) {
                  if (animationData.__complete) {
                    return;
                  }

                  checkColors(animationData);
                  checkText(animationData);
                  checkChars(animationData);
                  checkPathProperties(animationData);
                  checkShapes(animationData);
                  completeLayers(animationData.layers, animationData.assets);
                  completeChars(animationData.chars, animationData.assets);
                  animationData.__complete = true;
                }

                function completeText(data) {
                  if (data.t.a.length === 0 && !('m' in data.t.p)) ;
                }

                var moduleOb = {};
                moduleOb.completeData = completeData;
                moduleOb.checkColors = checkColors;
                moduleOb.checkChars = checkChars;
                moduleOb.checkPathProperties = checkPathProperties;
                moduleOb.checkShapes = checkShapes;
                moduleOb.completeLayers = completeLayers;
                return moduleOb;
              }

              if (!_workerSelf.dataManager) {
                _workerSelf.dataManager = dataFunctionManager();
              }

              if (!_workerSelf.assetLoader) {
                _workerSelf.assetLoader = function () {
                  function formatResponse(xhr) {
                    // using typeof doubles the time of execution of this method,
                    // so if available, it's better to use the header to validate the type
                    var contentTypeHeader = xhr.getResponseHeader('content-type');

                    if (contentTypeHeader && xhr.responseType === 'json' && contentTypeHeader.indexOf('json') !== -1) {
                      return xhr.response;
                    }

                    if (xhr.response && _typeof$5(xhr.response) === 'object') {
                      return xhr.response;
                    }

                    if (xhr.response && typeof xhr.response === 'string') {
                      return JSON.parse(xhr.response);
                    }

                    if (xhr.responseText) {
                      return JSON.parse(xhr.responseText);
                    }

                    return null;
                  }

                  function loadAsset(path, fullPath, callback, errorCallback) {
                    var response;
                    var xhr = new XMLHttpRequest(); // set responseType after calling open or IE will break.

                    try {
                      // This crashes on Android WebView prior to KitKat
                      xhr.responseType = 'json';
                    } catch (err) {} // eslint-disable-line no-empty


                    xhr.onreadystatechange = function () {
                      if (xhr.readyState === 4) {
                        if (xhr.status === 200) {
                          response = formatResponse(xhr);
                          callback(response);
                        } else {
                          try {
                            response = formatResponse(xhr);
                            callback(response);
                          } catch (err) {
                            if (errorCallback) {
                              errorCallback(err);
                            }
                          }
                        }
                      }
                    };

                    try {
                      xhr.open('GET', path, true);
                    } catch (error) {
                      xhr.open('GET', fullPath + '/' + path, true);
                    }

                    xhr.send();
                  }

                  return {
                    load: loadAsset
                  };
                }();
              }

              if (e.data.type === 'loadAnimation') {
                _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function (data) {
                  _workerSelf.dataManager.completeData(data);

                  _workerSelf.postMessage({
                    id: e.data.id,
                    payload: data,
                    status: 'success'
                  });
                }, function () {
                  _workerSelf.postMessage({
                    id: e.data.id,
                    status: 'error'
                  });
                });
              } else if (e.data.type === 'complete') {
                var animation = e.data.animation;

                _workerSelf.dataManager.completeData(animation);

                _workerSelf.postMessage({
                  id: e.data.id,
                  payload: animation,
                  status: 'success'
                });
              } else if (e.data.type === 'loadData') {
                _workerSelf.assetLoader.load(e.data.path, e.data.fullPath, function (data) {
                  _workerSelf.postMessage({
                    id: e.data.id,
                    payload: data,
                    status: 'success'
                  });
                }, function () {
                  _workerSelf.postMessage({
                    id: e.data.id,
                    status: 'error'
                  });
                });
              }
            });

            workerInstance.onmessage = function (event) {
              var data = event.data;
              var id = data.id;
              var process = processes[id];
              processes[id] = null;

              if (data.status === 'success') {
                process.onComplete(data.payload);
              } else if (process.onError) {
                process.onError();
              }
            };
          }
        }

        function createProcess(onComplete, onError) {
          _counterId += 1;
          var id = 'processId_' + _counterId;
          processes[id] = {
            onComplete: onComplete,
            onError: onError
          };
          return id;
        }

        function loadAnimation(path, onComplete, onError) {
          setupWorker();
          var processId = createProcess(onComplete, onError);
          workerInstance.postMessage({
            type: 'loadAnimation',
            path: path,
            fullPath: window.location.origin + window.location.pathname,
            id: processId
          });
        }

        function loadData(path, onComplete, onError) {
          setupWorker();
          var processId = createProcess(onComplete, onError);
          workerInstance.postMessage({
            type: 'loadData',
            path: path,
            fullPath: window.location.origin + window.location.pathname,
            id: processId
          });
        }

        function completeAnimation(anim, onComplete, onError) {
          setupWorker();
          var processId = createProcess(onComplete, onError);
          workerInstance.postMessage({
            type: 'complete',
            animation: anim,
            id: processId
          });
        }

        return {
          loadAnimation: loadAnimation,
          loadData: loadData,
          completeAnimation: completeAnimation
        };
      }();

      var ImagePreloader = function () {
        var proxyImage = function () {
          var canvas = createTag('canvas');
          canvas.width = 1;
          canvas.height = 1;
          var ctx = canvas.getContext('2d');
          ctx.fillStyle = 'rgba(0,0,0,0)';
          ctx.fillRect(0, 0, 1, 1);
          return canvas;
        }();

        function imageLoaded() {
          this.loadedAssets += 1;

          if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
            if (this.imagesLoadedCb) {
              this.imagesLoadedCb(null);
            }
          }
        }

        function footageLoaded() {
          this.loadedFootagesCount += 1;

          if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
            if (this.imagesLoadedCb) {
              this.imagesLoadedCb(null);
            }
          }
        }

        function getAssetsPath(assetData, assetsPath, originalPath) {
          var path = '';

          if (assetData.e) {
            path = assetData.p;
          } else if (assetsPath) {
            var imagePath = assetData.p;

            if (imagePath.indexOf('images/') !== -1) {
              imagePath = imagePath.split('/')[1];
            }

            path = assetsPath + imagePath;
          } else {
            path = originalPath;
            path += assetData.u ? assetData.u : '';
            path += assetData.p;
          }

          return path;
        }

        function testImageLoaded(img) {
          var _count = 0;
          var intervalId = setInterval(function () {
            var box = img.getBBox();

            if (box.width || _count > 500) {
              this._imageLoaded();

              clearInterval(intervalId);
            }

            _count += 1;
          }.bind(this), 50);
        }

        function createImageData(assetData) {
          var path = getAssetsPath(assetData, this.assetsPath, this.path);
          var img = createNS('image');

          if (isSafari) {
            this.testImageLoaded(img);
          } else {
            img.addEventListener('load', this._imageLoaded, false);
          }

          img.addEventListener('error', function () {
            ob.img = proxyImage;

            this._imageLoaded();
          }.bind(this), false);
          img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);

          if (this._elementHelper.append) {
            this._elementHelper.append(img);
          } else {
            this._elementHelper.appendChild(img);
          }

          var ob = {
            img: img,
            assetData: assetData
          };
          return ob;
        }

        function createImgData(assetData) {
          var path = getAssetsPath(assetData, this.assetsPath, this.path);
          var img = createTag('img');
          img.crossOrigin = 'anonymous';
          img.addEventListener('load', this._imageLoaded, false);
          img.addEventListener('error', function () {
            ob.img = proxyImage;

            this._imageLoaded();
          }.bind(this), false);
          img.src = path;
          var ob = {
            img: img,
            assetData: assetData
          };
          return ob;
        }

        function createFootageData(data) {
          var ob = {
            assetData: data
          };
          var path = getAssetsPath(data, this.assetsPath, this.path);
          dataManager.loadData(path, function (footageData) {
            ob.img = footageData;

            this._footageLoaded();
          }.bind(this), function () {
            ob.img = {};

            this._footageLoaded();
          }.bind(this));
          return ob;
        }

        function loadAssets(assets, cb) {
          this.imagesLoadedCb = cb;
          var i;
          var len = assets.length;

          for (i = 0; i < len; i += 1) {
            if (!assets[i].layers) {
              if (!assets[i].t || assets[i].t === 'seq') {
                this.totalImages += 1;
                this.images.push(this._createImageData(assets[i]));
              } else if (assets[i].t === 3) {
                this.totalFootages += 1;
                this.images.push(this.createFootageData(assets[i]));
              }
            }
          }
        }

        function setPath(path) {
          this.path = path || '';
        }

        function setAssetsPath(path) {
          this.assetsPath = path || '';
        }

        function getAsset(assetData) {
          var i = 0;
          var len = this.images.length;

          while (i < len) {
            if (this.images[i].assetData === assetData) {
              return this.images[i].img;
            }

            i += 1;
          }

          return null;
        }

        function destroy() {
          this.imagesLoadedCb = null;
          this.images.length = 0;
        }

        function loadedImages() {
          return this.totalImages === this.loadedAssets;
        }

        function loadedFootages() {
          return this.totalFootages === this.loadedFootagesCount;
        }

        function setCacheType(type, elementHelper) {
          if (type === 'svg') {
            this._elementHelper = elementHelper;
            this._createImageData = this.createImageData.bind(this);
          } else {
            this._createImageData = this.createImgData.bind(this);
          }
        }

        function ImagePreloaderFactory() {
          this._imageLoaded = imageLoaded.bind(this);
          this._footageLoaded = footageLoaded.bind(this);
          this.testImageLoaded = testImageLoaded.bind(this);
          this.createFootageData = createFootageData.bind(this);
          this.assetsPath = '';
          this.path = '';
          this.totalImages = 0;
          this.totalFootages = 0;
          this.loadedAssets = 0;
          this.loadedFootagesCount = 0;
          this.imagesLoadedCb = null;
          this.images = [];
        }

        ImagePreloaderFactory.prototype = {
          loadAssets: loadAssets,
          setAssetsPath: setAssetsPath,
          setPath: setPath,
          loadedImages: loadedImages,
          loadedFootages: loadedFootages,
          destroy: destroy,
          getAsset: getAsset,
          createImgData: createImgData,
          createImageData: createImageData,
          imageLoaded: imageLoaded,
          footageLoaded: footageLoaded,
          setCacheType: setCacheType
        };
        return ImagePreloaderFactory;
      }();

      function BaseEvent() {}

      BaseEvent.prototype = {
        triggerEvent: function triggerEvent(eventName, args) {
          if (this._cbs[eventName]) {
            var callbacks = this._cbs[eventName];

            for (var i = 0; i < callbacks.length; i += 1) {
              callbacks[i](args);
            }
          }
        },
        addEventListener: function addEventListener(eventName, callback) {
          if (!this._cbs[eventName]) {
            this._cbs[eventName] = [];
          }

          this._cbs[eventName].push(callback);

          return function () {
            this.removeEventListener(eventName, callback);
          }.bind(this);
        },
        removeEventListener: function removeEventListener(eventName, callback) {
          if (!callback) {
            this._cbs[eventName] = null;
          } else if (this._cbs[eventName]) {
            var i = 0;
            var len = this._cbs[eventName].length;

            while (i < len) {
              if (this._cbs[eventName][i] === callback) {
                this._cbs[eventName].splice(i, 1);

                i -= 1;
                len -= 1;
              }

              i += 1;
            }

            if (!this._cbs[eventName].length) {
              this._cbs[eventName] = null;
            }
          }
        }
      };

      var markerParser = function () {
        function parsePayloadLines(payload) {
          var lines = payload.split('\r\n');
          var keys = {};
          var line;
          var keysCount = 0;

          for (var i = 0; i < lines.length; i += 1) {
            line = lines[i].split(':');

            if (line.length === 2) {
              keys[line[0]] = line[1].trim();
              keysCount += 1;
            }
          }

          if (keysCount === 0) {
            throw new Error();
          }

          return keys;
        }

        return function (_markers) {
          var markers = [];

          for (var i = 0; i < _markers.length; i += 1) {
            var _marker = _markers[i];
            var markerData = {
              time: _marker.tm,
              duration: _marker.dr
            };

            try {
              markerData.payload = JSON.parse(_markers[i].cm);
            } catch (_) {
              try {
                markerData.payload = parsePayloadLines(_markers[i].cm);
              } catch (__) {
                markerData.payload = {
                  name: _markers[i].cm
                };
              }
            }

            markers.push(markerData);
          }

          return markers;
        };
      }();

      var ProjectInterface = function () {
        function registerComposition(comp) {
          this.compositions.push(comp);
        }

        return function () {
          function _thisProjectFunction(name) {
            var i = 0;
            var len = this.compositions.length;

            while (i < len) {
              if (this.compositions[i].data && this.compositions[i].data.nm === name) {
                if (this.compositions[i].prepareFrame && this.compositions[i].data.xt) {
                  this.compositions[i].prepareFrame(this.currentFrame);
                }

                return this.compositions[i].compInterface;
              }

              i += 1;
            }

            return null;
          }

          _thisProjectFunction.compositions = [];
          _thisProjectFunction.currentFrame = 0;
          _thisProjectFunction.registerComposition = registerComposition;
          return _thisProjectFunction;
        };
      }();

      var renderers = {};

      var registerRenderer = function registerRenderer(key, value) {
        renderers[key] = value;
      };

      function getRenderer(key) {
        return renderers[key];
      }

      function _typeof$4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

      var AnimationItem = function AnimationItem() {
        this._cbs = [];
        this.name = '';
        this.path = '';
        this.isLoaded = false;
        this.currentFrame = 0;
        this.currentRawFrame = 0;
        this.firstFrame = 0;
        this.totalFrames = 0;
        this.frameRate = 0;
        this.frameMult = 0;
        this.playSpeed = 1;
        this.playDirection = 1;
        this.playCount = 0;
        this.animationData = {};
        this.assets = [];
        this.isPaused = true;
        this.autoplay = false;
        this.loop = true;
        this.renderer = null;
        this.animationID = createElementID();
        this.assetsPath = '';
        this.timeCompleted = 0;
        this.segmentPos = 0;
        this.isSubframeEnabled = getSubframeEnabled();
        this.segments = [];
        this._idle = true;
        this._completedLoop = false;
        this.projectInterface = ProjectInterface();
        this.imagePreloader = new ImagePreloader();
        this.audioController = audioControllerFactory();
        this.markers = [];
        this.configAnimation = this.configAnimation.bind(this);
        this.onSetupError = this.onSetupError.bind(this);
        this.onSegmentComplete = this.onSegmentComplete.bind(this);
        this.drawnFrameEvent = new BMEnterFrameEvent('drawnFrame', 0, 0, 0);
      };

      extendPrototype([BaseEvent], AnimationItem);

      AnimationItem.prototype.setParams = function (params) {
        if (params.wrapper || params.container) {
          this.wrapper = params.wrapper || params.container;
        }

        var animType = 'svg';

        if (params.animType) {
          animType = params.animType;
        } else if (params.renderer) {
          animType = params.renderer;
        }

        var RendererClass = getRenderer(animType);
        this.renderer = new RendererClass(this, params.rendererSettings);
        this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
        this.renderer.setProjectInterface(this.projectInterface);
        this.animType = animType;

        if (params.loop === '' || params.loop === null || params.loop === undefined || params.loop === true) {
          this.loop = true;
        } else if (params.loop === false) {
          this.loop = false;
        } else {
          this.loop = parseInt(params.loop, 10);
        }

        this.autoplay = 'autoplay' in params ? params.autoplay : true;
        this.name = params.name ? params.name : '';
        this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, 'autoloadSegments') ? params.autoloadSegments : true;
        this.assetsPath = params.assetsPath;
        this.initialSegment = params.initialSegment;

        if (params.audioFactory) {
          this.audioController.setAudioFactory(params.audioFactory);
        }

        if (params.animationData) {
          this.setupAnimation(params.animationData);
        } else if (params.path) {
          if (params.path.lastIndexOf('\\') !== -1) {
            this.path = params.path.substr(0, params.path.lastIndexOf('\\') + 1);
          } else {
            this.path = params.path.substr(0, params.path.lastIndexOf('/') + 1);
          }

          this.fileName = params.path.substr(params.path.lastIndexOf('/') + 1);
          this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf('.json'));
          dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);
        }
      };

      AnimationItem.prototype.onSetupError = function () {
        this.trigger('data_failed');
      };

      AnimationItem.prototype.setupAnimation = function (data) {
        dataManager.completeAnimation(data, this.configAnimation);
      };

      AnimationItem.prototype.setData = function (wrapper, animationData) {
        if (animationData) {
          if (_typeof$4(animationData) !== 'object') {
            animationData = JSON.parse(animationData);
          }
        }

        var params = {
          wrapper: wrapper,
          animationData: animationData
        };
        var wrapperAttributes = wrapper.attributes;
        params.path = wrapperAttributes.getNamedItem('data-animation-path') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-animation-path').value : wrapperAttributes.getNamedItem('data-bm-path') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-bm-path').value : wrapperAttributes.getNamedItem('bm-path') ? wrapperAttributes.getNamedItem('bm-path').value : '';
        params.animType = wrapperAttributes.getNamedItem('data-anim-type') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-anim-type').value : wrapperAttributes.getNamedItem('data-bm-type') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-bm-type').value : wrapperAttributes.getNamedItem('bm-type') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('bm-type').value : wrapperAttributes.getNamedItem('data-bm-renderer') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-bm-renderer').value : wrapperAttributes.getNamedItem('bm-renderer') ? wrapperAttributes.getNamedItem('bm-renderer').value : 'canvas';
        var loop = wrapperAttributes.getNamedItem('data-anim-loop') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-anim-loop').value : wrapperAttributes.getNamedItem('data-bm-loop') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-bm-loop').value : wrapperAttributes.getNamedItem('bm-loop') ? wrapperAttributes.getNamedItem('bm-loop').value : '';

        if (loop === 'false') {
          params.loop = false;
        } else if (loop === 'true') {
          params.loop = true;
        } else if (loop !== '') {
          params.loop = parseInt(loop, 10);
        }

        var autoplay = wrapperAttributes.getNamedItem('data-anim-autoplay') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-anim-autoplay').value : wrapperAttributes.getNamedItem('data-bm-autoplay') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-bm-autoplay').value : wrapperAttributes.getNamedItem('bm-autoplay') ? wrapperAttributes.getNamedItem('bm-autoplay').value : true;
        params.autoplay = autoplay !== 'false';
        params.name = wrapperAttributes.getNamedItem('data-name') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-name').value : wrapperAttributes.getNamedItem('data-bm-name') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-bm-name').value : wrapperAttributes.getNamedItem('bm-name') ? wrapperAttributes.getNamedItem('bm-name').value : '';
        var prerender = wrapperAttributes.getNamedItem('data-anim-prerender') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-anim-prerender').value : wrapperAttributes.getNamedItem('data-bm-prerender') // eslint-disable-line no-nested-ternary
        ? wrapperAttributes.getNamedItem('data-bm-prerender').value : wrapperAttributes.getNamedItem('bm-prerender') ? wrapperAttributes.getNamedItem('bm-prerender').value : '';

        if (prerender === 'false') {
          params.prerender = false;
        }

        this.setParams(params);
      };

      AnimationItem.prototype.includeLayers = function (data) {
        if (data.op > this.animationData.op) {
          this.animationData.op = data.op;
          this.totalFrames = Math.floor(data.op - this.animationData.ip);
        }

        var layers = this.animationData.layers;
        var i;
        var len = layers.length;
        var newLayers = data.layers;
        var j;
        var jLen = newLayers.length;

        for (j = 0; j < jLen; j += 1) {
          i = 0;

          while (i < len) {
            if (layers[i].id === newLayers[j].id) {
              layers[i] = newLayers[j];
              break;
            }

            i += 1;
          }
        }

        if (data.chars || data.fonts) {
          this.renderer.globalData.fontManager.addChars(data.chars);
          this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
        }

        if (data.assets) {
          len = data.assets.length;

          for (i = 0; i < len; i += 1) {
            this.animationData.assets.push(data.assets[i]);
          }
        }

        this.animationData.__complete = false;
        dataManager.completeAnimation(this.animationData, this.onSegmentComplete);
      };

      AnimationItem.prototype.onSegmentComplete = function (data) {
        this.animationData = data;
        var expressionsPlugin = getExpressionsPlugin();

        if (expressionsPlugin) {
          expressionsPlugin.initExpressions(this);
        }

        this.loadNextSegment();
      };

      AnimationItem.prototype.loadNextSegment = function () {
        var segments = this.animationData.segments;

        if (!segments || segments.length === 0 || !this.autoloadSegments) {
          this.trigger('data_ready');
          this.timeCompleted = this.totalFrames;
          return;
        }

        var segment = segments.shift();
        this.timeCompleted = segment.time * this.frameRate;
        var segmentPath = this.path + this.fileName + '_' + this.segmentPos + '.json';
        this.segmentPos += 1;
        dataManager.loadData(segmentPath, this.includeLayers.bind(this), function () {
          this.trigger('data_failed');
        }.bind(this));
      };

      AnimationItem.prototype.loadSegments = function () {
        var segments = this.animationData.segments;

        if (!segments) {
          this.timeCompleted = this.totalFrames;
        }

        this.loadNextSegment();
      };

      AnimationItem.prototype.imagesLoaded = function () {
        this.trigger('loaded_images');
        this.checkLoaded();
      };

      AnimationItem.prototype.preloadImages = function () {
        this.imagePreloader.setAssetsPath(this.assetsPath);
        this.imagePreloader.setPath(this.path);
        this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
      };

      AnimationItem.prototype.configAnimation = function (animData) {
        if (!this.renderer) {
          return;
        }

        try {
          this.animationData = animData;

          if (this.initialSegment) {
            this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
            this.firstFrame = Math.round(this.initialSegment[0]);
          } else {
            this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
            this.firstFrame = Math.round(this.animationData.ip);
          }

          this.renderer.configAnimation(animData);

          if (!animData.assets) {
            animData.assets = [];
          }

          this.assets = this.animationData.assets;
          this.frameRate = this.animationData.fr;
          this.frameMult = this.animationData.fr / 1000;
          this.renderer.searchExtraCompositions(animData.assets);
          this.markers = markerParser(animData.markers || []);
          this.trigger('config_ready');
          this.preloadImages();
          this.loadSegments();
          this.updaFrameModifier();
          this.waitForFontsLoaded();

          if (this.isPaused) {
            this.audioController.pause();
          }
        } catch (error) {
          this.triggerConfigError(error);
        }
      };

      AnimationItem.prototype.waitForFontsLoaded = function () {
        if (!this.renderer) {
          return;
        }

        if (this.renderer.globalData.fontManager.isLoaded) {
          this.checkLoaded();
        } else {
          setTimeout(this.waitForFontsLoaded.bind(this), 20);
        }
      };

      AnimationItem.prototype.checkLoaded = function () {
        if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== 'canvas') && this.imagePreloader.loadedFootages()) {
          this.isLoaded = true;
          var expressionsPlugin = getExpressionsPlugin();

          if (expressionsPlugin) {
            expressionsPlugin.initExpressions(this);
          }

          this.renderer.initItems();
          setTimeout(function () {
            this.trigger('DOMLoaded');
          }.bind(this), 0);
          this.gotoFrame();

          if (this.autoplay) {
            this.play();
          }
        }
      };

      AnimationItem.prototype.resize = function () {
        this.renderer.updateContainerSize();
      };

      AnimationItem.prototype.setSubframe = function (flag) {
        this.isSubframeEnabled = !!flag;
      };

      AnimationItem.prototype.gotoFrame = function () {
        this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame; // eslint-disable-line no-bitwise

        if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
          this.currentFrame = this.timeCompleted;
        }

        this.trigger('enterFrame');
        this.renderFrame();
        this.trigger('drawnFrame');
      };

      AnimationItem.prototype.renderFrame = function () {
        if (this.isLoaded === false || !this.renderer) {
          return;
        }

        try {
          this.renderer.renderFrame(this.currentFrame + this.firstFrame);
        } catch (error) {
          this.triggerRenderFrameError(error);
        }
      };

      AnimationItem.prototype.play = function (name) {
        if (name && this.name !== name) {
          return;
        }

        if (this.isPaused === true) {
          this.isPaused = false;
          this.trigger('_pause');
          this.audioController.resume();

          if (this._idle) {
            this._idle = false;
            this.trigger('_active');
          }
        }
      };

      AnimationItem.prototype.pause = function (name) {
        if (name && this.name !== name) {
          return;
        }

        if (this.isPaused === false) {
          this.isPaused = true;
          this.trigger('_play');
          this._idle = true;
          this.trigger('_idle');
          this.audioController.pause();
        }
      };

      AnimationItem.prototype.togglePause = function (name) {
        if (name && this.name !== name) {
          return;
        }

        if (this.isPaused === true) {
          this.play();
        } else {
          this.pause();
        }
      };

      AnimationItem.prototype.stop = function (name) {
        if (name && this.name !== name) {
          return;
        }

        this.pause();
        this.playCount = 0;
        this._completedLoop = false;
        this.setCurrentRawFrameValue(0);
      };

      AnimationItem.prototype.getMarkerData = function (markerName) {
        var marker;

        for (var i = 0; i < this.markers.length; i += 1) {
          marker = this.markers[i];

          if (marker.payload && marker.payload.name === markerName) {
            return marker;
          }
        }

        return null;
      };

      AnimationItem.prototype.goToAndStop = function (value, isFrame, name) {
        if (name && this.name !== name) {
          return;
        }

        var numValue = Number(value);

        if (isNaN(numValue)) {
          var marker = this.getMarkerData(value);

          if (marker) {
            this.goToAndStop(marker.time, true);
          }
        } else if (isFrame) {
          this.setCurrentRawFrameValue(value);
        } else {
          this.setCurrentRawFrameValue(value * this.frameModifier);
        }

        this.pause();
      };

      AnimationItem.prototype.goToAndPlay = function (value, isFrame, name) {
        if (name && this.name !== name) {
          return;
        }

        var numValue = Number(value);

        if (isNaN(numValue)) {
          var marker = this.getMarkerData(value);

          if (marker) {
            if (!marker.duration) {
              this.goToAndStop(marker.time, true);
            } else {
              this.playSegments([marker.time, marker.time + marker.duration], true);
            }
          }
        } else {
          this.goToAndStop(numValue, isFrame, name);
        }

        this.play();
      };

      AnimationItem.prototype.advanceTime = function (value) {
        if (this.isPaused === true || this.isLoaded === false) {
          return;
        }

        var nextValue = this.currentRawFrame + value * this.frameModifier;
        var _isComplete = false; // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
        // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.

        if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
          if (!this.loop || this.playCount === this.loop) {
            if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
              _isComplete = true;
              nextValue = this.totalFrames - 1;
            }
          } else if (nextValue >= this.totalFrames) {
            this.playCount += 1;

            if (!this.checkSegments(nextValue % this.totalFrames)) {
              this.setCurrentRawFrameValue(nextValue % this.totalFrames);
              this._completedLoop = true;
              this.trigger('loopComplete');
            }
          } else {
            this.setCurrentRawFrameValue(nextValue);
          }
        } else if (nextValue < 0) {
          if (!this.checkSegments(nextValue % this.totalFrames)) {
            if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
              // eslint-disable-line no-plusplus
              this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);

              if (!this._completedLoop) {
                this._completedLoop = true;
              } else {
                this.trigger('loopComplete');
              }
            } else {
              _isComplete = true;
              nextValue = 0;
            }
          }
        } else {
          this.setCurrentRawFrameValue(nextValue);
        }

        if (_isComplete) {
          this.setCurrentRawFrameValue(nextValue);
          this.pause();
          this.trigger('complete');
        }
      };

      AnimationItem.prototype.adjustSegment = function (arr, offset) {
        this.playCount = 0;

        if (arr[1] < arr[0]) {
          if (this.frameModifier > 0) {
            if (this.playSpeed < 0) {
              this.setSpeed(-this.playSpeed);
            } else {
              this.setDirection(-1);
            }
          }

          this.totalFrames = arr[0] - arr[1];
          this.timeCompleted = this.totalFrames;
          this.firstFrame = arr[1];
          this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);
        } else if (arr[1] > arr[0]) {
          if (this.frameModifier < 0) {
            if (this.playSpeed < 0) {
              this.setSpeed(-this.playSpeed);
            } else {
              this.setDirection(1);
            }
          }

          this.totalFrames = arr[1] - arr[0];
          this.timeCompleted = this.totalFrames;
          this.firstFrame = arr[0];
          this.setCurrentRawFrameValue(0.001 + offset);
        }

        this.trigger('segmentStart');
      };

      AnimationItem.prototype.setSegment = function (init, end) {
        var pendingFrame = -1;

        if (this.isPaused) {
          if (this.currentRawFrame + this.firstFrame < init) {
            pendingFrame = init;
          } else if (this.currentRawFrame + this.firstFrame > end) {
            pendingFrame = end - init;
          }
        }

        this.firstFrame = init;
        this.totalFrames = end - init;
        this.timeCompleted = this.totalFrames;

        if (pendingFrame !== -1) {
          this.goToAndStop(pendingFrame, true);
        }
      };

      AnimationItem.prototype.playSegments = function (arr, forceFlag) {
        if (forceFlag) {
          this.segments.length = 0;
        }

        if (_typeof$4(arr[0]) === 'object') {
          var i;
          var len = arr.length;

          for (i = 0; i < len; i += 1) {
            this.segments.push(arr[i]);
          }
        } else {
          this.segments.push(arr);
        }

        if (this.segments.length && forceFlag) {
          this.adjustSegment(this.segments.shift(), 0);
        }

        if (this.isPaused) {
          this.play();
        }
      };

      AnimationItem.prototype.resetSegments = function (forceFlag) {
        this.segments.length = 0;
        this.segments.push([this.animationData.ip, this.animationData.op]);

        if (forceFlag) {
          this.checkSegments(0);
        }
      };

      AnimationItem.prototype.checkSegments = function (offset) {
        if (this.segments.length) {
          this.adjustSegment(this.segments.shift(), offset);
          return true;
        }

        return false;
      };

      AnimationItem.prototype.destroy = function (name) {
        if (name && this.name !== name || !this.renderer) {
          return;
        }

        this.renderer.destroy();
        this.imagePreloader.destroy();
        this.trigger('destroy');
        this._cbs = null;
        this.onEnterFrame = null;
        this.onLoopComplete = null;
        this.onComplete = null;
        this.onSegmentStart = null;
        this.onDestroy = null;
        this.renderer = null;
        this.renderer = null;
        this.imagePreloader = null;
        this.projectInterface = null;
      };

      AnimationItem.prototype.setCurrentRawFrameValue = function (value) {
        this.currentRawFrame = value;
        this.gotoFrame();
      };

      AnimationItem.prototype.setSpeed = function (val) {
        this.playSpeed = val;
        this.updaFrameModifier();
      };

      AnimationItem.prototype.setDirection = function (val) {
        this.playDirection = val < 0 ? -1 : 1;
        this.updaFrameModifier();
      };

      AnimationItem.prototype.setVolume = function (val, name) {
        if (name && this.name !== name) {
          return;
        }

        this.audioController.setVolume(val);
      };

      AnimationItem.prototype.getVolume = function () {
        return this.audioController.getVolume();
      };

      AnimationItem.prototype.mute = function (name) {
        if (name && this.name !== name) {
          return;
        }

        this.audioController.mute();
      };

      AnimationItem.prototype.unmute = function (name) {
        if (name && this.name !== name) {
          return;
        }

        this.audioController.unmute();
      };

      AnimationItem.prototype.updaFrameModifier = function () {
        this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
        this.audioController.setRate(this.playSpeed * this.playDirection);
      };

      AnimationItem.prototype.getPath = function () {
        return this.path;
      };

      AnimationItem.prototype.getAssetsPath = function (assetData) {
        var path = '';

        if (assetData.e) {
          path = assetData.p;
        } else if (this.assetsPath) {
          var imagePath = assetData.p;

          if (imagePath.indexOf('images/') !== -1) {
            imagePath = imagePath.split('/')[1];
          }

          path = this.assetsPath + imagePath;
        } else {
          path = this.path;
          path += assetData.u ? assetData.u : '';
          path += assetData.p;
        }

        return path;
      };

      AnimationItem.prototype.getAssetData = function (id) {
        var i = 0;
        var len = this.assets.length;

        while (i < len) {
          if (id === this.assets[i].id) {
            return this.assets[i];
          }

          i += 1;
        }

        return null;
      };

      AnimationItem.prototype.hide = function () {
        this.renderer.hide();
      };

      AnimationItem.prototype.show = function () {
        this.renderer.show();
      };

      AnimationItem.prototype.getDuration = function (isFrame) {
        return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
      };

      AnimationItem.prototype.updateDocumentData = function (path, documentData, index) {
        try {
          var element = this.renderer.getElementByPath(path);
          element.updateDocumentData(documentData, index);
        } catch (error) {// TODO: decide how to handle catch case
        }
      };

      AnimationItem.prototype.trigger = function (name) {
        if (this._cbs && this._cbs[name]) {
          switch (name) {
            case 'enterFrame':
              this.triggerEvent(name, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameModifier));
              break;

            case 'drawnFrame':
              this.drawnFrameEvent.currentTime = this.currentFrame;
              this.drawnFrameEvent.totalTime = this.totalFrames;
              this.drawnFrameEvent.direction = this.frameModifier;
              this.triggerEvent(name, this.drawnFrameEvent);
              break;

            case 'loopComplete':
              this.triggerEvent(name, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
              break;

            case 'complete':
              this.triggerEvent(name, new BMCompleteEvent(name, this.frameMult));
              break;

            case 'segmentStart':
              this.triggerEvent(name, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
              break;

            case 'destroy':
              this.triggerEvent(name, new BMDestroyEvent(name, this));
              break;

            default:
              this.triggerEvent(name);
          }
        }

        if (name === 'enterFrame' && this.onEnterFrame) {
          this.onEnterFrame.call(this, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameMult));
        }

        if (name === 'loopComplete' && this.onLoopComplete) {
          this.onLoopComplete.call(this, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
        }

        if (name === 'complete' && this.onComplete) {
          this.onComplete.call(this, new BMCompleteEvent(name, this.frameMult));
        }

        if (name === 'segmentStart' && this.onSegmentStart) {
          this.onSegmentStart.call(this, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
        }

        if (name === 'destroy' && this.onDestroy) {
          this.onDestroy.call(this, new BMDestroyEvent(name, this));
        }
      };

      AnimationItem.prototype.triggerRenderFrameError = function (nativeError) {
        var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
        this.triggerEvent('error', error);

        if (this.onError) {
          this.onError.call(this, error);
        }
      };

      AnimationItem.prototype.triggerConfigError = function (nativeError) {
        var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
        this.triggerEvent('error', error);

        if (this.onError) {
          this.onError.call(this, error);
        }
      };

      var animationManager = function () {
        var moduleOb = {};
        var registeredAnimations = [];
        var initTime = 0;
        var len = 0;
        var playingAnimationsNum = 0;
        var _stopped = true;
        var _isFrozen = false;

        function removeElement(ev) {
          var i = 0;
          var animItem = ev.target;

          while (i < len) {
            if (registeredAnimations[i].animation === animItem) {
              registeredAnimations.splice(i, 1);
              i -= 1;
              len -= 1;

              if (!animItem.isPaused) {
                subtractPlayingCount();
              }
            }

            i += 1;
          }
        }

        function registerAnimation(element, animationData) {
          if (!element) {
            return null;
          }

          var i = 0;

          while (i < len) {
            if (registeredAnimations[i].elem === element && registeredAnimations[i].elem !== null) {
              return registeredAnimations[i].animation;
            }

            i += 1;
          }

          var animItem = new AnimationItem();
          setupAnimation(animItem, element);
          animItem.setData(element, animationData);
          return animItem;
        }

        function getRegisteredAnimations() {
          var i;
          var lenAnims = registeredAnimations.length;
          var animations = [];

          for (i = 0; i < lenAnims; i += 1) {
            animations.push(registeredAnimations[i].animation);
          }

          return animations;
        }

        function addPlayingCount() {
          playingAnimationsNum += 1;
          activate();
        }

        function subtractPlayingCount() {
          playingAnimationsNum -= 1;
        }

        function setupAnimation(animItem, element) {
          animItem.addEventListener('destroy', removeElement);
          animItem.addEventListener('_active', addPlayingCount);
          animItem.addEventListener('_idle', subtractPlayingCount);
          registeredAnimations.push({
            elem: element,
            animation: animItem
          });
          len += 1;
        }

        function loadAnimation(params) {
          var animItem = new AnimationItem();
          setupAnimation(animItem, null);
          animItem.setParams(params);
          return animItem;
        }

        function setSpeed(val, animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.setSpeed(val, animation);
          }
        }

        function setDirection(val, animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.setDirection(val, animation);
          }
        }

        function play(animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.play(animation);
          }
        }

        function resume(nowTime) {
          var elapsedTime = nowTime - initTime;
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.advanceTime(elapsedTime);
          }

          initTime = nowTime;

          if (playingAnimationsNum && !_isFrozen) {
            window.requestAnimationFrame(resume);
          } else {
            _stopped = true;
          }
        }

        function first(nowTime) {
          initTime = nowTime;
          window.requestAnimationFrame(resume);
        }

        function pause(animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.pause(animation);
          }
        }

        function goToAndStop(value, isFrame, animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.goToAndStop(value, isFrame, animation);
          }
        }

        function stop(animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.stop(animation);
          }
        }

        function togglePause(animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.togglePause(animation);
          }
        }

        function destroy(animation) {
          var i;

          for (i = len - 1; i >= 0; i -= 1) {
            registeredAnimations[i].animation.destroy(animation);
          }
        }

        function searchAnimations(animationData, standalone, renderer) {
          var animElements = [].concat([].slice.call(document.getElementsByClassName('lottie')), [].slice.call(document.getElementsByClassName('bodymovin')));
          var i;
          var lenAnims = animElements.length;

          for (i = 0; i < lenAnims; i += 1) {
            if (renderer) {
              animElements[i].setAttribute('data-bm-type', renderer);
            }

            registerAnimation(animElements[i], animationData);
          }

          if (standalone && lenAnims === 0) {
            if (!renderer) {
              renderer = 'svg';
            }

            var body = document.getElementsByTagName('body')[0];
            body.innerText = '';
            var div = createTag('div');
            div.style.width = '100%';
            div.style.height = '100%';
            div.setAttribute('data-bm-type', renderer);
            body.appendChild(div);
            registerAnimation(div, animationData);
          }
        }

        function resize() {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.resize();
          }
        }

        function activate() {
          if (!_isFrozen && playingAnimationsNum) {
            if (_stopped) {
              window.requestAnimationFrame(first);
              _stopped = false;
            }
          }
        }

        function freeze() {
          _isFrozen = true;
        }

        function unfreeze() {
          _isFrozen = false;
          activate();
        }

        function setVolume(val, animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.setVolume(val, animation);
          }
        }

        function mute(animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.mute(animation);
          }
        }

        function unmute(animation) {
          var i;

          for (i = 0; i < len; i += 1) {
            registeredAnimations[i].animation.unmute(animation);
          }
        }

        moduleOb.registerAnimation = registerAnimation;
        moduleOb.loadAnimation = loadAnimation;
        moduleOb.setSpeed = setSpeed;
        moduleOb.setDirection = setDirection;
        moduleOb.play = play;
        moduleOb.pause = pause;
        moduleOb.stop = stop;
        moduleOb.togglePause = togglePause;
        moduleOb.searchAnimations = searchAnimations;
        moduleOb.resize = resize; // moduleOb.start = start;

        moduleOb.goToAndStop = goToAndStop;
        moduleOb.destroy = destroy;
        moduleOb.freeze = freeze;
        moduleOb.unfreeze = unfreeze;
        moduleOb.setVolume = setVolume;
        moduleOb.mute = mute;
        moduleOb.unmute = unmute;
        moduleOb.getRegisteredAnimations = getRegisteredAnimations;
        return moduleOb;
      }();

      /* eslint-disable */
      var BezierFactory = function () {
        /**
           * BezierEasing - use bezier curve for transition easing function
           * by Gaëtan Renaudeau 2014 - 2015 – MIT License
           *
           * Credits: is based on Firefox's nsSMILKeySpline.cpp
           * Usage:
           * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
           * spline.get(x) => returns the easing value | x must be in [0, 1] range
           *
           */
        var ob = {};
        ob.getBezierEasing = getBezierEasing;
        var beziers = {};

        function getBezierEasing(a, b, c, d, nm) {
          var str = nm || ('bez_' + a + '_' + b + '_' + c + '_' + d).replace(/\./g, 'p');

          if (beziers[str]) {
            return beziers[str];
          }

          var bezEasing = new BezierEasing([a, b, c, d]);
          beziers[str] = bezEasing;
          return bezEasing;
        } // These values are established by empiricism with tests (tradeoff: performance VS precision)


        var NEWTON_ITERATIONS = 4;
        var NEWTON_MIN_SLOPE = 0.001;
        var SUBDIVISION_PRECISION = 0.0000001;
        var SUBDIVISION_MAX_ITERATIONS = 10;
        var kSplineTableSize = 11;
        var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
        var float32ArraySupported = typeof Float32Array === 'function';

        function A(aA1, aA2) {
          return 1.0 - 3.0 * aA2 + 3.0 * aA1;
        }

        function B(aA1, aA2) {
          return 3.0 * aA2 - 6.0 * aA1;
        }

        function C(aA1) {
          return 3.0 * aA1;
        } // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.


        function calcBezier(aT, aA1, aA2) {
          return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
        } // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.


        function getSlope(aT, aA1, aA2) {
          return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
        }

        function binarySubdivide(aX, aA, aB, mX1, mX2) {
          var currentX,
              currentT,
              i = 0;

          do {
            currentT = aA + (aB - aA) / 2.0;
            currentX = calcBezier(currentT, mX1, mX2) - aX;

            if (currentX > 0.0) {
              aB = currentT;
            } else {
              aA = currentT;
            }
          } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

          return currentT;
        }

        function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
          for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
            var currentSlope = getSlope(aGuessT, mX1, mX2);
            if (currentSlope === 0.0) return aGuessT;
            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
            aGuessT -= currentX / currentSlope;
          }

          return aGuessT;
        }
        /**
           * points is an array of [ mX1, mY1, mX2, mY2 ]
           */


        function BezierEasing(points) {
          this._p = points;
          this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
          this._precomputed = false;
          this.get = this.get.bind(this);
        }

        BezierEasing.prototype = {
          get: function get(x) {
            var mX1 = this._p[0],
                mY1 = this._p[1],
                mX2 = this._p[2],
                mY2 = this._p[3];
            if (!this._precomputed) this._precompute();
            if (mX1 === mY1 && mX2 === mY2) return x; // linear
            // Because JavaScript number are imprecise, we should guarantee the extremes are right.

            if (x === 0) return 0;
            if (x === 1) return 1;
            return calcBezier(this._getTForX(x), mY1, mY2);
          },
          // Private part
          _precompute: function _precompute() {
            var mX1 = this._p[0],
                mY1 = this._p[1],
                mX2 = this._p[2],
                mY2 = this._p[3];
            this._precomputed = true;

            if (mX1 !== mY1 || mX2 !== mY2) {
              this._calcSampleValues();
            }
          },
          _calcSampleValues: function _calcSampleValues() {
            var mX1 = this._p[0],
                mX2 = this._p[2];

            for (var i = 0; i < kSplineTableSize; ++i) {
              this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
            }
          },

          /**
               * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
               */
          _getTForX: function _getTForX(aX) {
            var mX1 = this._p[0],
                mX2 = this._p[2],
                mSampleValues = this._mSampleValues;
            var intervalStart = 0.0;
            var currentSample = 1;
            var lastSample = kSplineTableSize - 1;

            for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
              intervalStart += kSampleStepSize;
            }

            --currentSample; // Interpolate to provide an initial guess for t

            var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
            var guessForT = intervalStart + dist * kSampleStepSize;
            var initialSlope = getSlope(guessForT, mX1, mX2);

            if (initialSlope >= NEWTON_MIN_SLOPE) {
              return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
            }

            if (initialSlope === 0.0) {
              return guessForT;
            }

            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
          }
        };
        return ob;
      }();

      var pooling = function () {
        function _double(arr) {
          return arr.concat(createSizedArray(arr.length));
        }

        return {
          "double": _double
        };
      }();

      var poolFactory = function () {
        return function (initialLength, _create, _release) {
          var _length = 0;
          var _maxLength = initialLength;
          var pool = createSizedArray(_maxLength);
          var ob = {
            newElement: newElement,
            release: release
          };

          function newElement() {
            var element;

            if (_length) {
              _length -= 1;
              element = pool[_length];
            } else {
              element = _create();
            }

            return element;
          }

          function release(element) {
            if (_length === _maxLength) {
              pool = pooling["double"](pool);
              _maxLength *= 2;
            }

            if (_release) {
              _release(element);
            }

            pool[_length] = element;
            _length += 1;
          }

          return ob;
        };
      }();

      var bezierLengthPool = function () {
        function create() {
          return {
            addedLength: 0,
            percents: createTypedArray('float32', getDefaultCurveSegments()),
            lengths: createTypedArray('float32', getDefaultCurveSegments())
          };
        }

        return poolFactory(8, create);
      }();

      var segmentsLengthPool = function () {
        function create() {
          return {
            lengths: [],
            totalLength: 0
          };
        }

        function release(element) {
          var i;
          var len = element.lengths.length;

          for (i = 0; i < len; i += 1) {
            bezierLengthPool.release(element.lengths[i]);
          }

          element.lengths.length = 0;
        }

        return poolFactory(8, create, release);
      }();

      function bezFunction() {
        var math = Math;

        function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
          var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;
          return det1 > -0.001 && det1 < 0.001;
        }

        function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
          if (z1 === 0 && z2 === 0 && z3 === 0) {
            return pointOnLine2D(x1, y1, x2, y2, x3, y3);
          }

          var dist1 = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2));
          var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y3 - y1, 2) + math.pow(z3 - z1, 2));
          var dist3 = math.sqrt(math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2) + math.pow(z3 - z2, 2));
          var diffDist;

          if (dist1 > dist2) {
            if (dist1 > dist3) {
              diffDist = dist1 - dist2 - dist3;
            } else {
              diffDist = dist3 - dist2 - dist1;
            }
          } else if (dist3 > dist2) {
            diffDist = dist3 - dist2 - dist1;
          } else {
            diffDist = dist2 - dist1 - dist3;
          }

          return diffDist > -0.0001 && diffDist < 0.0001;
        }

        var getBezierLength = function () {
          return function (pt1, pt2, pt3, pt4) {
            var curveSegments = getDefaultCurveSegments();
            var k;
            var i;
            var len;
            var ptCoord;
            var perc;
            var addedLength = 0;
            var ptDistance;
            var point = [];
            var lastPoint = [];
            var lengthData = bezierLengthPool.newElement();
            len = pt3.length;

            for (k = 0; k < curveSegments; k += 1) {
              perc = k / (curveSegments - 1);
              ptDistance = 0;

              for (i = 0; i < len; i += 1) {
                ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * pt3[i] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i] + bmPow(perc, 3) * pt2[i];
                point[i] = ptCoord;

                if (lastPoint[i] !== null) {
                  ptDistance += bmPow(point[i] - lastPoint[i], 2);
                }

                lastPoint[i] = point[i];
              }

              if (ptDistance) {
                ptDistance = bmSqrt(ptDistance);
                addedLength += ptDistance;
              }

              lengthData.percents[k] = perc;
              lengthData.lengths[k] = addedLength;
            }

            lengthData.addedLength = addedLength;
            return lengthData;
          };
        }();

        function getSegmentsLength(shapeData) {
          var segmentsLength = segmentsLengthPool.newElement();
          var closed = shapeData.c;
          var pathV = shapeData.v;
          var pathO = shapeData.o;
          var pathI = shapeData.i;
          var i;
          var len = shapeData._length;
          var lengths = segmentsLength.lengths;
          var totalLength = 0;

          for (i = 0; i < len - 1; i += 1) {
            lengths[i] = getBezierLength(pathV[i], pathV[i + 1], pathO[i], pathI[i + 1]);
            totalLength += lengths[i].addedLength;
          }

          if (closed && len) {
            lengths[i] = getBezierLength(pathV[i], pathV[0], pathO[i], pathI[0]);
            totalLength += lengths[i].addedLength;
          }

          segmentsLength.totalLength = totalLength;
          return segmentsLength;
        }

        function BezierData(length) {
          this.segmentLength = 0;
          this.points = new Array(length);
        }

        function PointData(partial, point) {
          this.partialLength = partial;
          this.point = point;
        }

        var buildBezierData = function () {
          var storedData = {};
          return function (pt1, pt2, pt3, pt4) {
            var bezierName = (pt1[0] + '_' + pt1[1] + '_' + pt2[0] + '_' + pt2[1] + '_' + pt3[0] + '_' + pt3[1] + '_' + pt4[0] + '_' + pt4[1]).replace(/\./g, 'p');

            if (!storedData[bezierName]) {
              var curveSegments = getDefaultCurveSegments();
              var k;
              var i;
              var len;
              var ptCoord;
              var perc;
              var addedLength = 0;
              var ptDistance;
              var point;
              var lastPoint = null;

              if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
                curveSegments = 2;
              }

              var bezierData = new BezierData(curveSegments);
              len = pt3.length;

              for (k = 0; k < curveSegments; k += 1) {
                point = createSizedArray(len);
                perc = k / (curveSegments - 1);
                ptDistance = 0;

                for (i = 0; i < len; i += 1) {
                  ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i] + pt3[i]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i] + pt4[i]) + bmPow(perc, 3) * pt2[i];
                  point[i] = ptCoord;

                  if (lastPoint !== null) {
                    ptDistance += bmPow(point[i] - lastPoint[i], 2);
                  }
                }

                ptDistance = bmSqrt(ptDistance);
                addedLength += ptDistance;
                bezierData.points[k] = new PointData(ptDistance, point);
                lastPoint = point;
              }

              bezierData.segmentLength = addedLength;
              storedData[bezierName] = bezierData;
            }

            return storedData[bezierName];
          };
        }();

        function getDistancePerc(perc, bezierData) {
          var percents = bezierData.percents;
          var lengths = bezierData.lengths;
          var len = percents.length;
          var initPos = bmFloor((len - 1) * perc);
          var lengthPos = perc * bezierData.addedLength;
          var lPerc = 0;

          if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
            return percents[initPos];
          }

          var dir = lengths[initPos] > lengthPos ? -1 : 1;
          var flag = true;

          while (flag) {
            if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
              lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
              flag = false;
            } else {
              initPos += dir;
            }

            if (initPos < 0 || initPos >= len - 1) {
              // FIX for TypedArrays that don't store floating point values with enough accuracy
              if (initPos === len - 1) {
                return percents[initPos];
              }

              flag = false;
            }
          }

          return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
        }

        function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
          var t1 = getDistancePerc(percent, bezierData);
          var u1 = 1 - t1;
          var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1000) / 1000;
          var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1000) / 1000;
          return [ptX, ptY];
        }

        var bezierSegmentPoints = createTypedArray('float32', 8);

        function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
          if (startPerc < 0) {
            startPerc = 0;
          } else if (startPerc > 1) {
            startPerc = 1;
          }

          var t0 = getDistancePerc(startPerc, bezierData);
          endPerc = endPerc > 1 ? 1 : endPerc;
          var t1 = getDistancePerc(endPerc, bezierData);
          var i;
          var len = pt1.length;
          var u0 = 1 - t0;
          var u1 = 1 - t1;
          var u0u0u0 = u0 * u0 * u0;
          var t0u0u0_3 = t0 * u0 * u0 * 3; // eslint-disable-line camelcase

          var t0t0u0_3 = t0 * t0 * u0 * 3; // eslint-disable-line camelcase

          var t0t0t0 = t0 * t0 * t0; //

          var u0u0u1 = u0 * u0 * u1;
          var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1; // eslint-disable-line camelcase

          var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1; // eslint-disable-line camelcase

          var t0t0t1 = t0 * t0 * t1; //

          var u0u1u1 = u0 * u1 * u1;
          var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1; // eslint-disable-line camelcase

          var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1; // eslint-disable-line camelcase

          var t0t1t1 = t0 * t1 * t1; //

          var u1u1u1 = u1 * u1 * u1;
          var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1; // eslint-disable-line camelcase

          var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1; // eslint-disable-line camelcase

          var t1t1t1 = t1 * t1 * t1;

          for (i = 0; i < len; i += 1) {
            bezierSegmentPoints[i * 4] = math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

            bezierSegmentPoints[i * 4 + 1] = math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

            bezierSegmentPoints[i * 4 + 2] = math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase

            bezierSegmentPoints[i * 4 + 3] = math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000; // eslint-disable-line camelcase
          }

          return bezierSegmentPoints;
        }

        return {
          getSegmentsLength: getSegmentsLength,
          getNewSegment: getNewSegment,
          getPointInSegment: getPointInSegment,
          buildBezierData: buildBezierData,
          pointOnLine2D: pointOnLine2D,
          pointOnLine3D: pointOnLine3D
        };
      }

      var bez = bezFunction();

      var PropertyFactory = function () {
        var initFrame = initialDefaultFrame;
        var mathAbs = Math.abs;

        function interpolateValue(frameNum, caching) {
          var offsetTime = this.offsetTime;
          var newValue;

          if (this.propType === 'multidimensional') {
            newValue = createTypedArray('float32', this.pv.length);
          }

          var iterationIndex = caching.lastIndex;
          var i = iterationIndex;
          var len = this.keyframes.length - 1;
          var flag = true;
          var keyData;
          var nextKeyData;
          var keyframeMetadata;

          while (flag) {
            keyData = this.keyframes[i];
            nextKeyData = this.keyframes[i + 1];

            if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
              if (keyData.h) {
                keyData = nextKeyData;
              }

              iterationIndex = 0;
              break;
            }

            if (nextKeyData.t - offsetTime > frameNum) {
              iterationIndex = i;
              break;
            }

            if (i < len - 1) {
              i += 1;
            } else {
              iterationIndex = 0;
              flag = false;
            }
          }

          keyframeMetadata = this.keyframesMetadata[i] || {};
          var k;
          var kLen;
          var perc;
          var jLen;
          var j;
          var fnc;
          var nextKeyTime = nextKeyData.t - offsetTime;
          var keyTime = keyData.t - offsetTime;
          var endValue;

          if (keyData.to) {
            if (!keyframeMetadata.bezierData) {
              keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
            }

            var bezierData = keyframeMetadata.bezierData;

            if (frameNum >= nextKeyTime || frameNum < keyTime) {
              var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
              kLen = bezierData.points[ind].point.length;

              for (k = 0; k < kLen; k += 1) {
                newValue[k] = bezierData.points[ind].point[k];
              } // caching._lastKeyframeIndex = -1;

            } else {
              if (keyframeMetadata.__fnct) {
                fnc = keyframeMetadata.__fnct;
              } else {
                fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
                keyframeMetadata.__fnct = fnc;
              }

              perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
              var distanceInLine = bezierData.segmentLength * perc;
              var segmentPerc;
              var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastAddedLength : 0;
              j = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastPoint : 0;
              flag = true;
              jLen = bezierData.points.length;

              while (flag) {
                addedLength += bezierData.points[j].partialLength;

                if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
                  kLen = bezierData.points[j].point.length;

                  for (k = 0; k < kLen; k += 1) {
                    newValue[k] = bezierData.points[j].point[k];
                  }

                  break;
                } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
                  segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
                  kLen = bezierData.points[j].point.length;

                  for (k = 0; k < kLen; k += 1) {
                    newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;
                  }

                  break;
                }

                if (j < jLen - 1) {
                  j += 1;
                } else {
                  flag = false;
                }
              }

              caching._lastPoint = j;
              caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
              caching._lastKeyframeIndex = i;
            }
          } else {
            var outX;
            var outY;
            var inX;
            var inY;
            var keyValue;
            len = keyData.s.length;
            endValue = nextKeyData.s || keyData.e;

            if (this.sh && keyData.h !== 1) {
              if (frameNum >= nextKeyTime) {
                newValue[0] = endValue[0];
                newValue[1] = endValue[1];
                newValue[2] = endValue[2];
              } else if (frameNum <= keyTime) {
                newValue[0] = keyData.s[0];
                newValue[1] = keyData.s[1];
                newValue[2] = keyData.s[2];
              } else {
                var quatStart = createQuaternion(keyData.s);
                var quatEnd = createQuaternion(endValue);
                var time = (frameNum - keyTime) / (nextKeyTime - keyTime);
                quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
              }
            } else {
              for (i = 0; i < len; i += 1) {
                if (keyData.h !== 1) {
                  if (frameNum >= nextKeyTime) {
                    perc = 1;
                  } else if (frameNum < keyTime) {
                    perc = 0;
                  } else {
                    if (keyData.o.x.constructor === Array) {
                      if (!keyframeMetadata.__fnct) {
                        keyframeMetadata.__fnct = [];
                      }

                      if (!keyframeMetadata.__fnct[i]) {
                        outX = keyData.o.x[i] === undefined ? keyData.o.x[0] : keyData.o.x[i];
                        outY = keyData.o.y[i] === undefined ? keyData.o.y[0] : keyData.o.y[i];
                        inX = keyData.i.x[i] === undefined ? keyData.i.x[0] : keyData.i.x[i];
                        inY = keyData.i.y[i] === undefined ? keyData.i.y[0] : keyData.i.y[i];
                        fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                        keyframeMetadata.__fnct[i] = fnc;
                      } else {
                        fnc = keyframeMetadata.__fnct[i];
                      }
                    } else if (!keyframeMetadata.__fnct) {
                      outX = keyData.o.x;
                      outY = keyData.o.y;
                      inX = keyData.i.x;
                      inY = keyData.i.y;
                      fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                      keyData.keyframeMetadata = fnc;
                    } else {
                      fnc = keyframeMetadata.__fnct;
                    }

                    perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                  }
                }

                endValue = nextKeyData.s || keyData.e;
                keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;

                if (this.propType === 'multidimensional') {
                  newValue[i] = keyValue;
                } else {
                  newValue = keyValue;
                }
              }
            }
          }

          caching.lastIndex = iterationIndex;
          return newValue;
        } // based on @Toji's https://github.com/toji/gl-matrix/


        function slerp(a, b, t) {
          var out = [];
          var ax = a[0];
          var ay = a[1];
          var az = a[2];
          var aw = a[3];
          var bx = b[0];
          var by = b[1];
          var bz = b[2];
          var bw = b[3];
          var omega;
          var cosom;
          var sinom;
          var scale0;
          var scale1;
          cosom = ax * bx + ay * by + az * bz + aw * bw;

          if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
          }

          if (1.0 - cosom > 0.000001) {
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
          } else {
            scale0 = 1.0 - t;
            scale1 = t;
          }

          out[0] = scale0 * ax + scale1 * bx;
          out[1] = scale0 * ay + scale1 * by;
          out[2] = scale0 * az + scale1 * bz;
          out[3] = scale0 * aw + scale1 * bw;
          return out;
        }

        function quaternionToEuler(out, quat) {
          var qx = quat[0];
          var qy = quat[1];
          var qz = quat[2];
          var qw = quat[3];
          var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
          var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
          var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
          out[0] = heading / degToRads;
          out[1] = attitude / degToRads;
          out[2] = bank / degToRads;
        }

        function createQuaternion(values) {
          var heading = values[0] * degToRads;
          var attitude = values[1] * degToRads;
          var bank = values[2] * degToRads;
          var c1 = Math.cos(heading / 2);
          var c2 = Math.cos(attitude / 2);
          var c3 = Math.cos(bank / 2);
          var s1 = Math.sin(heading / 2);
          var s2 = Math.sin(attitude / 2);
          var s3 = Math.sin(bank / 2);
          var w = c1 * c2 * c3 - s1 * s2 * s3;
          var x = s1 * s2 * c3 + c1 * c2 * s3;
          var y = s1 * c2 * c3 + c1 * s2 * s3;
          var z = c1 * s2 * c3 - s1 * c2 * s3;
          return [x, y, z, w];
        }

        function getValueAtCurrentTime() {
          var frameNum = this.comp.renderedFrame - this.offsetTime;
          var initTime = this.keyframes[0].t - this.offsetTime;
          var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;

          if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
            if (this._caching.lastFrame >= frameNum) {
              this._caching._lastKeyframeIndex = -1;
              this._caching.lastIndex = 0;
            }

            var renderResult = this.interpolateValue(frameNum, this._caching);
            this.pv = renderResult;
          }

          this._caching.lastFrame = frameNum;
          return this.pv;
        }

        function setVValue(val) {
          var multipliedValue;

          if (this.propType === 'unidimensional') {
            multipliedValue = val * this.mult;

            if (mathAbs(this.v - multipliedValue) > 0.00001) {
              this.v = multipliedValue;
              this._mdf = true;
            }
          } else {
            var i = 0;
            var len = this.v.length;

            while (i < len) {
              multipliedValue = val[i] * this.mult;

              if (mathAbs(this.v[i] - multipliedValue) > 0.00001) {
                this.v[i] = multipliedValue;
                this._mdf = true;
              }

              i += 1;
            }
          }
        }

        function processEffectsSequence() {
          if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
            return;
          }

          if (this.lock) {
            this.setVValue(this.pv);
            return;
          }

          this.lock = true;
          this._mdf = this._isFirstFrame;
          var i;
          var len = this.effectsSequence.length;
          var finalValue = this.kf ? this.pv : this.data.k;

          for (i = 0; i < len; i += 1) {
            finalValue = this.effectsSequence[i](finalValue);
          }

          this.setVValue(finalValue);
          this._isFirstFrame = false;
          this.lock = false;
          this.frameId = this.elem.globalData.frameId;
        }

        function addEffect(effectFunction) {
          this.effectsSequence.push(effectFunction);
          this.container.addDynamicProperty(this);
        }

        function ValueProperty(elem, data, mult, container) {
          this.propType = 'unidimensional';
          this.mult = mult || 1;
          this.data = data;
          this.v = mult ? data.k * mult : data.k;
          this.pv = data.k;
          this._mdf = false;
          this.elem = elem;
          this.container = container;
          this.comp = elem.comp;
          this.k = false;
          this.kf = false;
          this.vel = 0;
          this.effectsSequence = [];
          this._isFirstFrame = true;
          this.getValue = processEffectsSequence;
          this.setVValue = setVValue;
          this.addEffect = addEffect;
        }

        function MultiDimensionalProperty(elem, data, mult, container) {
          this.propType = 'multidimensional';
          this.mult = mult || 1;
          this.data = data;
          this._mdf = false;
          this.elem = elem;
          this.container = container;
          this.comp = elem.comp;
          this.k = false;
          this.kf = false;
          this.frameId = -1;
          var i;
          var len = data.k.length;
          this.v = createTypedArray('float32', len);
          this.pv = createTypedArray('float32', len);
          this.vel = createTypedArray('float32', len);

          for (i = 0; i < len; i += 1) {
            this.v[i] = data.k[i] * this.mult;
            this.pv[i] = data.k[i];
          }

          this._isFirstFrame = true;
          this.effectsSequence = [];
          this.getValue = processEffectsSequence;
          this.setVValue = setVValue;
          this.addEffect = addEffect;
        }

        function KeyframedValueProperty(elem, data, mult, container) {
          this.propType = 'unidimensional';
          this.keyframes = data.k;
          this.keyframesMetadata = [];
          this.offsetTime = elem.data.st;
          this.frameId = -1;
          this._caching = {
            lastFrame: initFrame,
            lastIndex: 0,
            value: 0,
            _lastKeyframeIndex: -1
          };
          this.k = true;
          this.kf = true;
          this.data = data;
          this.mult = mult || 1;
          this.elem = elem;
          this.container = container;
          this.comp = elem.comp;
          this.v = initFrame;
          this.pv = initFrame;
          this._isFirstFrame = true;
          this.getValue = processEffectsSequence;
          this.setVValue = setVValue;
          this.interpolateValue = interpolateValue;
          this.effectsSequence = [getValueAtCurrentTime.bind(this)];
          this.addEffect = addEffect;
        }

        function KeyframedMultidimensionalProperty(elem, data, mult, container) {
          this.propType = 'multidimensional';
          var i;
          var len = data.k.length;
          var s;
          var e;
          var to;
          var ti;

          for (i = 0; i < len - 1; i += 1) {
            if (data.k[i].to && data.k[i].s && data.k[i + 1] && data.k[i + 1].s) {
              s = data.k[i].s;
              e = data.k[i + 1].s;
              to = data.k[i].to;
              ti = data.k[i].ti;

              if (s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], s[0] + to[0], s[1] + to[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], e[0] + ti[0], e[1] + ti[1]) || s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], s[0] + to[0], s[1] + to[1], s[2] + to[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], e[0] + ti[0], e[1] + ti[1], e[2] + ti[2])) {
                data.k[i].to = null;
                data.k[i].ti = null;
              }

              if (s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
                if (s.length === 2 || s[2] === e[2] && to[2] === 0 && ti[2] === 0) {
                  data.k[i].to = null;
                  data.k[i].ti = null;
                }
              }
            }
          }

          this.effectsSequence = [getValueAtCurrentTime.bind(this)];
          this.data = data;
          this.keyframes = data.k;
          this.keyframesMetadata = [];
          this.offsetTime = elem.data.st;
          this.k = true;
          this.kf = true;
          this._isFirstFrame = true;
          this.mult = mult || 1;
          this.elem = elem;
          this.container = container;
          this.comp = elem.comp;
          this.getValue = processEffectsSequence;
          this.setVValue = setVValue;
          this.interpolateValue = interpolateValue;
          this.frameId = -1;
          var arrLen = data.k[0].s.length;
          this.v = createTypedArray('float32', arrLen);
          this.pv = createTypedArray('float32', arrLen);

          for (i = 0; i < arrLen; i += 1) {
            this.v[i] = initFrame;
            this.pv[i] = initFrame;
          }

          this._caching = {
            lastFrame: initFrame,
            lastIndex: 0,
            value: createTypedArray('float32', arrLen)
          };
          this.addEffect = addEffect;
        }

        function getProp(elem, data, type, mult, container) {
          var p;

          if (!data.k.length) {
            p = new ValueProperty(elem, data, mult, container);
          } else if (typeof data.k[0] === 'number') {
            p = new MultiDimensionalProperty(elem, data, mult, container);
          } else {
            switch (type) {
              case 0:
                p = new KeyframedValueProperty(elem, data, mult, container);
                break;

              case 1:
                p = new KeyframedMultidimensionalProperty(elem, data, mult, container);
                break;
            }
          }

          if (p.effectsSequence.length) {
            container.addDynamicProperty(p);
          }

          return p;
        }

        var ob = {
          getProp: getProp
        };
        return ob;
      }();

      function DynamicPropertyContainer() {}

      DynamicPropertyContainer.prototype = {
        addDynamicProperty: function addDynamicProperty(prop) {
          if (this.dynamicProperties.indexOf(prop) === -1) {
            this.dynamicProperties.push(prop);
            this.container.addDynamicProperty(this);
            this._isAnimated = true;
          }
        },
        iterateDynamicProperties: function iterateDynamicProperties() {
          this._mdf = false;
          var i;
          var len = this.dynamicProperties.length;

          for (i = 0; i < len; i += 1) {
            this.dynamicProperties[i].getValue();

            if (this.dynamicProperties[i]._mdf) {
              this._mdf = true;
            }
          }
        },
        initDynamicPropertyContainer: function initDynamicPropertyContainer(container) {
          this.container = container;
          this.dynamicProperties = [];
          this._mdf = false;
          this._isAnimated = false;
        }
      };

      var pointPool = function () {
        function create() {
          return createTypedArray('float32', 2);
        }

        return poolFactory(8, create);
      }();

      function ShapePath() {
        this.c = false;
        this._length = 0;
        this._maxLength = 8;
        this.v = createSizedArray(this._maxLength);
        this.o = createSizedArray(this._maxLength);
        this.i = createSizedArray(this._maxLength);
      }

      ShapePath.prototype.setPathData = function (closed, len) {
        this.c = closed;
        this.setLength(len);
        var i = 0;

        while (i < len) {
          this.v[i] = pointPool.newElement();
          this.o[i] = pointPool.newElement();
          this.i[i] = pointPool.newElement();
          i += 1;
        }
      };

      ShapePath.prototype.setLength = function (len) {
        while (this._maxLength < len) {
          this.doubleArrayLength();
        }

        this._length = len;
      };

      ShapePath.prototype.doubleArrayLength = function () {
        this.v = this.v.concat(createSizedArray(this._maxLength));
        this.i = this.i.concat(createSizedArray(this._maxLength));
        this.o = this.o.concat(createSizedArray(this._maxLength));
        this._maxLength *= 2;
      };

      ShapePath.prototype.setXYAt = function (x, y, type, pos, replace) {
        var arr;
        this._length = Math.max(this._length, pos + 1);

        if (this._length >= this._maxLength) {
          this.doubleArrayLength();
        }

        switch (type) {
          case 'v':
            arr = this.v;
            break;

          case 'i':
            arr = this.i;
            break;

          case 'o':
            arr = this.o;
            break;

          default:
            arr = [];
            break;
        }

        if (!arr[pos] || arr[pos] && !replace) {
          arr[pos] = pointPool.newElement();
        }

        arr[pos][0] = x;
        arr[pos][1] = y;
      };

      ShapePath.prototype.setTripleAt = function (vX, vY, oX, oY, iX, iY, pos, replace) {
        this.setXYAt(vX, vY, 'v', pos, replace);
        this.setXYAt(oX, oY, 'o', pos, replace);
        this.setXYAt(iX, iY, 'i', pos, replace);
      };

      ShapePath.prototype.reverse = function () {
        var newPath = new ShapePath();
        newPath.setPathData(this.c, this._length);
        var vertices = this.v;
        var outPoints = this.o;
        var inPoints = this.i;
        var init = 0;

        if (this.c) {
          newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
          init = 1;
        }

        var cnt = this._length - 1;
        var len = this._length;
        var i;

        for (i = init; i < len; i += 1) {
          newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
          cnt -= 1;
        }

        return newPath;
      };

      var shapePool = function () {
        function create() {
          return new ShapePath();
        }

        function release(shapePath) {
          var len = shapePath._length;
          var i;

          for (i = 0; i < len; i += 1) {
            pointPool.release(shapePath.v[i]);
            pointPool.release(shapePath.i[i]);
            pointPool.release(shapePath.o[i]);
            shapePath.v[i] = null;
            shapePath.i[i] = null;
            shapePath.o[i] = null;
          }

          shapePath._length = 0;
          shapePath.c = false;
        }

        function clone(shape) {
          var cloned = factory.newElement();
          var i;
          var len = shape._length === undefined ? shape.v.length : shape._length;
          cloned.setLength(len);
          cloned.c = shape.c;

          for (i = 0; i < len; i += 1) {
            cloned.setTripleAt(shape.v[i][0], shape.v[i][1], shape.o[i][0], shape.o[i][1], shape.i[i][0], shape.i[i][1], i);
          }

          return cloned;
        }

        var factory = poolFactory(4, create, release);
        factory.clone = clone;
        return factory;
      }();

      function ShapeCollection() {
        this._length = 0;
        this._maxLength = 4;
        this.shapes = createSizedArray(this._maxLength);
      }

      ShapeCollection.prototype.addShape = function (shapeData) {
        if (this._length === this._maxLength) {
          this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
          this._maxLength *= 2;
        }

        this.shapes[this._length] = shapeData;
        this._length += 1;
      };

      ShapeCollection.prototype.releaseShapes = function () {
        var i;

        for (i = 0; i < this._length; i += 1) {
          shapePool.release(this.shapes[i]);
        }

        this._length = 0;
      };

      var shapeCollectionPool = function () {
        var ob = {
          newShapeCollection: newShapeCollection,
          release: release
        };
        var _length = 0;
        var _maxLength = 4;
        var pool = createSizedArray(_maxLength);

        function newShapeCollection() {
          var shapeCollection;

          if (_length) {
            _length -= 1;
            shapeCollection = pool[_length];
          } else {
            shapeCollection = new ShapeCollection();
          }

          return shapeCollection;
        }

        function release(shapeCollection) {
          var i;
          var len = shapeCollection._length;

          for (i = 0; i < len; i += 1) {
            shapePool.release(shapeCollection.shapes[i]);
          }

          shapeCollection._length = 0;

          if (_length === _maxLength) {
            pool = pooling["double"](pool);
            _maxLength *= 2;
          }

          pool[_length] = shapeCollection;
          _length += 1;
        }

        return ob;
      }();

      var ShapePropertyFactory = function () {
        var initFrame = -999999;

        function interpolateShape(frameNum, previousValue, caching) {
          var iterationIndex = caching.lastIndex;
          var keyPropS;
          var keyPropE;
          var isHold;
          var j;
          var k;
          var jLen;
          var kLen;
          var perc;
          var vertexValue;
          var kf = this.keyframes;

          if (frameNum < kf[0].t - this.offsetTime) {
            keyPropS = kf[0].s[0];
            isHold = true;
            iterationIndex = 0;
          } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
            keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
            /* if(kf[kf.length - 1].s){
                      keyPropS = kf[kf.length - 1].s[0];
                  }else{
                      keyPropS = kf[kf.length - 2].e[0];
                  } */

            isHold = true;
          } else {
            var i = iterationIndex;
            var len = kf.length - 1;
            var flag = true;
            var keyData;
            var nextKeyData;
            var keyframeMetadata;

            while (flag) {
              keyData = kf[i];
              nextKeyData = kf[i + 1];

              if (nextKeyData.t - this.offsetTime > frameNum) {
                break;
              }

              if (i < len - 1) {
                i += 1;
              } else {
                flag = false;
              }
            }

            keyframeMetadata = this.keyframesMetadata[i] || {};
            isHold = keyData.h === 1;
            iterationIndex = i;

            if (!isHold) {
              if (frameNum >= nextKeyData.t - this.offsetTime) {
                perc = 1;
              } else if (frameNum < keyData.t - this.offsetTime) {
                perc = 0;
              } else {
                var fnc;

                if (keyframeMetadata.__fnct) {
                  fnc = keyframeMetadata.__fnct;
                } else {
                  fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                  keyframeMetadata.__fnct = fnc;
                }

                perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
              }

              keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
            }

            keyPropS = keyData.s[0];
          }

          jLen = previousValue._length;
          kLen = keyPropS.i[0].length;
          caching.lastIndex = iterationIndex;

          for (j = 0; j < jLen; j += 1) {
            for (k = 0; k < kLen; k += 1) {
              vertexValue = isHold ? keyPropS.i[j][k] : keyPropS.i[j][k] + (keyPropE.i[j][k] - keyPropS.i[j][k]) * perc;
              previousValue.i[j][k] = vertexValue;
              vertexValue = isHold ? keyPropS.o[j][k] : keyPropS.o[j][k] + (keyPropE.o[j][k] - keyPropS.o[j][k]) * perc;
              previousValue.o[j][k] = vertexValue;
              vertexValue = isHold ? keyPropS.v[j][k] : keyPropS.v[j][k] + (keyPropE.v[j][k] - keyPropS.v[j][k]) * perc;
              previousValue.v[j][k] = vertexValue;
            }
          }
        }

        function interpolateShapeCurrentTime() {
          var frameNum = this.comp.renderedFrame - this.offsetTime;
          var initTime = this.keyframes[0].t - this.offsetTime;
          var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
          var lastFrame = this._caching.lastFrame;

          if (!(lastFrame !== initFrame && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
            /// /
            this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
            this.interpolateShape(frameNum, this.pv, this._caching); /// /
          }

          this._caching.lastFrame = frameNum;
          return this.pv;
        }

        function resetShape() {
          this.paths = this.localShapeCollection;
        }

        function shapesEqual(shape1, shape2) {
          if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
            return false;
          }

          var i;
          var len = shape1._length;

          for (i = 0; i < len; i += 1) {
            if (shape1.v[i][0] !== shape2.v[i][0] || shape1.v[i][1] !== shape2.v[i][1] || shape1.o[i][0] !== shape2.o[i][0] || shape1.o[i][1] !== shape2.o[i][1] || shape1.i[i][0] !== shape2.i[i][0] || shape1.i[i][1] !== shape2.i[i][1]) {
              return false;
            }
          }

          return true;
        }

        function setVValue(newPath) {
          if (!shapesEqual(this.v, newPath)) {
            this.v = shapePool.clone(newPath);
            this.localShapeCollection.releaseShapes();
            this.localShapeCollection.addShape(this.v);
            this._mdf = true;
            this.paths = this.localShapeCollection;
          }
        }

        function processEffectsSequence() {
          if (this.elem.globalData.frameId === this.frameId) {
            return;
          }

          if (!this.effectsSequence.length) {
            this._mdf = false;
            return;
          }

          if (this.lock) {
            this.setVValue(this.pv);
            return;
          }

          this.lock = true;
          this._mdf = false;
          var finalValue;

          if (this.kf) {
            finalValue = this.pv;
          } else if (this.data.ks) {
            finalValue = this.data.ks.k;
          } else {
            finalValue = this.data.pt.k;
          }

          var i;
          var len = this.effectsSequence.length;

          for (i = 0; i < len; i += 1) {
            finalValue = this.effectsSequence[i](finalValue);
          }

          this.setVValue(finalValue);
          this.lock = false;
          this.frameId = this.elem.globalData.frameId;
        }

        function ShapeProperty(elem, data, type) {
          this.propType = 'shape';
          this.comp = elem.comp;
          this.container = elem;
          this.elem = elem;
          this.data = data;
          this.k = false;
          this.kf = false;
          this._mdf = false;
          var pathData = type === 3 ? data.pt.k : data.ks.k;
          this.v = shapePool.clone(pathData);
          this.pv = shapePool.clone(this.v);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.paths = this.localShapeCollection;
          this.paths.addShape(this.v);
          this.reset = resetShape;
          this.effectsSequence = [];
        }

        function addEffect(effectFunction) {
          this.effectsSequence.push(effectFunction);
          this.container.addDynamicProperty(this);
        }

        ShapeProperty.prototype.interpolateShape = interpolateShape;
        ShapeProperty.prototype.getValue = processEffectsSequence;
        ShapeProperty.prototype.setVValue = setVValue;
        ShapeProperty.prototype.addEffect = addEffect;

        function KeyframedShapeProperty(elem, data, type) {
          this.propType = 'shape';
          this.comp = elem.comp;
          this.elem = elem;
          this.container = elem;
          this.offsetTime = elem.data.st;
          this.keyframes = type === 3 ? data.pt.k : data.ks.k;
          this.keyframesMetadata = [];
          this.k = true;
          this.kf = true;
          var len = this.keyframes[0].s[0].i.length;
          this.v = shapePool.newElement();
          this.v.setPathData(this.keyframes[0].s[0].c, len);
          this.pv = shapePool.clone(this.v);
          this.localShapeCollection = shapeCollectionPool.newShapeCollection();
          this.paths = this.localShapeCollection;
          this.paths.addShape(this.v);
          this.lastFrame = initFrame;
          this.reset = resetShape;
          this._caching = {
            lastFrame: initFrame,
            lastIndex: 0
          };
          this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
        }

        KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
        KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
        KeyframedShapeProperty.prototype.setVValue = setVValue;
        KeyframedShapeProperty.prototype.addEffect = addEffect;

        var EllShapeProperty = function () {
          var cPoint = roundCorner;

          function EllShapePropertyFactory(elem, data) {
            this.v = shapePool.newElement();
            this.v.setPathData(true, 4);
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.localShapeCollection.addShape(this.v);
            this.d = data.d;
            this.elem = elem;
            this.comp = elem.comp;
            this.frameId = -1;
            this.initDynamicPropertyContainer(elem);
            this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
            this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);

            if (this.dynamicProperties.length) {
              this.k = true;
            } else {
              this.k = false;
              this.convertEllToPath();
            }
          }

          EllShapePropertyFactory.prototype = {
            reset: resetShape,
            getValue: function getValue() {
              if (this.elem.globalData.frameId === this.frameId) {
                return;
              }

              this.frameId = this.elem.globalData.frameId;
              this.iterateDynamicProperties();

              if (this._mdf) {
                this.convertEllToPath();
              }
            },
            convertEllToPath: function convertEllToPath() {
              var p0 = this.p.v[0];
              var p1 = this.p.v[1];
              var s0 = this.s.v[0] / 2;
              var s1 = this.s.v[1] / 2;

              var _cw = this.d !== 3;

              var _v = this.v;
              _v.v[0][0] = p0;
              _v.v[0][1] = p1 - s1;
              _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
              _v.v[1][1] = p1;
              _v.v[2][0] = p0;
              _v.v[2][1] = p1 + s1;
              _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
              _v.v[3][1] = p1;
              _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
              _v.i[0][1] = p1 - s1;
              _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
              _v.i[1][1] = p1 - s1 * cPoint;
              _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
              _v.i[2][1] = p1 + s1;
              _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
              _v.i[3][1] = p1 + s1 * cPoint;
              _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
              _v.o[0][1] = p1 - s1;
              _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
              _v.o[1][1] = p1 + s1 * cPoint;
              _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
              _v.o[2][1] = p1 + s1;
              _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
              _v.o[3][1] = p1 - s1 * cPoint;
            }
          };
          extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
          return EllShapePropertyFactory;
        }();

        var StarShapeProperty = function () {
          function StarShapePropertyFactory(elem, data) {
            this.v = shapePool.newElement();
            this.v.setPathData(true, 0);
            this.elem = elem;
            this.comp = elem.comp;
            this.data = data;
            this.frameId = -1;
            this.d = data.d;
            this.initDynamicPropertyContainer(elem);

            if (data.sy === 1) {
              this.ir = PropertyFactory.getProp(elem, data.ir, 0, 0, this);
              this.is = PropertyFactory.getProp(elem, data.is, 0, 0.01, this);
              this.convertToPath = this.convertStarToPath;
            } else {
              this.convertToPath = this.convertPolygonToPath;
            }

            this.pt = PropertyFactory.getProp(elem, data.pt, 0, 0, this);
            this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
            this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);
            this.or = PropertyFactory.getProp(elem, data.or, 0, 0, this);
            this.os = PropertyFactory.getProp(elem, data.os, 0, 0.01, this);
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.localShapeCollection.addShape(this.v);
            this.paths = this.localShapeCollection;

            if (this.dynamicProperties.length) {
              this.k = true;
            } else {
              this.k = false;
              this.convertToPath();
            }
          }

          StarShapePropertyFactory.prototype = {
            reset: resetShape,
            getValue: function getValue() {
              if (this.elem.globalData.frameId === this.frameId) {
                return;
              }

              this.frameId = this.elem.globalData.frameId;
              this.iterateDynamicProperties();

              if (this._mdf) {
                this.convertToPath();
              }
            },
            convertStarToPath: function convertStarToPath() {
              var numPts = Math.floor(this.pt.v) * 2;
              var angle = Math.PI * 2 / numPts;
              /* this.v.v.length = numPts;
                      this.v.i.length = numPts;
                      this.v.o.length = numPts; */

              var longFlag = true;
              var longRad = this.or.v;
              var shortRad = this.ir.v;
              var longRound = this.os.v;
              var shortRound = this.is.v;
              var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
              var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
              var i;
              var rad;
              var roundness;
              var perimSegment;
              var currentAng = -Math.PI / 2;
              currentAng += this.r.v;
              var dir = this.data.d === 3 ? -1 : 1;
              this.v._length = 0;

              for (i = 0; i < numPts; i += 1) {
                rad = longFlag ? longRad : shortRad;
                roundness = longFlag ? longRound : shortRound;
                perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
                var x = rad * Math.cos(currentAng);
                var y = rad * Math.sin(currentAng);
                var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                x += +this.p.v[0];
                y += +this.p.v[1];
                this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
                /* this.v.v[i] = [x,y];
                          this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
                          this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
                          this.v._length = numPts; */

                longFlag = !longFlag;
                currentAng += angle * dir;
              }
            },
            convertPolygonToPath: function convertPolygonToPath() {
              var numPts = Math.floor(this.pt.v);
              var angle = Math.PI * 2 / numPts;
              var rad = this.or.v;
              var roundness = this.os.v;
              var perimSegment = 2 * Math.PI * rad / (numPts * 4);
              var i;
              var currentAng = -Math.PI * 0.5;
              var dir = this.data.d === 3 ? -1 : 1;
              currentAng += this.r.v;
              this.v._length = 0;

              for (i = 0; i < numPts; i += 1) {
                var x = rad * Math.cos(currentAng);
                var y = rad * Math.sin(currentAng);
                var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                x += +this.p.v[0];
                y += +this.p.v[1];
                this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
                currentAng += angle * dir;
              }

              this.paths.length = 0;
              this.paths[0] = this.v;
            }
          };
          extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
          return StarShapePropertyFactory;
        }();

        var RectShapeProperty = function () {
          function RectShapePropertyFactory(elem, data) {
            this.v = shapePool.newElement();
            this.v.c = true;
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.localShapeCollection.addShape(this.v);
            this.paths = this.localShapeCollection;
            this.elem = elem;
            this.comp = elem.comp;
            this.frameId = -1;
            this.d = data.d;
            this.initDynamicPropertyContainer(elem);
            this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
            this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
            this.r = PropertyFactory.getProp(elem, data.r, 0, 0, this);

            if (this.dynamicProperties.length) {
              this.k = true;
            } else {
              this.k = false;
              this.convertRectToPath();
            }
          }

          RectShapePropertyFactory.prototype = {
            convertRectToPath: function convertRectToPath() {
              var p0 = this.p.v[0];
              var p1 = this.p.v[1];
              var v0 = this.s.v[0] / 2;
              var v1 = this.s.v[1] / 2;
              var round = bmMin(v0, v1, this.r.v);
              var cPoint = round * (1 - roundCorner);
              this.v._length = 0;

              if (this.d === 2 || this.d === 1) {
                this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);
                this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);

                if (round !== 0) {
                  this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                  this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);
                  this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);
                  this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);
                  this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                  this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);
                } else {
                  this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                  this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
                }
              } else {
                this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);

                if (round !== 0) {
                  this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                  this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);
                  this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);
                  this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);
                  this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                  this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);
                  this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);
                } else {
                  this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                  this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                  this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
                }
              }
            },
            getValue: function getValue() {
              if (this.elem.globalData.frameId === this.frameId) {
                return;
              }

              this.frameId = this.elem.globalData.frameId;
              this.iterateDynamicProperties();

              if (this._mdf) {
                this.convertRectToPath();
              }
            },
            reset: resetShape
          };
          extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
          return RectShapePropertyFactory;
        }();

        function getShapeProp(elem, data, type) {
          var prop;

          if (type === 3 || type === 4) {
            var dataProp = type === 3 ? data.pt : data.ks;
            var keys = dataProp.k;

            if (keys.length) {
              prop = new KeyframedShapeProperty(elem, data, type);
            } else {
              prop = new ShapeProperty(elem, data, type);
            }
          } else if (type === 5) {
            prop = new RectShapeProperty(elem, data);
          } else if (type === 6) {
            prop = new EllShapeProperty(elem, data);
          } else if (type === 7) {
            prop = new StarShapeProperty(elem, data);
          }

          if (prop.k) {
            elem.addDynamicProperty(prop);
          }

          return prop;
        }

        function getConstructorFunction() {
          return ShapeProperty;
        }

        function getKeyframedConstructorFunction() {
          return KeyframedShapeProperty;
        }

        var ob = {};
        ob.getShapeProp = getShapeProp;
        ob.getConstructorFunction = getConstructorFunction;
        ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
        return ob;
      }();

      /*!
       Transformation Matrix v2.0
       (c) Epistemex 2014-2015
       www.epistemex.com
       By Ken Fyrstenberg
       Contributions by leeoniya.
       License: MIT, header required.
       */

      /**
       * 2D transformation matrix object initialized with identity matrix.
       *
       * The matrix can synchronize a canvas context by supplying the context
       * as an argument, or later apply current absolute transform to an
       * existing context.
       *
       * All values are handled as floating point values.
       *
       * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
       * @prop {number} a - scale x
       * @prop {number} b - shear y
       * @prop {number} c - shear x
       * @prop {number} d - scale y
       * @prop {number} e - translate x
       * @prop {number} f - translate y
       * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
       * @constructor
       */

      var Matrix = function () {
        var _cos = Math.cos;
        var _sin = Math.sin;
        var _tan = Math.tan;
        var _rnd = Math.round;

        function reset() {
          this.props[0] = 1;
          this.props[1] = 0;
          this.props[2] = 0;
          this.props[3] = 0;
          this.props[4] = 0;
          this.props[5] = 1;
          this.props[6] = 0;
          this.props[7] = 0;
          this.props[8] = 0;
          this.props[9] = 0;
          this.props[10] = 1;
          this.props[11] = 0;
          this.props[12] = 0;
          this.props[13] = 0;
          this.props[14] = 0;
          this.props[15] = 1;
          return this;
        }

        function rotate(angle) {
          if (angle === 0) {
            return this;
          }

          var mCos = _cos(angle);

          var mSin = _sin(angle);

          return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }

        function rotateX(angle) {
          if (angle === 0) {
            return this;
          }

          var mCos = _cos(angle);

          var mSin = _sin(angle);

          return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
        }

        function rotateY(angle) {
          if (angle === 0) {
            return this;
          }

          var mCos = _cos(angle);

          var mSin = _sin(angle);

          return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
        }

        function rotateZ(angle) {
          if (angle === 0) {
            return this;
          }

          var mCos = _cos(angle);

          var mSin = _sin(angle);

          return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }

        function shear(sx, sy) {
          return this._t(1, sy, sx, 1, 0, 0);
        }

        function skew(ax, ay) {
          return this.shear(_tan(ax), _tan(ay));
        }

        function skewFromAxis(ax, angle) {
          var mCos = _cos(angle);

          var mSin = _sin(angle);

          return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); // return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
        }

        function scale(sx, sy, sz) {
          if (!sz && sz !== 0) {
            sz = 1;
          }

          if (sx === 1 && sy === 1 && sz === 1) {
            return this;
          }

          return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
        }

        function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
          this.props[0] = a;
          this.props[1] = b;
          this.props[2] = c;
          this.props[3] = d;
          this.props[4] = e;
          this.props[5] = f;
          this.props[6] = g;
          this.props[7] = h;
          this.props[8] = i;
          this.props[9] = j;
          this.props[10] = k;
          this.props[11] = l;
          this.props[12] = m;
          this.props[13] = n;
          this.props[14] = o;
          this.props[15] = p;
          return this;
        }

        function translate(tx, ty, tz) {
          tz = tz || 0;

          if (tx !== 0 || ty !== 0 || tz !== 0) {
            return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
          }

          return this;
        }

        function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {
          var _p = this.props;

          if (a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0) {
            // NOTE: commenting this condition because TurboFan deoptimizes code when present
            // if(m2 !== 0 || n2 !== 0 || o2 !== 0){
            _p[12] = _p[12] * a2 + _p[15] * m2;
            _p[13] = _p[13] * f2 + _p[15] * n2;
            _p[14] = _p[14] * k2 + _p[15] * o2;
            _p[15] *= p2; // }

            this._identityCalculated = false;
            return this;
          }

          var a1 = _p[0];
          var b1 = _p[1];
          var c1 = _p[2];
          var d1 = _p[3];
          var e1 = _p[4];
          var f1 = _p[5];
          var g1 = _p[6];
          var h1 = _p[7];
          var i1 = _p[8];
          var j1 = _p[9];
          var k1 = _p[10];
          var l1 = _p[11];
          var m1 = _p[12];
          var n1 = _p[13];
          var o1 = _p[14];
          var p1 = _p[15];
          /* matrix order (canvas compatible):
               * ace
               * bdf
               * 001
               */

          _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
          _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;
          _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;
          _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;
          _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;
          _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;
          _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;
          _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;
          _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;
          _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;
          _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;
          _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;
          _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;
          _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;
          _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;
          _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;
          this._identityCalculated = false;
          return this;
        }

        function isIdentity() {
          if (!this._identityCalculated) {
            this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
            this._identityCalculated = true;
          }

          return this._identity;
        }

        function equals(matr) {
          var i = 0;

          while (i < 16) {
            if (matr.props[i] !== this.props[i]) {
              return false;
            }

            i += 1;
          }

          return true;
        }

        function clone(matr) {
          var i;

          for (i = 0; i < 16; i += 1) {
            matr.props[i] = this.props[i];
          }

          return matr;
        }

        function cloneFromProps(props) {
          var i;

          for (i = 0; i < 16; i += 1) {
            this.props[i] = props[i];
          }
        }

        function applyToPoint(x, y, z) {
          return {
            x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
            y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
            z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
          };
          /* return {
               x: x * me.a + y * me.c + me.e,
               y: x * me.b + y * me.d + me.f
               }; */
        }

        function applyToX(x, y, z) {
          return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
        }

        function applyToY(x, y, z) {
          return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
        }

        function applyToZ(x, y, z) {
          return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
        }

        function getInverseMatrix() {
          var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
          var a = this.props[5] / determinant;
          var b = -this.props[1] / determinant;
          var c = -this.props[4] / determinant;
          var d = this.props[0] / determinant;
          var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
          var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
          var inverseMatrix = new Matrix();
          inverseMatrix.props[0] = a;
          inverseMatrix.props[1] = b;
          inverseMatrix.props[4] = c;
          inverseMatrix.props[5] = d;
          inverseMatrix.props[12] = e;
          inverseMatrix.props[13] = f;
          return inverseMatrix;
        }

        function inversePoint(pt) {
          var inverseMatrix = this.getInverseMatrix();
          return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
        }

        function inversePoints(pts) {
          var i;
          var len = pts.length;
          var retPts = [];

          for (i = 0; i < len; i += 1) {
            retPts[i] = inversePoint(pts[i]);
          }

          return retPts;
        }

        function applyToTriplePoints(pt1, pt2, pt3) {
          var arr = createTypedArray('float32', 6);

          if (this.isIdentity()) {
            arr[0] = pt1[0];
            arr[1] = pt1[1];
            arr[2] = pt2[0];
            arr[3] = pt2[1];
            arr[4] = pt3[0];
            arr[5] = pt3[1];
          } else {
            var p0 = this.props[0];
            var p1 = this.props[1];
            var p4 = this.props[4];
            var p5 = this.props[5];
            var p12 = this.props[12];
            var p13 = this.props[13];
            arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
            arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
            arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
            arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
            arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
            arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
          }

          return arr;
        }

        function applyToPointArray(x, y, z) {
          var arr;

          if (this.isIdentity()) {
            arr = [x, y, z];
          } else {
            arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12], x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13], x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
          }

          return arr;
        }

        function applyToPointStringified(x, y) {
          if (this.isIdentity()) {
            return x + ',' + y;
          }

          var _p = this.props;
          return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + ',' + Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
        }

        function toCSS() {
          // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.

          /* if(this.isIdentity()) {
                  return '';
              } */
          var i = 0;
          var props = this.props;
          var cssValue = 'matrix3d(';
          var v = 10000;

          while (i < 16) {
            cssValue += _rnd(props[i] * v) / v;
            cssValue += i === 15 ? ')' : ',';
            i += 1;
          }

          return cssValue;
        }

        function roundMatrixProperty(val) {
          var v = 10000;

          if (val < 0.000001 && val > 0 || val > -0.000001 && val < 0) {
            return _rnd(val * v) / v;
          }

          return val;
        }

        function to2dCSS() {
          // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.

          /* if(this.isIdentity()) {
                  return '';
              } */
          var props = this.props;

          var _a = roundMatrixProperty(props[0]);

          var _b = roundMatrixProperty(props[1]);

          var _c = roundMatrixProperty(props[4]);

          var _d = roundMatrixProperty(props[5]);

          var _e = roundMatrixProperty(props[12]);

          var _f = roundMatrixProperty(props[13]);

          return 'matrix(' + _a + ',' + _b + ',' + _c + ',' + _d + ',' + _e + ',' + _f + ')';
        }

        return function () {
          this.reset = reset;
          this.rotate = rotate;
          this.rotateX = rotateX;
          this.rotateY = rotateY;
          this.rotateZ = rotateZ;
          this.skew = skew;
          this.skewFromAxis = skewFromAxis;
          this.shear = shear;
          this.scale = scale;
          this.setTransform = setTransform;
          this.translate = translate;
          this.transform = transform;
          this.applyToPoint = applyToPoint;
          this.applyToX = applyToX;
          this.applyToY = applyToY;
          this.applyToZ = applyToZ;
          this.applyToPointArray = applyToPointArray;
          this.applyToTriplePoints = applyToTriplePoints;
          this.applyToPointStringified = applyToPointStringified;
          this.toCSS = toCSS;
          this.to2dCSS = to2dCSS;
          this.clone = clone;
          this.cloneFromProps = cloneFromProps;
          this.equals = equals;
          this.inversePoints = inversePoints;
          this.inversePoint = inversePoint;
          this.getInverseMatrix = getInverseMatrix;
          this._t = this.transform;
          this.isIdentity = isIdentity;
          this._identity = true;
          this._identityCalculated = false;
          this.props = createTypedArray('float32', 16);
          this.reset();
        };
      }();

      function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }
      var lottie = {};

      function setLocation(href) {
        setLocationHref(href);
      }

      function searchAnimations() {
        {
          animationManager.searchAnimations();
        }
      }

      function setSubframeRendering(flag) {
        setSubframeEnabled(flag);
      }

      function setPrefix(prefix) {
        setIdPrefix(prefix);
      }

      function loadAnimation(params) {

        return animationManager.loadAnimation(params);
      }

      function setQuality(value) {
        if (typeof value === 'string') {
          switch (value) {
            case 'high':
              setDefaultCurveSegments(200);
              break;

            default:
            case 'medium':
              setDefaultCurveSegments(50);
              break;

            case 'low':
              setDefaultCurveSegments(10);
              break;
          }
        } else if (!isNaN(value) && value > 1) {
          setDefaultCurveSegments(value);
        }
      }

      function inBrowser() {
        return typeof navigator !== 'undefined';
      }

      function installPlugin(type, plugin) {
        if (type === 'expressions') {
          setExpressionsPlugin(plugin);
        }
      }

      function getFactory(name) {
        switch (name) {
          case 'propertyFactory':
            return PropertyFactory;

          case 'shapePropertyFactory':
            return ShapePropertyFactory;

          case 'matrix':
            return Matrix;

          default:
            return null;
        }
      }

      lottie.play = animationManager.play;
      lottie.pause = animationManager.pause;
      lottie.setLocationHref = setLocation;
      lottie.togglePause = animationManager.togglePause;
      lottie.setSpeed = animationManager.setSpeed;
      lottie.setDirection = animationManager.setDirection;
      lottie.stop = animationManager.stop;
      lottie.searchAnimations = searchAnimations;
      lottie.registerAnimation = animationManager.registerAnimation;
      lottie.loadAnimation = loadAnimation;
      lottie.setSubframeRendering = setSubframeRendering;
      lottie.resize = animationManager.resize; // lottie.start = start;

      lottie.goToAndStop = animationManager.goToAndStop;
      lottie.destroy = animationManager.destroy;
      lottie.setQuality = setQuality;
      lottie.inBrowser = inBrowser;
      lottie.installPlugin = installPlugin;
      lottie.freeze = animationManager.freeze;
      lottie.unfreeze = animationManager.unfreeze;
      lottie.setVolume = animationManager.setVolume;
      lottie.mute = animationManager.mute;
      lottie.unmute = animationManager.unmute;
      lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
      lottie.useWebWorker = setWebWorker;
      lottie.setIDPrefix = setPrefix;
      lottie.__getFactory = getFactory;
      lottie.version = '5.9.4';

      function checkReady() {
        if (document.readyState === 'complete') {
          clearInterval(readyStateCheckInterval);
          searchAnimations();
        }
      }

      function getQueryVariable(variable) {
        var vars = queryString.split('&');

        for (var i = 0; i < vars.length; i += 1) {
          var pair = vars[i].split('=');

          if (decodeURIComponent(pair[0]) == variable) {
            // eslint-disable-line eqeqeq
            return decodeURIComponent(pair[1]);
          }
        }

        return null;
      }

      var queryString = '';

      {
        var scripts = document.getElementsByTagName('script');
        var index = scripts.length - 1;
        var myScript = scripts[index] || {
          src: ''
        };
        queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, '') : ''; // eslint-disable-line no-useless-escape

        getQueryVariable('renderer');
      }

      var readyStateCheckInterval = setInterval(checkReady, 100); // this adds bodymovin to the window object for backwards compatibility

      try {
        if (!(('object' === "undefined" ? "undefined" : _typeof$3(exports)) === 'object' && 'object' !== 'undefined') && !(typeof undefined === 'function' && undefined.amd) // eslint-disable-line no-undef
        ) {
          window.bodymovin = lottie;
        }
      } catch (err) {//
      }

      var ShapeModifiers = function () {
        var ob = {};
        var modifiers = {};
        ob.registerModifier = registerModifier;
        ob.getModifier = getModifier;

        function registerModifier(nm, factory) {
          if (!modifiers[nm]) {
            modifiers[nm] = factory;
          }
        }

        function getModifier(nm, elem, data) {
          return new modifiers[nm](elem, data);
        }

        return ob;
      }();

      function ShapeModifier() {}

      ShapeModifier.prototype.initModifierProperties = function () {};

      ShapeModifier.prototype.addShapeToModifier = function () {};

      ShapeModifier.prototype.addShape = function (data) {
        if (!this.closed) {
          // Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.
          data.sh.container.addDynamicProperty(data.sh);
          var shapeData = {
            shape: data.sh,
            data: data,
            localShapeCollection: shapeCollectionPool.newShapeCollection()
          };
          this.shapes.push(shapeData);
          this.addShapeToModifier(shapeData);

          if (this._isAnimated) {
            data.setAsAnimated();
          }
        }
      };

      ShapeModifier.prototype.init = function (elem, data) {
        this.shapes = [];
        this.elem = elem;
        this.initDynamicPropertyContainer(elem);
        this.initModifierProperties(elem, data);
        this.frameId = initialDefaultFrame;
        this.closed = false;
        this.k = false;

        if (this.dynamicProperties.length) {
          this.k = true;
        } else {
          this.getValue(true);
        }
      };

      ShapeModifier.prototype.processKeys = function () {
        if (this.elem.globalData.frameId === this.frameId) {
          return;
        }

        this.frameId = this.elem.globalData.frameId;
        this.iterateDynamicProperties();
      };

      extendPrototype([DynamicPropertyContainer], ShapeModifier);

      function TrimModifier() {}

      extendPrototype([ShapeModifier], TrimModifier);

      TrimModifier.prototype.initModifierProperties = function (elem, data) {
        this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
        this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
        this.sValue = 0;
        this.eValue = 0;
        this.getValue = this.processKeys;
        this.m = data.m;
        this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
      };

      TrimModifier.prototype.addShapeToModifier = function (shapeData) {
        shapeData.pathsData = [];
      };

      TrimModifier.prototype.calculateShapeEdges = function (s, e, shapeLength, addedLength, totalModifierLength) {
        var segments = [];

        if (e <= 1) {
          segments.push({
            s: s,
            e: e
          });
        } else if (s >= 1) {
          segments.push({
            s: s - 1,
            e: e - 1
          });
        } else {
          segments.push({
            s: s,
            e: 1
          });
          segments.push({
            s: 0,
            e: e - 1
          });
        }

        var shapeSegments = [];
        var i;
        var len = segments.length;
        var segmentOb;

        for (i = 0; i < len; i += 1) {
          segmentOb = segments[i];

          if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
            var shapeS;
            var shapeE;

            if (segmentOb.s * totalModifierLength <= addedLength) {
              shapeS = 0;
            } else {
              shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
            }

            if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
              shapeE = 1;
            } else {
              shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
            }

            shapeSegments.push([shapeS, shapeE]);
          }
        }

        if (!shapeSegments.length) {
          shapeSegments.push([0, 0]);
        }

        return shapeSegments;
      };

      TrimModifier.prototype.releasePathsData = function (pathsData) {
        var i;
        var len = pathsData.length;

        for (i = 0; i < len; i += 1) {
          segmentsLengthPool.release(pathsData[i]);
        }

        pathsData.length = 0;
        return pathsData;
      };

      TrimModifier.prototype.processShapes = function (_isFirstFrame) {
        var s;
        var e;

        if (this._mdf || _isFirstFrame) {
          var o = this.o.v % 360 / 360;

          if (o < 0) {
            o += 1;
          }

          if (this.s.v > 1) {
            s = 1 + o;
          } else if (this.s.v < 0) {
            s = 0 + o;
          } else {
            s = this.s.v + o;
          }

          if (this.e.v > 1) {
            e = 1 + o;
          } else if (this.e.v < 0) {
            e = 0 + o;
          } else {
            e = this.e.v + o;
          }

          if (s > e) {
            var _s = s;
            s = e;
            e = _s;
          }

          s = Math.round(s * 10000) * 0.0001;
          e = Math.round(e * 10000) * 0.0001;
          this.sValue = s;
          this.eValue = e;
        } else {
          s = this.sValue;
          e = this.eValue;
        }

        var shapePaths;
        var i;
        var len = this.shapes.length;
        var j;
        var jLen;
        var pathsData;
        var pathData;
        var totalShapeLength;
        var totalModifierLength = 0;

        if (e === s) {
          for (i = 0; i < len; i += 1) {
            this.shapes[i].localShapeCollection.releaseShapes();
            this.shapes[i].shape._mdf = true;
            this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;

            if (this._mdf) {
              this.shapes[i].pathsData.length = 0;
            }
          }
        } else if (!(e === 1 && s === 0 || e === 0 && s === 1)) {
          var segments = [];
          var shapeData;
          var localShapeCollection;

          for (i = 0; i < len; i += 1) {
            shapeData = this.shapes[i]; // if shape hasn't changed and trim properties haven't changed, cached previous path can be used

            if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
              shapeData.shape.paths = shapeData.localShapeCollection;
            } else {
              shapePaths = shapeData.shape.paths;
              jLen = shapePaths._length;
              totalShapeLength = 0;

              if (!shapeData.shape._mdf && shapeData.pathsData.length) {
                totalShapeLength = shapeData.totalShapeLength;
              } else {
                pathsData = this.releasePathsData(shapeData.pathsData);

                for (j = 0; j < jLen; j += 1) {
                  pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
                  pathsData.push(pathData);
                  totalShapeLength += pathData.totalLength;
                }

                shapeData.totalShapeLength = totalShapeLength;
                shapeData.pathsData = pathsData;
              }

              totalModifierLength += totalShapeLength;
              shapeData.shape._mdf = true;
            }
          }

          var shapeS = s;
          var shapeE = e;
          var addedLength = 0;
          var edges;

          for (i = len - 1; i >= 0; i -= 1) {
            shapeData = this.shapes[i];

            if (shapeData.shape._mdf) {
              localShapeCollection = shapeData.localShapeCollection;
              localShapeCollection.releaseShapes(); // if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group

              if (this.m === 2 && len > 1) {
                edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
                addedLength += shapeData.totalShapeLength;
              } else {
                edges = [[shapeS, shapeE]];
              }

              jLen = edges.length;

              for (j = 0; j < jLen; j += 1) {
                shapeS = edges[j][0];
                shapeE = edges[j][1];
                segments.length = 0;

                if (shapeE <= 1) {
                  segments.push({
                    s: shapeData.totalShapeLength * shapeS,
                    e: shapeData.totalShapeLength * shapeE
                  });
                } else if (shapeS >= 1) {
                  segments.push({
                    s: shapeData.totalShapeLength * (shapeS - 1),
                    e: shapeData.totalShapeLength * (shapeE - 1)
                  });
                } else {
                  segments.push({
                    s: shapeData.totalShapeLength * shapeS,
                    e: shapeData.totalShapeLength
                  });
                  segments.push({
                    s: 0,
                    e: shapeData.totalShapeLength * (shapeE - 1)
                  });
                }

                var newShapesData = this.addShapes(shapeData, segments[0]);

                if (segments[0].s !== segments[0].e) {
                  if (segments.length > 1) {
                    var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];

                    if (lastShapeInCollection.c) {
                      var lastShape = newShapesData.pop();
                      this.addPaths(newShapesData, localShapeCollection);
                      newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                    } else {
                      this.addPaths(newShapesData, localShapeCollection);
                      newShapesData = this.addShapes(shapeData, segments[1]);
                    }
                  }

                  this.addPaths(newShapesData, localShapeCollection);
                }
              }

              shapeData.shape.paths = localShapeCollection;
            }
          }
        } else if (this._mdf) {
          for (i = 0; i < len; i += 1) {
            // Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
            // Don't remove this even if it's losing cached info.
            this.shapes[i].pathsData.length = 0;
            this.shapes[i].shape._mdf = true;
          }
        }
      };

      TrimModifier.prototype.addPaths = function (newPaths, localShapeCollection) {
        var i;
        var len = newPaths.length;

        for (i = 0; i < len; i += 1) {
          localShapeCollection.addShape(newPaths[i]);
        }
      };

      TrimModifier.prototype.addSegment = function (pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
        shapePath.setXYAt(pt2[0], pt2[1], 'o', pos);
        shapePath.setXYAt(pt3[0], pt3[1], 'i', pos + 1);

        if (newShape) {
          shapePath.setXYAt(pt1[0], pt1[1], 'v', pos);
        }

        shapePath.setXYAt(pt4[0], pt4[1], 'v', pos + 1);
      };

      TrimModifier.prototype.addSegmentFromArray = function (points, shapePath, pos, newShape) {
        shapePath.setXYAt(points[1], points[5], 'o', pos);
        shapePath.setXYAt(points[2], points[6], 'i', pos + 1);

        if (newShape) {
          shapePath.setXYAt(points[0], points[4], 'v', pos);
        }

        shapePath.setXYAt(points[3], points[7], 'v', pos + 1);
      };

      TrimModifier.prototype.addShapes = function (shapeData, shapeSegment, shapePath) {
        var pathsData = shapeData.pathsData;
        var shapePaths = shapeData.shape.paths.shapes;
        var i;
        var len = shapeData.shape.paths._length;
        var j;
        var jLen;
        var addedLength = 0;
        var currentLengthData;
        var segmentCount;
        var lengths;
        var segment;
        var shapes = [];
        var initPos;
        var newShape = true;

        if (!shapePath) {
          shapePath = shapePool.newElement();
          segmentCount = 0;
          initPos = 0;
        } else {
          segmentCount = shapePath._length;
          initPos = shapePath._length;
        }

        shapes.push(shapePath);

        for (i = 0; i < len; i += 1) {
          lengths = pathsData[i].lengths;
          shapePath.c = shapePaths[i].c;
          jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;

          for (j = 1; j < jLen; j += 1) {
            currentLengthData = lengths[j - 1];

            if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
              addedLength += currentLengthData.addedLength;
              shapePath.c = false;
            } else if (addedLength > shapeSegment.e) {
              shapePath.c = false;
              break;
            } else {
              if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
                this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
                newShape = false;
              } else {
                segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);
                this.addSegmentFromArray(segment, shapePath, segmentCount, newShape); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);

                newShape = false;
                shapePath.c = false;
              }

              addedLength += currentLengthData.addedLength;
              segmentCount += 1;
            }
          }

          if (shapePaths[i].c && lengths.length) {
            currentLengthData = lengths[j - 1];

            if (addedLength <= shapeSegment.e) {
              var segmentLength = lengths[j - 1].addedLength;

              if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
                this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
                newShape = false;
              } else {
                segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
                this.addSegmentFromArray(segment, shapePath, segmentCount, newShape); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);

                newShape = false;
                shapePath.c = false;
              }
            } else {
              shapePath.c = false;
            }

            addedLength += currentLengthData.addedLength;
            segmentCount += 1;
          }

          if (shapePath._length) {
            shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], 'i', initPos);
            shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], 'o', shapePath._length - 1);
          }

          if (addedLength > shapeSegment.e) {
            break;
          }

          if (i < len - 1) {
            shapePath = shapePool.newElement();
            newShape = true;
            shapes.push(shapePath);
            segmentCount = 0;
          }
        }

        return shapes;
      };

      function PuckerAndBloatModifier() {}

      extendPrototype([ShapeModifier], PuckerAndBloatModifier);

      PuckerAndBloatModifier.prototype.initModifierProperties = function (elem, data) {
        this.getValue = this.processKeys;
        this.amount = PropertyFactory.getProp(elem, data.a, 0, null, this);
        this._isAnimated = !!this.amount.effectsSequence.length;
      };

      PuckerAndBloatModifier.prototype.processPath = function (path, amount) {
        var percent = amount / 100;
        var centerPoint = [0, 0];
        var pathLength = path._length;
        var i = 0;

        for (i = 0; i < pathLength; i += 1) {
          centerPoint[0] += path.v[i][0];
          centerPoint[1] += path.v[i][1];
        }

        centerPoint[0] /= pathLength;
        centerPoint[1] /= pathLength;
        var clonedPath = shapePool.newElement();
        clonedPath.c = path.c;
        var vX;
        var vY;
        var oX;
        var oY;
        var iX;
        var iY;

        for (i = 0; i < pathLength; i += 1) {
          vX = path.v[i][0] + (centerPoint[0] - path.v[i][0]) * percent;
          vY = path.v[i][1] + (centerPoint[1] - path.v[i][1]) * percent;
          oX = path.o[i][0] + (centerPoint[0] - path.o[i][0]) * -percent;
          oY = path.o[i][1] + (centerPoint[1] - path.o[i][1]) * -percent;
          iX = path.i[i][0] + (centerPoint[0] - path.i[i][0]) * -percent;
          iY = path.i[i][1] + (centerPoint[1] - path.i[i][1]) * -percent;
          clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i);
        }

        return clonedPath;
      };

      PuckerAndBloatModifier.prototype.processShapes = function (_isFirstFrame) {
        var shapePaths;
        var i;
        var len = this.shapes.length;
        var j;
        var jLen;
        var amount = this.amount.v;

        if (amount !== 0) {
          var shapeData;
          var localShapeCollection;

          for (i = 0; i < len; i += 1) {
            shapeData = this.shapes[i];
            localShapeCollection = shapeData.localShapeCollection;

            if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
              localShapeCollection.releaseShapes();
              shapeData.shape._mdf = true;
              shapePaths = shapeData.shape.paths.shapes;
              jLen = shapeData.shape.paths._length;

              for (j = 0; j < jLen; j += 1) {
                localShapeCollection.addShape(this.processPath(shapePaths[j], amount));
              }
            }

            shapeData.shape.paths = shapeData.localShapeCollection;
          }
        }

        if (!this.dynamicProperties.length) {
          this._mdf = false;
        }
      };

      var TransformPropertyFactory = function () {
        var defaultVector = [0, 0];

        function applyToMatrix(mat) {
          var _mdf = this._mdf;
          this.iterateDynamicProperties();
          this._mdf = this._mdf || _mdf;

          if (this.a) {
            mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
          }

          if (this.s) {
            mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
          }

          if (this.sk) {
            mat.skewFromAxis(-this.sk.v, this.sa.v);
          }

          if (this.r) {
            mat.rotate(-this.r.v);
          } else {
            mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
          }

          if (this.data.p.s) {
            if (this.data.p.z) {
              mat.translate(this.px.v, this.py.v, -this.pz.v);
            } else {
              mat.translate(this.px.v, this.py.v, 0);
            }
          } else {
            mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
          }
        }

        function processKeys(forceRender) {
          if (this.elem.globalData.frameId === this.frameId) {
            return;
          }

          if (this._isDirty) {
            this.precalculateMatrix();
            this._isDirty = false;
          }

          this.iterateDynamicProperties();

          if (this._mdf || forceRender) {
            var frameRate;
            this.v.cloneFromProps(this.pre.props);

            if (this.appliedTransformations < 1) {
              this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            }

            if (this.appliedTransformations < 2) {
              this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            }

            if (this.sk && this.appliedTransformations < 3) {
              this.v.skewFromAxis(-this.sk.v, this.sa.v);
            }

            if (this.r && this.appliedTransformations < 4) {
              this.v.rotate(-this.r.v);
            } else if (!this.r && this.appliedTransformations < 4) {
              this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            }

            if (this.autoOriented) {
              var v1;
              var v2;
              frameRate = this.elem.globalData.frameRate;

              if (this.p && this.p.keyframes && this.p.getValueAtTime) {
                if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                  v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                  v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
                } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                  v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                  v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
                } else {
                  v1 = this.p.pv;
                  v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
                }
              } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                v1 = [];
                v2 = [];
                var px = this.px;
                var py = this.py;

                if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                  v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                  v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                  v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
                  v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
                } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                  v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
                  v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                  v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                  v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
                } else {
                  v1 = [px.pv, py.pv];
                  v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                  v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
                }
              } else {
                v2 = defaultVector;
                v1 = v2;
              }

              this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
            }

            if (this.data.p && this.data.p.s) {
              if (this.data.p.z) {
                this.v.translate(this.px.v, this.py.v, -this.pz.v);
              } else {
                this.v.translate(this.px.v, this.py.v, 0);
              }
            } else {
              this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
            }
          }

          this.frameId = this.elem.globalData.frameId;
        }

        function precalculateMatrix() {
          if (!this.a.k) {
            this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            this.appliedTransformations = 1;
          } else {
            return;
          }

          if (!this.s.effectsSequence.length) {
            this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            this.appliedTransformations = 2;
          } else {
            return;
          }

          if (this.sk) {
            if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
              this.pre.skewFromAxis(-this.sk.v, this.sa.v);
              this.appliedTransformations = 3;
            } else {
              return;
            }
          }

          if (this.r) {
            if (!this.r.effectsSequence.length) {
              this.pre.rotate(-this.r.v);
              this.appliedTransformations = 4;
            }
          } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
            this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            this.appliedTransformations = 4;
          }
        }

        function autoOrient() {//
          // var prevP = this.getValueAtTime();
        }

        function addDynamicProperty(prop) {
          this._addDynamicProperty(prop);

          this.elem.addDynamicProperty(prop);
          this._isDirty = true;
        }

        function TransformProperty(elem, data, container) {
          this.elem = elem;
          this.frameId = -1;
          this.propType = 'transform';
          this.data = data;
          this.v = new Matrix(); // Precalculated matrix with non animated properties

          this.pre = new Matrix();
          this.appliedTransformations = 0;
          this.initDynamicPropertyContainer(container || elem);

          if (data.p && data.p.s) {
            this.px = PropertyFactory.getProp(elem, data.p.x, 0, 0, this);
            this.py = PropertyFactory.getProp(elem, data.p.y, 0, 0, this);

            if (data.p.z) {
              this.pz = PropertyFactory.getProp(elem, data.p.z, 0, 0, this);
            }
          } else {
            this.p = PropertyFactory.getProp(elem, data.p || {
              k: [0, 0, 0]
            }, 1, 0, this);
          }

          if (data.rx) {
            this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
            this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
            this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);

            if (data.or.k[0].ti) {
              var i;
              var len = data.or.k.length;

              for (i = 0; i < len; i += 1) {
                data.or.k[i].to = null;
                data.or.k[i].ti = null;
              }
            }

            this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this); // sh Indicates it needs to be capped between -180 and 180

            this.or.sh = true;
          } else {
            this.r = PropertyFactory.getProp(elem, data.r || {
              k: 0
            }, 0, degToRads, this);
          }

          if (data.sk) {
            this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
            this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
          }

          this.a = PropertyFactory.getProp(elem, data.a || {
            k: [0, 0, 0]
          }, 1, 0, this);
          this.s = PropertyFactory.getProp(elem, data.s || {
            k: [100, 100, 100]
          }, 1, 0.01, this); // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.

          if (data.o) {
            this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, elem);
          } else {
            this.o = {
              _mdf: false,
              v: 1
            };
          }

          this._isDirty = true;

          if (!this.dynamicProperties.length) {
            this.getValue(true);
          }
        }

        TransformProperty.prototype = {
          applyToMatrix: applyToMatrix,
          getValue: processKeys,
          precalculateMatrix: precalculateMatrix,
          autoOrient: autoOrient
        };
        extendPrototype([DynamicPropertyContainer], TransformProperty);
        TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
        TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;

        function getTransformProperty(elem, data, container) {
          return new TransformProperty(elem, data, container);
        }

        return {
          getTransformProperty: getTransformProperty
        };
      }();

      function RepeaterModifier() {}

      extendPrototype([ShapeModifier], RepeaterModifier);

      RepeaterModifier.prototype.initModifierProperties = function (elem, data) {
        this.getValue = this.processKeys;
        this.c = PropertyFactory.getProp(elem, data.c, 0, null, this);
        this.o = PropertyFactory.getProp(elem, data.o, 0, null, this);
        this.tr = TransformPropertyFactory.getTransformProperty(elem, data.tr, this);
        this.so = PropertyFactory.getProp(elem, data.tr.so, 0, 0.01, this);
        this.eo = PropertyFactory.getProp(elem, data.tr.eo, 0, 0.01, this);
        this.data = data;

        if (!this.dynamicProperties.length) {
          this.getValue(true);
        }

        this._isAnimated = !!this.dynamicProperties.length;
        this.pMatrix = new Matrix();
        this.rMatrix = new Matrix();
        this.sMatrix = new Matrix();
        this.tMatrix = new Matrix();
        this.matrix = new Matrix();
      };

      RepeaterModifier.prototype.applyTransforms = function (pMatrix, rMatrix, sMatrix, transform, perc, inv) {
        var dir = inv ? -1 : 1;
        var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
        var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
        pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
        rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
        rMatrix.rotate(-transform.r.v * dir * perc);
        rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
        sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
        sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
        sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
      };

      RepeaterModifier.prototype.init = function (elem, arr, pos, elemsData) {
        this.elem = elem;
        this.arr = arr;
        this.pos = pos;
        this.elemsData = elemsData;
        this._currentCopies = 0;
        this._elements = [];
        this._groups = [];
        this.frameId = -1;
        this.initDynamicPropertyContainer(elem);
        this.initModifierProperties(elem, arr[pos]);

        while (pos > 0) {
          pos -= 1; // this._elements.unshift(arr.splice(pos,1)[0]);

          this._elements.unshift(arr[pos]);
        }

        if (this.dynamicProperties.length) {
          this.k = true;
        } else {
          this.getValue(true);
        }
      };

      RepeaterModifier.prototype.resetElements = function (elements) {
        var i;
        var len = elements.length;

        for (i = 0; i < len; i += 1) {
          elements[i]._processed = false;

          if (elements[i].ty === 'gr') {
            this.resetElements(elements[i].it);
          }
        }
      };

      RepeaterModifier.prototype.cloneElements = function (elements) {
        var newElements = JSON.parse(JSON.stringify(elements));
        this.resetElements(newElements);
        return newElements;
      };

      RepeaterModifier.prototype.changeGroupRender = function (elements, renderFlag) {
        var i;
        var len = elements.length;

        for (i = 0; i < len; i += 1) {
          elements[i]._render = renderFlag;

          if (elements[i].ty === 'gr') {
            this.changeGroupRender(elements[i].it, renderFlag);
          }
        }
      };

      RepeaterModifier.prototype.processShapes = function (_isFirstFrame) {
        var items;
        var itemsTransform;
        var i;
        var dir;
        var cont;
        var hasReloaded = false;

        if (this._mdf || _isFirstFrame) {
          var copies = Math.ceil(this.c.v);

          if (this._groups.length < copies) {
            while (this._groups.length < copies) {
              var group = {
                it: this.cloneElements(this._elements),
                ty: 'gr'
              };
              group.it.push({
                a: {
                  a: 0,
                  ix: 1,
                  k: [0, 0]
                },
                nm: 'Transform',
                o: {
                  a: 0,
                  ix: 7,
                  k: 100
                },
                p: {
                  a: 0,
                  ix: 2,
                  k: [0, 0]
                },
                r: {
                  a: 1,
                  ix: 6,
                  k: [{
                    s: 0,
                    e: 0,
                    t: 0
                  }, {
                    s: 0,
                    e: 0,
                    t: 1
                  }]
                },
                s: {
                  a: 0,
                  ix: 3,
                  k: [100, 100]
                },
                sa: {
                  a: 0,
                  ix: 5,
                  k: 0
                },
                sk: {
                  a: 0,
                  ix: 4,
                  k: 0
                },
                ty: 'tr'
              });
              this.arr.splice(0, 0, group);

              this._groups.splice(0, 0, group);

              this._currentCopies += 1;
            }

            this.elem.reloadShapes();
            hasReloaded = true;
          }

          cont = 0;
          var renderFlag;

          for (i = 0; i <= this._groups.length - 1; i += 1) {
            renderFlag = cont < copies;
            this._groups[i]._render = renderFlag;
            this.changeGroupRender(this._groups[i].it, renderFlag);

            if (!renderFlag) {
              var elems = this.elemsData[i].it;
              var transformData = elems[elems.length - 1];

              if (transformData.transform.op.v !== 0) {
                transformData.transform.op._mdf = true;
                transformData.transform.op.v = 0;
              } else {
                transformData.transform.op._mdf = false;
              }
            }

            cont += 1;
          }

          this._currentCopies = copies; /// /

          var offset = this.o.v;
          var offsetModulo = offset % 1;
          var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
          var pProps = this.pMatrix.props;
          var rProps = this.rMatrix.props;
          var sProps = this.sMatrix.props;
          this.pMatrix.reset();
          this.rMatrix.reset();
          this.sMatrix.reset();
          this.tMatrix.reset();
          this.matrix.reset();
          var iteration = 0;

          if (offset > 0) {
            while (iteration < roundOffset) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
              iteration += 1;
            }

            if (offsetModulo) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
              iteration += offsetModulo;
            }
          } else if (offset < 0) {
            while (iteration > roundOffset) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
              iteration -= 1;
            }

            if (offsetModulo) {
              this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
              iteration -= offsetModulo;
            }
          }

          i = this.data.m === 1 ? 0 : this._currentCopies - 1;
          dir = this.data.m === 1 ? 1 : -1;
          cont = this._currentCopies;
          var j;
          var jLen;

          while (cont) {
            items = this.elemsData[i].it;
            itemsTransform = items[items.length - 1].transform.mProps.v.props;
            jLen = itemsTransform.length;
            items[items.length - 1].transform.mProps._mdf = true;
            items[items.length - 1].transform.op._mdf = true;
            items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1));

            if (iteration !== 0) {
              if (i !== 0 && dir === 1 || i !== this._currentCopies - 1 && dir === -1) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
              }

              this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
              this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
              this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);

              for (j = 0; j < jLen; j += 1) {
                itemsTransform[j] = this.matrix.props[j];
              }

              this.matrix.reset();
            } else {
              this.matrix.reset();

              for (j = 0; j < jLen; j += 1) {
                itemsTransform[j] = this.matrix.props[j];
              }
            }

            iteration += 1;
            cont -= 1;
            i += dir;
          }
        } else {
          cont = this._currentCopies;
          i = 0;
          dir = 1;

          while (cont) {
            items = this.elemsData[i].it;
            itemsTransform = items[items.length - 1].transform.mProps.v.props;
            items[items.length - 1].transform.mProps._mdf = false;
            items[items.length - 1].transform.op._mdf = false;
            cont -= 1;
            i += dir;
          }
        }

        return hasReloaded;
      };

      RepeaterModifier.prototype.addShape = function () {};

      function RoundCornersModifier() {}

      extendPrototype([ShapeModifier], RoundCornersModifier);

      RoundCornersModifier.prototype.initModifierProperties = function (elem, data) {
        this.getValue = this.processKeys;
        this.rd = PropertyFactory.getProp(elem, data.r, 0, null, this);
        this._isAnimated = !!this.rd.effectsSequence.length;
      };

      RoundCornersModifier.prototype.processPath = function (path, round) {
        var clonedPath = shapePool.newElement();
        clonedPath.c = path.c;
        var i;
        var len = path._length;
        var currentV;
        var currentI;
        var currentO;
        var closerV;
        var distance;
        var newPosPerc;
        var index = 0;
        var vX;
        var vY;
        var oX;
        var oY;
        var iX;
        var iY;

        for (i = 0; i < len; i += 1) {
          currentV = path.v[i];
          currentO = path.o[i];
          currentI = path.i[i];

          if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
            if ((i === 0 || i === len - 1) && !path.c) {
              clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index);
              /* clonedPath.v[index] = currentV;
                      clonedPath.o[index] = currentO;
                      clonedPath.i[index] = currentI; */

              index += 1;
            } else {
              if (i === 0) {
                closerV = path.v[len - 1];
              } else {
                closerV = path.v[i - 1];
              }

              distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
              newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
              iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
              vX = iX;
              iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
              vY = iY;
              oX = vX - (vX - currentV[0]) * roundCorner;
              oY = vY - (vY - currentV[1]) * roundCorner;
              clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index);
              index += 1;

              if (i === len - 1) {
                closerV = path.v[0];
              } else {
                closerV = path.v[i + 1];
              }

              distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
              newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
              oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
              vX = oX;
              oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
              vY = oY;
              iX = vX - (vX - currentV[0]) * roundCorner;
              iY = vY - (vY - currentV[1]) * roundCorner;
              clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index);
              index += 1;
            }
          } else {
            clonedPath.setTripleAt(path.v[i][0], path.v[i][1], path.o[i][0], path.o[i][1], path.i[i][0], path.i[i][1], index);
            index += 1;
          }
        }

        return clonedPath;
      };

      RoundCornersModifier.prototype.processShapes = function (_isFirstFrame) {
        var shapePaths;
        var i;
        var len = this.shapes.length;
        var j;
        var jLen;
        var rd = this.rd.v;

        if (rd !== 0) {
          var shapeData;
          var localShapeCollection;

          for (i = 0; i < len; i += 1) {
            shapeData = this.shapes[i];
            localShapeCollection = shapeData.localShapeCollection;

            if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
              localShapeCollection.releaseShapes();
              shapeData.shape._mdf = true;
              shapePaths = shapeData.shape.paths.shapes;
              jLen = shapeData.shape.paths._length;

              for (j = 0; j < jLen; j += 1) {
                localShapeCollection.addShape(this.processPath(shapePaths[j], rd));
              }
            }

            shapeData.shape.paths = shapeData.localShapeCollection;
          }
        }

        if (!this.dynamicProperties.length) {
          this._mdf = false;
        }
      };

      function getFontProperties(fontData) {
        var styles = fontData.fStyle ? fontData.fStyle.split(' ') : [];
        var fWeight = 'normal';
        var fStyle = 'normal';
        var len = styles.length;
        var styleName;

        for (var i = 0; i < len; i += 1) {
          styleName = styles[i].toLowerCase();

          switch (styleName) {
            case 'italic':
              fStyle = 'italic';
              break;

            case 'bold':
              fWeight = '700';
              break;

            case 'black':
              fWeight = '900';
              break;

            case 'medium':
              fWeight = '500';
              break;

            case 'regular':
            case 'normal':
              fWeight = '400';
              break;

            case 'light':
            case 'thin':
              fWeight = '200';
              break;
          }
        }

        return {
          style: fStyle,
          weight: fontData.fWeight || fWeight
        };
      }

      var FontManager = function () {
        var maxWaitingTime = 5000;
        var emptyChar = {
          w: 0,
          size: 0,
          shapes: [],
          data: {
            shapes: []
          }
        };
        var combinedCharacters = []; // Hindi characters

        combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
        var surrogateModifiers = ['d83cdffb', 'd83cdffc', 'd83cdffd', 'd83cdffe', 'd83cdfff'];
        var zeroWidthJoiner = [65039, 8205];

        function trimFontOptions(font) {
          var familyArray = font.split(',');
          var i;
          var len = familyArray.length;
          var enabledFamilies = [];

          for (i = 0; i < len; i += 1) {
            if (familyArray[i] !== 'sans-serif' && familyArray[i] !== 'monospace') {
              enabledFamilies.push(familyArray[i]);
            }
          }

          return enabledFamilies.join(',');
        }

        function setUpNode(font, family) {
          var parentNode = createTag('span'); // Node is invisible to screen readers.

          parentNode.setAttribute('aria-hidden', true);
          parentNode.style.fontFamily = family;
          var node = createTag('span'); // Characters that vary significantly among different fonts

          node.innerText = 'giItT1WQy@!-/#'; // Visible - so we can measure it - but not on the screen

          parentNode.style.position = 'absolute';
          parentNode.style.left = '-10000px';
          parentNode.style.top = '-10000px'; // Large font size makes even subtle changes obvious

          parentNode.style.fontSize = '300px'; // Reset any font properties

          parentNode.style.fontVariant = 'normal';
          parentNode.style.fontStyle = 'normal';
          parentNode.style.fontWeight = 'normal';
          parentNode.style.letterSpacing = '0';
          parentNode.appendChild(node);
          document.body.appendChild(parentNode); // Remember width with no applied web font

          var width = node.offsetWidth;
          node.style.fontFamily = trimFontOptions(font) + ', ' + family;
          return {
            node: node,
            w: width,
            parent: parentNode
          };
        }

        function checkLoadedFonts() {
          var i;
          var len = this.fonts.length;
          var node;
          var w;
          var loadedCount = len;

          for (i = 0; i < len; i += 1) {
            if (this.fonts[i].loaded) {
              loadedCount -= 1;
            } else if (this.fonts[i].fOrigin === 'n' || this.fonts[i].origin === 0) {
              this.fonts[i].loaded = true;
            } else {
              node = this.fonts[i].monoCase.node;
              w = this.fonts[i].monoCase.w;

              if (node.offsetWidth !== w) {
                loadedCount -= 1;
                this.fonts[i].loaded = true;
              } else {
                node = this.fonts[i].sansCase.node;
                w = this.fonts[i].sansCase.w;

                if (node.offsetWidth !== w) {
                  loadedCount -= 1;
                  this.fonts[i].loaded = true;
                }
              }

              if (this.fonts[i].loaded) {
                this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
                this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
              }
            }
          }

          if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
            setTimeout(this.checkLoadedFontsBinded, 20);
          } else {
            setTimeout(this.setIsLoadedBinded, 10);
          }
        }

        function createHelper(fontData, def) {
          var engine = document.body && def ? 'svg' : 'canvas';
          var helper;
          var fontProps = getFontProperties(fontData);

          if (engine === 'svg') {
            var tHelper = createNS('text');
            tHelper.style.fontSize = '100px'; // tHelper.style.fontFamily = fontData.fFamily;

            tHelper.setAttribute('font-family', fontData.fFamily);
            tHelper.setAttribute('font-style', fontProps.style);
            tHelper.setAttribute('font-weight', fontProps.weight);
            tHelper.textContent = '1';

            if (fontData.fClass) {
              tHelper.style.fontFamily = 'inherit';
              tHelper.setAttribute('class', fontData.fClass);
            } else {
              tHelper.style.fontFamily = fontData.fFamily;
            }

            def.appendChild(tHelper);
            helper = tHelper;
          } else {
            var tCanvasHelper = new OffscreenCanvas(500, 500).getContext('2d');
            tCanvasHelper.font = fontProps.style + ' ' + fontProps.weight + ' 100px ' + fontData.fFamily;
            helper = tCanvasHelper;
          }

          function measure(text) {
            if (engine === 'svg') {
              helper.textContent = text;
              return helper.getComputedTextLength();
            }

            return helper.measureText(text).width;
          }

          return {
            measureText: measure
          };
        }

        function addFonts(fontData, defs) {
          if (!fontData) {
            this.isLoaded = true;
            return;
          }

          if (this.chars) {
            this.isLoaded = true;
            this.fonts = fontData.list;
            return;
          }

          if (!document.body) {
            this.isLoaded = true;
            fontData.list.forEach(function (data) {
              data.helper = createHelper(data);
              data.cache = {};
            });
            this.fonts = fontData.list;
            return;
          }

          var fontArr = fontData.list;
          var i;
          var len = fontArr.length;
          var _pendingFonts = len;

          for (i = 0; i < len; i += 1) {
            var shouldLoadFont = true;
            var loadedSelector;
            var j;
            fontArr[i].loaded = false;
            fontArr[i].monoCase = setUpNode(fontArr[i].fFamily, 'monospace');
            fontArr[i].sansCase = setUpNode(fontArr[i].fFamily, 'sans-serif');

            if (!fontArr[i].fPath) {
              fontArr[i].loaded = true;
              _pendingFonts -= 1;
            } else if (fontArr[i].fOrigin === 'p' || fontArr[i].origin === 3) {
              loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i].fFamily + '"]');

              if (loadedSelector.length > 0) {
                shouldLoadFont = false;
              }

              if (shouldLoadFont) {
                var s = createTag('style');
                s.setAttribute('f-forigin', fontArr[i].fOrigin);
                s.setAttribute('f-origin', fontArr[i].origin);
                s.setAttribute('f-family', fontArr[i].fFamily);
                s.type = 'text/css';
                s.innerText = '@font-face {font-family: ' + fontArr[i].fFamily + "; font-style: normal; src: url('" + fontArr[i].fPath + "');}";
                defs.appendChild(s);
              }
            } else if (fontArr[i].fOrigin === 'g' || fontArr[i].origin === 1) {
              loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');

              for (j = 0; j < loadedSelector.length; j += 1) {
                if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {
                  // Font is already loaded
                  shouldLoadFont = false;
                }
              }

              if (shouldLoadFont) {
                var l = createTag('link');
                l.setAttribute('f-forigin', fontArr[i].fOrigin);
                l.setAttribute('f-origin', fontArr[i].origin);
                l.type = 'text/css';
                l.rel = 'stylesheet';
                l.href = fontArr[i].fPath;
                document.body.appendChild(l);
              }
            } else if (fontArr[i].fOrigin === 't' || fontArr[i].origin === 2) {
              loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');

              for (j = 0; j < loadedSelector.length; j += 1) {
                if (fontArr[i].fPath === loadedSelector[j].src) {
                  // Font is already loaded
                  shouldLoadFont = false;
                }
              }

              if (shouldLoadFont) {
                var sc = createTag('link');
                sc.setAttribute('f-forigin', fontArr[i].fOrigin);
                sc.setAttribute('f-origin', fontArr[i].origin);
                sc.setAttribute('rel', 'stylesheet');
                sc.setAttribute('href', fontArr[i].fPath);
                defs.appendChild(sc);
              }
            }

            fontArr[i].helper = createHelper(fontArr[i], defs);
            fontArr[i].cache = {};
            this.fonts.push(fontArr[i]);
          }

          if (_pendingFonts === 0) {
            this.isLoaded = true;
          } else {
            // On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
            // Adding this timeout seems to fix it
            setTimeout(this.checkLoadedFonts.bind(this), 100);
          }
        }

        function addChars(chars) {
          if (!chars) {
            return;
          }

          if (!this.chars) {
            this.chars = [];
          }

          var i;
          var len = chars.length;
          var j;
          var jLen = this.chars.length;
          var found;

          for (i = 0; i < len; i += 1) {
            j = 0;
            found = false;

            while (j < jLen) {
              if (this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch) {
                found = true;
              }

              j += 1;
            }

            if (!found) {
              this.chars.push(chars[i]);
              jLen += 1;
            }
          }
        }

        function getCharData(_char, style, font) {
          var i = 0;
          var len = this.chars.length;

          while (i < len) {
            if (this.chars[i].ch === _char && this.chars[i].style === style && this.chars[i].fFamily === font) {
              return this.chars[i];
            }

            i += 1;
          }

          if ((typeof _char === 'string' && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn // eslint-disable-line no-console
          && !this._warned) {
            this._warned = true;
            console.warn('Missing character from exported characters list: ', _char, style, font); // eslint-disable-line no-console
          }

          return emptyChar;
        }

        function measureText(_char2, fontName, size) {
          var fontData = this.getFontByName(fontName);

          var index = _char2.charCodeAt(0);

          if (!fontData.cache[index + 1]) {
            var tHelper = fontData.helper;

            if (_char2 === ' ') {
              var doubleSize = tHelper.measureText('|' + _char2 + '|');
              var singleSize = tHelper.measureText('||');
              fontData.cache[index + 1] = (doubleSize - singleSize) / 100;
            } else {
              fontData.cache[index + 1] = tHelper.measureText(_char2) / 100;
            }
          }

          return fontData.cache[index + 1] * size;
        }

        function getFontByName(name) {
          var i = 0;
          var len = this.fonts.length;

          while (i < len) {
            if (this.fonts[i].fName === name) {
              return this.fonts[i];
            }

            i += 1;
          }

          return this.fonts[0];
        }

        function isModifier(firstCharCode, secondCharCode) {
          var sum = firstCharCode.toString(16) + secondCharCode.toString(16);
          return surrogateModifiers.indexOf(sum) !== -1;
        }

        function isZeroWidthJoiner(firstCharCode, secondCharCode) {
          if (!secondCharCode) {
            return firstCharCode === zeroWidthJoiner[1];
          }

          return firstCharCode === zeroWidthJoiner[0] && secondCharCode === zeroWidthJoiner[1];
        }

        function isCombinedCharacter(_char3) {
          return combinedCharacters.indexOf(_char3) !== -1;
        }

        function setIsLoaded() {
          this.isLoaded = true;
        }

        var Font = function Font() {
          this.fonts = [];
          this.chars = null;
          this.typekitLoaded = 0;
          this.isLoaded = false;
          this._warned = false;
          this.initTime = Date.now();
          this.setIsLoadedBinded = this.setIsLoaded.bind(this);
          this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
        };

        Font.isModifier = isModifier;
        Font.isZeroWidthJoiner = isZeroWidthJoiner;
        Font.isCombinedCharacter = isCombinedCharacter;
        var fontPrototype = {
          addChars: addChars,
          addFonts: addFonts,
          getCharData: getCharData,
          getFontByName: getFontByName,
          measureText: measureText,
          checkLoadedFonts: checkLoadedFonts,
          setIsLoaded: setIsLoaded
        };
        Font.prototype = fontPrototype;
        return Font;
      }();

      function RenderableElement() {}

      RenderableElement.prototype = {
        initRenderable: function initRenderable() {
          // layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
          this.isInRange = false; // layer's display state

          this.hidden = false; // If layer's transparency equals 0, it can be hidden

          this.isTransparent = false; // list of animated components

          this.renderableComponents = [];
        },
        addRenderableComponent: function addRenderableComponent(component) {
          if (this.renderableComponents.indexOf(component) === -1) {
            this.renderableComponents.push(component);
          }
        },
        removeRenderableComponent: function removeRenderableComponent(component) {
          if (this.renderableComponents.indexOf(component) !== -1) {
            this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
          }
        },
        prepareRenderableFrame: function prepareRenderableFrame(num) {
          this.checkLayerLimits(num);
        },
        checkTransparency: function checkTransparency() {
          if (this.finalTransform.mProp.o.v <= 0) {
            if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
              this.isTransparent = true;
              this.hide();
            }
          } else if (this.isTransparent) {
            this.isTransparent = false;
            this.show();
          }
        },

        /**
           * @function
           * Initializes frame related properties.
           *
           * @param {number} num
           * current frame number in Layer's time
           *
           */
        checkLayerLimits: function checkLayerLimits(num) {
          if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
            if (this.isInRange !== true) {
              this.globalData._mdf = true;
              this._mdf = true;
              this.isInRange = true;
              this.show();
            }
          } else if (this.isInRange !== false) {
            this.globalData._mdf = true;
            this.isInRange = false;
            this.hide();
          }
        },
        renderRenderable: function renderRenderable() {
          var i;
          var len = this.renderableComponents.length;

          for (i = 0; i < len; i += 1) {
            this.renderableComponents[i].renderFrame(this._isFirstFrame);
          }
          /* this.maskManager.renderFrame(this.finalTransform.mat);
              this.renderableEffectsManager.renderFrame(this._isFirstFrame); */

        },
        sourceRectAtTime: function sourceRectAtTime() {
          return {
            top: 0,
            left: 0,
            width: 100,
            height: 100
          };
        },
        getLayerSize: function getLayerSize() {
          if (this.data.ty === 5) {
            return {
              w: this.data.textData.width,
              h: this.data.textData.height
            };
          }

          return {
            w: this.data.width,
            h: this.data.height
          };
        }
      };

      var MaskManagerInterface = function () {
        function MaskInterface(mask, data) {
          this._mask = mask;
          this._data = data;
        }

        Object.defineProperty(MaskInterface.prototype, 'maskPath', {
          get: function get() {
            if (this._mask.prop.k) {
              this._mask.prop.getValue();
            }

            return this._mask.prop;
          }
        });
        Object.defineProperty(MaskInterface.prototype, 'maskOpacity', {
          get: function get() {
            if (this._mask.op.k) {
              this._mask.op.getValue();
            }

            return this._mask.op.v * 100;
          }
        });

        var MaskManager = function MaskManager(maskManager) {
          var _masksInterfaces = createSizedArray(maskManager.viewData.length);

          var i;
          var len = maskManager.viewData.length;

          for (i = 0; i < len; i += 1) {
            _masksInterfaces[i] = new MaskInterface(maskManager.viewData[i], maskManager.masksProperties[i]);
          }

          var maskFunction = function maskFunction(name) {
            i = 0;

            while (i < len) {
              if (maskManager.masksProperties[i].nm === name) {
                return _masksInterfaces[i];
              }

              i += 1;
            }

            return null;
          };

          return maskFunction;
        };

        return MaskManager;
      }();

      var ExpressionPropertyInterface = function () {
        var defaultUnidimensionalValue = {
          pv: 0,
          v: 0,
          mult: 1
        };
        var defaultMultidimensionalValue = {
          pv: [0, 0, 0],
          v: [0, 0, 0],
          mult: 1
        };

        function completeProperty(expressionValue, property, type) {
          Object.defineProperty(expressionValue, 'velocity', {
            get: function get() {
              return property.getVelocityAtTime(property.comp.currentFrame);
            }
          });
          expressionValue.numKeys = property.keyframes ? property.keyframes.length : 0;

          expressionValue.key = function (pos) {
            if (!expressionValue.numKeys) {
              return 0;
            }

            var value = '';

            if ('s' in property.keyframes[pos - 1]) {
              value = property.keyframes[pos - 1].s;
            } else if ('e' in property.keyframes[pos - 2]) {
              value = property.keyframes[pos - 2].e;
            } else {
              value = property.keyframes[pos - 2].s;
            }

            var valueProp = type === 'unidimensional' ? new Number(value) : Object.assign({}, value); // eslint-disable-line no-new-wrappers

            valueProp.time = property.keyframes[pos - 1].t / property.elem.comp.globalData.frameRate;
            valueProp.value = type === 'unidimensional' ? value[0] : value;
            return valueProp;
          };

          expressionValue.valueAtTime = property.getValueAtTime;
          expressionValue.speedAtTime = property.getSpeedAtTime;
          expressionValue.velocityAtTime = property.getVelocityAtTime;
          expressionValue.propertyGroup = property.propertyGroup;
        }

        function UnidimensionalPropertyInterface(property) {
          if (!property || !('pv' in property)) {
            property = defaultUnidimensionalValue;
          }

          var mult = 1 / property.mult;
          var val = property.pv * mult;
          var expressionValue = new Number(val); // eslint-disable-line no-new-wrappers

          expressionValue.value = val;
          completeProperty(expressionValue, property, 'unidimensional');
          return function () {
            if (property.k) {
              property.getValue();
            }

            val = property.v * mult;

            if (expressionValue.value !== val) {
              expressionValue = new Number(val); // eslint-disable-line no-new-wrappers

              expressionValue.value = val;
              completeProperty(expressionValue, property, 'unidimensional');
            }

            return expressionValue;
          };
        }

        function MultidimensionalPropertyInterface(property) {
          if (!property || !('pv' in property)) {
            property = defaultMultidimensionalValue;
          }

          var mult = 1 / property.mult;
          var len = property.data && property.data.l || property.pv.length;
          var expressionValue = createTypedArray('float32', len);
          var arrValue = createTypedArray('float32', len);
          expressionValue.value = arrValue;
          completeProperty(expressionValue, property, 'multidimensional');
          return function () {
            if (property.k) {
              property.getValue();
            }

            for (var i = 0; i < len; i += 1) {
              arrValue[i] = property.v[i] * mult;
              expressionValue[i] = arrValue[i];
            }

            return expressionValue;
          };
        } // TODO: try to avoid using this getter


        function defaultGetter() {
          return defaultUnidimensionalValue;
        }

        return function (property) {
          if (!property) {
            return defaultGetter;
          }

          if (property.propType === 'unidimensional') {
            return UnidimensionalPropertyInterface(property);
          }

          return MultidimensionalPropertyInterface(property);
        };
      }();

      var TransformExpressionInterface = function () {
        return function (transform) {
          function _thisFunction(name) {
            switch (name) {
              case 'scale':
              case 'Scale':
              case 'ADBE Scale':
              case 6:
                return _thisFunction.scale;

              case 'rotation':
              case 'Rotation':
              case 'ADBE Rotation':
              case 'ADBE Rotate Z':
              case 10:
                return _thisFunction.rotation;

              case 'ADBE Rotate X':
                return _thisFunction.xRotation;

              case 'ADBE Rotate Y':
                return _thisFunction.yRotation;

              case 'position':
              case 'Position':
              case 'ADBE Position':
              case 2:
                return _thisFunction.position;

              case 'ADBE Position_0':
                return _thisFunction.xPosition;

              case 'ADBE Position_1':
                return _thisFunction.yPosition;

              case 'ADBE Position_2':
                return _thisFunction.zPosition;

              case 'anchorPoint':
              case 'AnchorPoint':
              case 'Anchor Point':
              case 'ADBE AnchorPoint':
              case 1:
                return _thisFunction.anchorPoint;

              case 'opacity':
              case 'Opacity':
              case 11:
                return _thisFunction.opacity;

              default:
                return null;
            }
          }

          Object.defineProperty(_thisFunction, 'rotation', {
            get: ExpressionPropertyInterface(transform.r || transform.rz)
          });
          Object.defineProperty(_thisFunction, 'zRotation', {
            get: ExpressionPropertyInterface(transform.rz || transform.r)
          });
          Object.defineProperty(_thisFunction, 'xRotation', {
            get: ExpressionPropertyInterface(transform.rx)
          });
          Object.defineProperty(_thisFunction, 'yRotation', {
            get: ExpressionPropertyInterface(transform.ry)
          });
          Object.defineProperty(_thisFunction, 'scale', {
            get: ExpressionPropertyInterface(transform.s)
          });

          var _px;

          var _py;

          var _pz;

          var _transformFactory;

          if (transform.p) {
            _transformFactory = ExpressionPropertyInterface(transform.p);
          } else {
            _px = ExpressionPropertyInterface(transform.px);
            _py = ExpressionPropertyInterface(transform.py);

            if (transform.pz) {
              _pz = ExpressionPropertyInterface(transform.pz);
            }
          }

          Object.defineProperty(_thisFunction, 'position', {
            get: function get() {
              if (transform.p) {
                return _transformFactory();
              }

              return [_px(), _py(), _pz ? _pz() : 0];
            }
          });
          Object.defineProperty(_thisFunction, 'xPosition', {
            get: ExpressionPropertyInterface(transform.px)
          });
          Object.defineProperty(_thisFunction, 'yPosition', {
            get: ExpressionPropertyInterface(transform.py)
          });
          Object.defineProperty(_thisFunction, 'zPosition', {
            get: ExpressionPropertyInterface(transform.pz)
          });
          Object.defineProperty(_thisFunction, 'anchorPoint', {
            get: ExpressionPropertyInterface(transform.a)
          });
          Object.defineProperty(_thisFunction, 'opacity', {
            get: ExpressionPropertyInterface(transform.o)
          });
          Object.defineProperty(_thisFunction, 'skew', {
            get: ExpressionPropertyInterface(transform.sk)
          });
          Object.defineProperty(_thisFunction, 'skewAxis', {
            get: ExpressionPropertyInterface(transform.sa)
          });
          Object.defineProperty(_thisFunction, 'orientation', {
            get: ExpressionPropertyInterface(transform.or)
          });
          return _thisFunction;
        };
      }();

      var LayerExpressionInterface = function () {
        function getMatrix(time) {
          var toWorldMat = new Matrix();

          if (time !== undefined) {
            var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time);

            propMatrix.clone(toWorldMat);
          } else {
            var transformMat = this._elem.finalTransform.mProp;
            transformMat.applyToMatrix(toWorldMat);
          }

          return toWorldMat;
        }

        function toWorldVec(arr, time) {
          var toWorldMat = this.getMatrix(time);
          toWorldMat.props[12] = 0;
          toWorldMat.props[13] = 0;
          toWorldMat.props[14] = 0;
          return this.applyPoint(toWorldMat, arr);
        }

        function toWorld(arr, time) {
          var toWorldMat = this.getMatrix(time);
          return this.applyPoint(toWorldMat, arr);
        }

        function fromWorldVec(arr, time) {
          var toWorldMat = this.getMatrix(time);
          toWorldMat.props[12] = 0;
          toWorldMat.props[13] = 0;
          toWorldMat.props[14] = 0;
          return this.invertPoint(toWorldMat, arr);
        }

        function fromWorld(arr, time) {
          var toWorldMat = this.getMatrix(time);
          return this.invertPoint(toWorldMat, arr);
        }

        function applyPoint(matrix, arr) {
          if (this._elem.hierarchy && this._elem.hierarchy.length) {
            var i;
            var len = this._elem.hierarchy.length;

            for (i = 0; i < len; i += 1) {
              this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);
            }
          }

          return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
        }

        function invertPoint(matrix, arr) {
          if (this._elem.hierarchy && this._elem.hierarchy.length) {
            var i;
            var len = this._elem.hierarchy.length;

            for (i = 0; i < len; i += 1) {
              this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(matrix);
            }
          }

          return matrix.inversePoint(arr);
        }

        function fromComp(arr) {
          var toWorldMat = new Matrix();
          toWorldMat.reset();

          this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);

          if (this._elem.hierarchy && this._elem.hierarchy.length) {
            var i;
            var len = this._elem.hierarchy.length;

            for (i = 0; i < len; i += 1) {
              this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
            }

            return toWorldMat.inversePoint(arr);
          }

          return toWorldMat.inversePoint(arr);
        }

        function sampleImage() {
          return [1, 1, 1, 1];
        }

        return function (elem) {
          var transformInterface;

          function _registerMaskInterface(maskManager) {
            _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem);
          }

          function _registerEffectsInterface(effects) {
            _thisLayerFunction.effect = effects;
          }

          function _thisLayerFunction(name) {
            switch (name) {
              case 'ADBE Root Vectors Group':
              case 'Contents':
              case 2:
                return _thisLayerFunction.shapeInterface;

              case 1:
              case 6:
              case 'Transform':
              case 'transform':
              case 'ADBE Transform Group':
                return transformInterface;

              case 4:
              case 'ADBE Effect Parade':
              case 'effects':
              case 'Effects':
                return _thisLayerFunction.effect;

              case 'ADBE Text Properties':
                return _thisLayerFunction.textInterface;

              default:
                return null;
            }
          }

          _thisLayerFunction.getMatrix = getMatrix;
          _thisLayerFunction.invertPoint = invertPoint;
          _thisLayerFunction.applyPoint = applyPoint;
          _thisLayerFunction.toWorld = toWorld;
          _thisLayerFunction.toWorldVec = toWorldVec;
          _thisLayerFunction.fromWorld = fromWorld;
          _thisLayerFunction.fromWorldVec = fromWorldVec;
          _thisLayerFunction.toComp = toWorld;
          _thisLayerFunction.fromComp = fromComp;
          _thisLayerFunction.sampleImage = sampleImage;
          _thisLayerFunction.sourceRectAtTime = elem.sourceRectAtTime.bind(elem);
          _thisLayerFunction._elem = elem;
          transformInterface = TransformExpressionInterface(elem.finalTransform.mProp);
          var anchorPointDescriptor = getDescriptor(transformInterface, 'anchorPoint');
          Object.defineProperties(_thisLayerFunction, {
            hasParent: {
              get: function get() {
                return elem.hierarchy.length;
              }
            },
            parent: {
              get: function get() {
                return elem.hierarchy[0].layerInterface;
              }
            },
            rotation: getDescriptor(transformInterface, 'rotation'),
            scale: getDescriptor(transformInterface, 'scale'),
            position: getDescriptor(transformInterface, 'position'),
            opacity: getDescriptor(transformInterface, 'opacity'),
            anchorPoint: anchorPointDescriptor,
            anchor_point: anchorPointDescriptor,
            transform: {
              get: function get() {
                return transformInterface;
              }
            },
            active: {
              get: function get() {
                return elem.isInRange;
              }
            }
          });
          _thisLayerFunction.startTime = elem.data.st;
          _thisLayerFunction.index = elem.data.ind;
          _thisLayerFunction.source = elem.data.refId;
          _thisLayerFunction.height = elem.data.ty === 0 ? elem.data.h : 100;
          _thisLayerFunction.width = elem.data.ty === 0 ? elem.data.w : 100;
          _thisLayerFunction.inPoint = elem.data.ip / elem.comp.globalData.frameRate;
          _thisLayerFunction.outPoint = elem.data.op / elem.comp.globalData.frameRate;
          _thisLayerFunction._name = elem.data.nm;
          _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
          _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
          return _thisLayerFunction;
        };
      }();

      var propertyGroupFactory = function () {
        return function (interfaceFunction, parentPropertyGroup) {
          return function (val) {
            val = val === undefined ? 1 : val;

            if (val <= 0) {
              return interfaceFunction;
            }

            return parentPropertyGroup(val - 1);
          };
        };
      }();

      var PropertyInterface = function () {
        return function (propertyName, propertyGroup) {
          var interfaceFunction = {
            _name: propertyName
          };

          function _propertyGroup(val) {
            val = val === undefined ? 1 : val;

            if (val <= 0) {
              return interfaceFunction;
            }

            return propertyGroup(val - 1);
          }

          return _propertyGroup;
        };
      }();

      var EffectsExpressionInterface = function () {
        var ob = {
          createEffectsInterface: createEffectsInterface
        };

        function createEffectsInterface(elem, propertyGroup) {
          if (elem.effectsManager) {
            var effectElements = [];
            var effectsData = elem.data.ef;
            var i;
            var len = elem.effectsManager.effectElements.length;

            for (i = 0; i < len; i += 1) {
              effectElements.push(createGroupInterface(effectsData[i], elem.effectsManager.effectElements[i], propertyGroup, elem));
            }

            var effects = elem.data.ef || [];

            var groupInterface = function groupInterface(name) {
              i = 0;
              len = effects.length;

              while (i < len) {
                if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {
                  return effectElements[i];
                }

                i += 1;
              }

              return null;
            };

            Object.defineProperty(groupInterface, 'numProperties', {
              get: function get() {
                return effects.length;
              }
            });
            return groupInterface;
          }

          return null;
        }

        function createGroupInterface(data, elements, propertyGroup, elem) {
          function groupInterface(name) {
            var effects = data.ef;
            var i = 0;
            var len = effects.length;

            while (i < len) {
              if (name === effects[i].nm || name === effects[i].mn || name === effects[i].ix) {
                if (effects[i].ty === 5) {
                  return effectElements[i];
                }

                return effectElements[i]();
              }

              i += 1;
            }

            throw new Error();
          }

          var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);

          var effectElements = [];
          var i;
          var len = data.ef.length;

          for (i = 0; i < len; i += 1) {
            if (data.ef[i].ty === 5) {
              effectElements.push(createGroupInterface(data.ef[i], elements.effectElements[i], elements.effectElements[i].propertyGroup, elem));
            } else {
              effectElements.push(createValueInterface(elements.effectElements[i], data.ef[i].ty, elem, _propertyGroup));
            }
          }

          if (data.mn === 'ADBE Color Control') {
            Object.defineProperty(groupInterface, 'color', {
              get: function get() {
                return effectElements[0]();
              }
            });
          }

          Object.defineProperties(groupInterface, {
            numProperties: {
              get: function get() {
                return data.np;
              }
            },
            _name: {
              value: data.nm
            },
            propertyGroup: {
              value: _propertyGroup
            }
          });
          groupInterface.enabled = data.en !== 0;
          groupInterface.active = groupInterface.enabled;
          return groupInterface;
        }

        function createValueInterface(element, type, elem, propertyGroup) {
          var expressionProperty = ExpressionPropertyInterface(element.p);

          function interfaceFunction() {
            if (type === 10) {
              return elem.comp.compInterface(element.p.v);
            }

            return expressionProperty();
          }

          if (element.p.setGroupProperty) {
            element.p.setGroupProperty(PropertyInterface('', propertyGroup));
          }

          return interfaceFunction;
        }

        return ob;
      }();

      var CompExpressionInterface = function () {
        return function (comp) {
          function _thisLayerFunction(name) {
            var i = 0;
            var len = comp.layers.length;

            while (i < len) {
              if (comp.layers[i].nm === name || comp.layers[i].ind === name) {
                return comp.elements[i].layerInterface;
              }

              i += 1;
            }

            return null; // return {active:false};
          }

          Object.defineProperty(_thisLayerFunction, '_name', {
            value: comp.data.nm
          });
          _thisLayerFunction.layer = _thisLayerFunction;
          _thisLayerFunction.pixelAspect = 1;
          _thisLayerFunction.height = comp.data.h || comp.globalData.compSize.h;
          _thisLayerFunction.width = comp.data.w || comp.globalData.compSize.w;
          _thisLayerFunction.pixelAspect = 1;
          _thisLayerFunction.frameDuration = 1 / comp.globalData.frameRate;
          _thisLayerFunction.displayStartTime = 0;
          _thisLayerFunction.numLayers = comp.layers.length;
          return _thisLayerFunction;
        };
      }();

      var ShapePathInterface = function () {
        return function pathInterfaceFactory(shape, view, propertyGroup) {
          var prop = view.sh;

          function interfaceFunction(val) {
            if (val === 'Shape' || val === 'shape' || val === 'Path' || val === 'path' || val === 'ADBE Vector Shape' || val === 2) {
              return interfaceFunction.path;
            }

            return null;
          }

          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          prop.setGroupProperty(PropertyInterface('Path', _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            path: {
              get: function get() {
                if (prop.k) {
                  prop.getValue();
                }

                return prop;
              }
            },
            shape: {
              get: function get() {
                if (prop.k) {
                  prop.getValue();
                }

                return prop;
              }
            },
            _name: {
              value: shape.nm
            },
            ix: {
              value: shape.ix
            },
            propertyIndex: {
              value: shape.ix
            },
            mn: {
              value: shape.mn
            },
            propertyGroup: {
              value: propertyGroup
            }
          });
          return interfaceFunction;
        };
      }();

      var ShapeExpressionInterface = function () {
        function iterateElements(shapes, view, propertyGroup) {
          var arr = [];
          var i;
          var len = shapes ? shapes.length : 0;

          for (i = 0; i < len; i += 1) {
            if (shapes[i].ty === 'gr') {
              arr.push(groupInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'fl') {
              arr.push(fillInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'st') {
              arr.push(strokeInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'tm') {
              arr.push(trimInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'tr') ; else if (shapes[i].ty === 'el') {
              arr.push(ellipseInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'sr') {
              arr.push(starInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'sh') {
              arr.push(ShapePathInterface(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'rc') {
              arr.push(rectInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'rd') {
              arr.push(roundedInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'rp') {
              arr.push(repeaterInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else if (shapes[i].ty === 'gf') {
              arr.push(gradientFillInterfaceFactory(shapes[i], view[i], propertyGroup));
            } else {
              arr.push(defaultInterfaceFactory(shapes[i], view[i]));
            }
          }

          return arr;
        }

        function contentsInterfaceFactory(shape, view, propertyGroup) {
          var interfaces;

          var interfaceFunction = function _interfaceFunction(value) {
            var i = 0;
            var len = interfaces.length;

            while (i < len) {
              if (interfaces[i]._name === value || interfaces[i].mn === value || interfaces[i].propertyIndex === value || interfaces[i].ix === value || interfaces[i].ind === value) {
                return interfaces[i];
              }

              i += 1;
            }

            if (typeof value === 'number') {
              return interfaces[value - 1];
            }

            return null;
          };

          interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          interfaces = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
          interfaceFunction.numProperties = interfaces.length;
          var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
          interfaceFunction.transform = transformInterface;
          interfaceFunction.propertyIndex = shape.cix;
          interfaceFunction._name = shape.nm;
          return interfaceFunction;
        }

        function groupInterfaceFactory(shape, view, propertyGroup) {
          var interfaceFunction = function _interfaceFunction(value) {
            switch (value) {
              case 'ADBE Vectors Group':
              case 'Contents':
              case 2:
                return interfaceFunction.content;
              // Not necessary for now. Keeping them here in case a new case appears
              // case 'ADBE Vector Transform Group':
              // case 3:

              default:
                return interfaceFunction.transform;
            }
          };

          interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
          var content = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);
          var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
          interfaceFunction.content = content;
          interfaceFunction.transform = transformInterface;
          Object.defineProperty(interfaceFunction, '_name', {
            get: function get() {
              return shape.nm;
            }
          }); // interfaceFunction.content = interfaceFunction;

          interfaceFunction.numProperties = shape.np;
          interfaceFunction.propertyIndex = shape.ix;
          interfaceFunction.nm = shape.nm;
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }

        function fillInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(val) {
            if (val === 'Color' || val === 'color') {
              return interfaceFunction.color;
            }

            if (val === 'Opacity' || val === 'opacity') {
              return interfaceFunction.opacity;
            }

            return null;
          }

          Object.defineProperties(interfaceFunction, {
            color: {
              get: ExpressionPropertyInterface(view.c)
            },
            opacity: {
              get: ExpressionPropertyInterface(view.o)
            },
            _name: {
              value: shape.nm
            },
            mn: {
              value: shape.mn
            }
          });
          view.c.setGroupProperty(PropertyInterface('Color', propertyGroup));
          view.o.setGroupProperty(PropertyInterface('Opacity', propertyGroup));
          return interfaceFunction;
        }

        function gradientFillInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(val) {
            if (val === 'Start Point' || val === 'start point') {
              return interfaceFunction.startPoint;
            }

            if (val === 'End Point' || val === 'end point') {
              return interfaceFunction.endPoint;
            }

            if (val === 'Opacity' || val === 'opacity') {
              return interfaceFunction.opacity;
            }

            return null;
          }

          Object.defineProperties(interfaceFunction, {
            startPoint: {
              get: ExpressionPropertyInterface(view.s)
            },
            endPoint: {
              get: ExpressionPropertyInterface(view.e)
            },
            opacity: {
              get: ExpressionPropertyInterface(view.o)
            },
            type: {
              get: function get() {
                return 'a';
              }
            },
            _name: {
              value: shape.nm
            },
            mn: {
              value: shape.mn
            }
          });
          view.s.setGroupProperty(PropertyInterface('Start Point', propertyGroup));
          view.e.setGroupProperty(PropertyInterface('End Point', propertyGroup));
          view.o.setGroupProperty(PropertyInterface('Opacity', propertyGroup));
          return interfaceFunction;
        }

        function defaultInterfaceFactory() {
          function interfaceFunction() {
            return null;
          }

          return interfaceFunction;
        }

        function strokeInterfaceFactory(shape, view, propertyGroup) {
          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);

          function addPropertyToDashOb(i) {
            Object.defineProperty(dashOb, shape.d[i].nm, {
              get: ExpressionPropertyInterface(view.d.dataProps[i].p)
            });
          }

          var i;
          var len = shape.d ? shape.d.length : 0;
          var dashOb = {};

          for (i = 0; i < len; i += 1) {
            addPropertyToDashOb(i);
            view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);
          }

          function interfaceFunction(val) {
            if (val === 'Color' || val === 'color') {
              return interfaceFunction.color;
            }

            if (val === 'Opacity' || val === 'opacity') {
              return interfaceFunction.opacity;
            }

            if (val === 'Stroke Width' || val === 'stroke width') {
              return interfaceFunction.strokeWidth;
            }

            return null;
          }

          Object.defineProperties(interfaceFunction, {
            color: {
              get: ExpressionPropertyInterface(view.c)
            },
            opacity: {
              get: ExpressionPropertyInterface(view.o)
            },
            strokeWidth: {
              get: ExpressionPropertyInterface(view.w)
            },
            dash: {
              get: function get() {
                return dashOb;
              }
            },
            _name: {
              value: shape.nm
            },
            mn: {
              value: shape.mn
            }
          });
          view.c.setGroupProperty(PropertyInterface('Color', _propertyGroup));
          view.o.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
          view.w.setGroupProperty(PropertyInterface('Stroke Width', _propertyGroup));
          return interfaceFunction;
        }

        function trimInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(val) {
            if (val === shape.e.ix || val === 'End' || val === 'end') {
              return interfaceFunction.end;
            }

            if (val === shape.s.ix) {
              return interfaceFunction.start;
            }

            if (val === shape.o.ix) {
              return interfaceFunction.offset;
            }

            return null;
          }

          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          interfaceFunction.propertyIndex = shape.ix;
          view.s.setGroupProperty(PropertyInterface('Start', _propertyGroup));
          view.e.setGroupProperty(PropertyInterface('End', _propertyGroup));
          view.o.setGroupProperty(PropertyInterface('Offset', _propertyGroup));
          interfaceFunction.propertyIndex = shape.ix;
          interfaceFunction.propertyGroup = propertyGroup;
          Object.defineProperties(interfaceFunction, {
            start: {
              get: ExpressionPropertyInterface(view.s)
            },
            end: {
              get: ExpressionPropertyInterface(view.e)
            },
            offset: {
              get: ExpressionPropertyInterface(view.o)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }

        function transformInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value) {
            if (shape.a.ix === value || value === 'Anchor Point') {
              return interfaceFunction.anchorPoint;
            }

            if (shape.o.ix === value || value === 'Opacity') {
              return interfaceFunction.opacity;
            }

            if (shape.p.ix === value || value === 'Position') {
              return interfaceFunction.position;
            }

            if (shape.r.ix === value || value === 'Rotation' || value === 'ADBE Vector Rotation') {
              return interfaceFunction.rotation;
            }

            if (shape.s.ix === value || value === 'Scale') {
              return interfaceFunction.scale;
            }

            if (shape.sk && shape.sk.ix === value || value === 'Skew') {
              return interfaceFunction.skew;
            }

            if (shape.sa && shape.sa.ix === value || value === 'Skew Axis') {
              return interfaceFunction.skewAxis;
            }

            return null;
          }

          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          view.transform.mProps.o.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
          view.transform.mProps.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
          view.transform.mProps.a.setGroupProperty(PropertyInterface('Anchor Point', _propertyGroup));
          view.transform.mProps.s.setGroupProperty(PropertyInterface('Scale', _propertyGroup));
          view.transform.mProps.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));

          if (view.transform.mProps.sk) {
            view.transform.mProps.sk.setGroupProperty(PropertyInterface('Skew', _propertyGroup));
            view.transform.mProps.sa.setGroupProperty(PropertyInterface('Skew Angle', _propertyGroup));
          }

          view.transform.op.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            opacity: {
              get: ExpressionPropertyInterface(view.transform.mProps.o)
            },
            position: {
              get: ExpressionPropertyInterface(view.transform.mProps.p)
            },
            anchorPoint: {
              get: ExpressionPropertyInterface(view.transform.mProps.a)
            },
            scale: {
              get: ExpressionPropertyInterface(view.transform.mProps.s)
            },
            rotation: {
              get: ExpressionPropertyInterface(view.transform.mProps.r)
            },
            skew: {
              get: ExpressionPropertyInterface(view.transform.mProps.sk)
            },
            skewAxis: {
              get: ExpressionPropertyInterface(view.transform.mProps.sa)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.ty = 'tr';
          interfaceFunction.mn = shape.mn;
          interfaceFunction.propertyGroup = propertyGroup;
          return interfaceFunction;
        }

        function ellipseInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value) {
            if (shape.p.ix === value) {
              return interfaceFunction.position;
            }

            if (shape.s.ix === value) {
              return interfaceFunction.size;
            }

            return null;
          }

          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          interfaceFunction.propertyIndex = shape.ix;
          var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
          prop.s.setGroupProperty(PropertyInterface('Size', _propertyGroup));
          prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            size: {
              get: ExpressionPropertyInterface(prop.s)
            },
            position: {
              get: ExpressionPropertyInterface(prop.p)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }

        function starInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value) {
            if (shape.p.ix === value) {
              return interfaceFunction.position;
            }

            if (shape.r.ix === value) {
              return interfaceFunction.rotation;
            }

            if (shape.pt.ix === value) {
              return interfaceFunction.points;
            }

            if (shape.or.ix === value || value === 'ADBE Vector Star Outer Radius') {
              return interfaceFunction.outerRadius;
            }

            if (shape.os.ix === value) {
              return interfaceFunction.outerRoundness;
            }

            if (shape.ir && (shape.ir.ix === value || value === 'ADBE Vector Star Inner Radius')) {
              return interfaceFunction.innerRadius;
            }

            if (shape.is && shape.is.ix === value) {
              return interfaceFunction.innerRoundness;
            }

            return null;
          }

          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
          interfaceFunction.propertyIndex = shape.ix;
          prop.or.setGroupProperty(PropertyInterface('Outer Radius', _propertyGroup));
          prop.os.setGroupProperty(PropertyInterface('Outer Roundness', _propertyGroup));
          prop.pt.setGroupProperty(PropertyInterface('Points', _propertyGroup));
          prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
          prop.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));

          if (shape.ir) {
            prop.ir.setGroupProperty(PropertyInterface('Inner Radius', _propertyGroup));
            prop.is.setGroupProperty(PropertyInterface('Inner Roundness', _propertyGroup));
          }

          Object.defineProperties(interfaceFunction, {
            position: {
              get: ExpressionPropertyInterface(prop.p)
            },
            rotation: {
              get: ExpressionPropertyInterface(prop.r)
            },
            points: {
              get: ExpressionPropertyInterface(prop.pt)
            },
            outerRadius: {
              get: ExpressionPropertyInterface(prop.or)
            },
            outerRoundness: {
              get: ExpressionPropertyInterface(prop.os)
            },
            innerRadius: {
              get: ExpressionPropertyInterface(prop.ir)
            },
            innerRoundness: {
              get: ExpressionPropertyInterface(prop.is)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }

        function rectInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value) {
            if (shape.p.ix === value) {
              return interfaceFunction.position;
            }

            if (shape.r.ix === value) {
              return interfaceFunction.roundness;
            }

            if (shape.s.ix === value || value === 'Size' || value === 'ADBE Vector Rect Size') {
              return interfaceFunction.size;
            }

            return null;
          }

          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
          interfaceFunction.propertyIndex = shape.ix;
          prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
          prop.s.setGroupProperty(PropertyInterface('Size', _propertyGroup));
          prop.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            position: {
              get: ExpressionPropertyInterface(prop.p)
            },
            roundness: {
              get: ExpressionPropertyInterface(prop.r)
            },
            size: {
              get: ExpressionPropertyInterface(prop.s)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }

        function roundedInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value) {
            if (shape.r.ix === value || value === 'Round Corners 1') {
              return interfaceFunction.radius;
            }

            return null;
          }

          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          var prop = view;
          interfaceFunction.propertyIndex = shape.ix;
          prop.rd.setGroupProperty(PropertyInterface('Radius', _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            radius: {
              get: ExpressionPropertyInterface(prop.rd)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }

        function repeaterInterfaceFactory(shape, view, propertyGroup) {
          function interfaceFunction(value) {
            if (shape.c.ix === value || value === 'Copies') {
              return interfaceFunction.copies;
            }

            if (shape.o.ix === value || value === 'Offset') {
              return interfaceFunction.offset;
            }

            return null;
          }

          var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

          var prop = view;
          interfaceFunction.propertyIndex = shape.ix;
          prop.c.setGroupProperty(PropertyInterface('Copies', _propertyGroup));
          prop.o.setGroupProperty(PropertyInterface('Offset', _propertyGroup));
          Object.defineProperties(interfaceFunction, {
            copies: {
              get: ExpressionPropertyInterface(prop.c)
            },
            offset: {
              get: ExpressionPropertyInterface(prop.o)
            },
            _name: {
              value: shape.nm
            }
          });
          interfaceFunction.mn = shape.mn;
          return interfaceFunction;
        }

        return function (shapes, view, propertyGroup) {
          var interfaces;

          function _interfaceFunction(value) {
            if (typeof value === 'number') {
              value = value === undefined ? 1 : value;

              if (value === 0) {
                return propertyGroup;
              }

              return interfaces[value - 1];
            }

            var i = 0;
            var len = interfaces.length;

            while (i < len) {
              if (interfaces[i]._name === value) {
                return interfaces[i];
              }

              i += 1;
            }

            return null;
          }

          function parentGroupWrapper() {
            return propertyGroup;
          }

          _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);
          interfaces = iterateElements(shapes, view, _interfaceFunction.propertyGroup);
          _interfaceFunction.numProperties = interfaces.length;
          _interfaceFunction._name = 'Contents';
          return _interfaceFunction;
        };
      }();

      var TextExpressionInterface = function () {
        return function (elem) {
          var _prevValue;

          var _sourceText;

          function _thisLayerFunction(name) {
            switch (name) {
              case 'ADBE Text Document':
                return _thisLayerFunction.sourceText;

              default:
                return null;
            }
          }

          Object.defineProperty(_thisLayerFunction, 'sourceText', {
            get: function get() {
              elem.textProperty.getValue();
              var stringValue = elem.textProperty.currentData.t;

              if (stringValue !== _prevValue) {
                elem.textProperty.currentData.t = _prevValue;
                _sourceText = new String(stringValue); // eslint-disable-line no-new-wrappers
                // If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive

                _sourceText.value = stringValue || new String(stringValue); // eslint-disable-line no-new-wrappers
              }

              return _sourceText;
            }
          });
          return _thisLayerFunction;
        };
      }();

      var getBlendMode = function () {
        var blendModeEnums = {
          0: 'source-over',
          1: 'multiply',
          2: 'screen',
          3: 'overlay',
          4: 'darken',
          5: 'lighten',
          6: 'color-dodge',
          7: 'color-burn',
          8: 'hard-light',
          9: 'soft-light',
          10: 'difference',
          11: 'exclusion',
          12: 'hue',
          13: 'saturation',
          14: 'color',
          15: 'luminosity'
        };
        return function (mode) {
          return blendModeEnums[mode] || '';
        };
      }();

      function SliderEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
      }

      function AngleEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
      }

      function ColorEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);
      }

      function PointEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 1, 0, container);
      }

      function LayerIndexEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
      }

      function MaskIndexEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
      }

      function CheckboxEffect(data, elem, container) {
        this.p = PropertyFactory.getProp(elem, data.v, 0, 0, container);
      }

      function NoValueEffect() {
        this.p = {};
      }

      function EffectsManager(data, element) {
        var effects = data.ef || [];
        this.effectElements = [];
        var i;
        var len = effects.length;
        var effectItem;

        for (i = 0; i < len; i += 1) {
          effectItem = new GroupEffect(effects[i], element);
          this.effectElements.push(effectItem);
        }
      }

      function GroupEffect(data, element) {
        this.init(data, element);
      }

      extendPrototype([DynamicPropertyContainer], GroupEffect);
      GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;

      GroupEffect.prototype.init = function (data, element) {
        this.data = data;
        this.effectElements = [];
        this.initDynamicPropertyContainer(element);
        var i;
        var len = this.data.ef.length;
        var eff;
        var effects = this.data.ef;

        for (i = 0; i < len; i += 1) {
          eff = null;

          switch (effects[i].ty) {
            case 0:
              eff = new SliderEffect(effects[i], element, this);
              break;

            case 1:
              eff = new AngleEffect(effects[i], element, this);
              break;

            case 2:
              eff = new ColorEffect(effects[i], element, this);
              break;

            case 3:
              eff = new PointEffect(effects[i], element, this);
              break;

            case 4:
            case 7:
              eff = new CheckboxEffect(effects[i], element, this);
              break;

            case 10:
              eff = new LayerIndexEffect(effects[i], element, this);
              break;

            case 11:
              eff = new MaskIndexEffect(effects[i], element, this);
              break;

            case 5:
              eff = new EffectsManager(effects[i], element, this);
              break;
            // case 6:

            default:
              eff = new NoValueEffect(effects[i], element, this);
              break;
          }

          if (eff) {
            this.effectElements.push(eff);
          }
        }
      };

      function BaseElement() {}

      BaseElement.prototype = {
        checkMasks: function checkMasks() {
          if (!this.data.hasMask) {
            return false;
          }

          var i = 0;
          var len = this.data.masksProperties.length;

          while (i < len) {
            if (this.data.masksProperties[i].mode !== 'n' && this.data.masksProperties[i].cl !== false) {
              return true;
            }

            i += 1;
          }

          return false;
        },
        initExpressions: function initExpressions() {
          this.layerInterface = LayerExpressionInterface(this);

          if (this.data.hasMask && this.maskManager) {
            this.layerInterface.registerMaskInterface(this.maskManager);
          }

          var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this, this.layerInterface);
          this.layerInterface.registerEffectsInterface(effectsInterface);

          if (this.data.ty === 0 || this.data.xt) {
            this.compInterface = CompExpressionInterface(this);
          } else if (this.data.ty === 4) {
            this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData, this.itemsData, this.layerInterface);
            this.layerInterface.content = this.layerInterface.shapeInterface;
          } else if (this.data.ty === 5) {
            this.layerInterface.textInterface = TextExpressionInterface(this);
            this.layerInterface.text = this.layerInterface.textInterface;
          }
        },
        setBlendMode: function setBlendMode() {
          var blendModeValue = getBlendMode(this.data.bm);
          var elem = this.baseElement || this.layerElement;
          elem.style['mix-blend-mode'] = blendModeValue;
        },
        initBaseData: function initBaseData(data, globalData, comp) {
          this.globalData = globalData;
          this.comp = comp;
          this.data = data;
          this.layerId = createElementID(); // Stretch factor for old animations missing this property.

          if (!this.data.sr) {
            this.data.sr = 1;
          } // effects manager


          this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
        },
        getType: function getType() {
          return this.type;
        },
        sourceRectAtTime: function sourceRectAtTime() {}
      };

      /**
       * @file
       * Handles element's layer frame update.
       * Checks layer in point and out point
       *
       */
      function FrameElement() {}

      FrameElement.prototype = {
        /**
           * @function
           * Initializes frame related properties.
           *
           */
        initFrame: function initFrame() {
          // set to true when inpoint is rendered
          this._isFirstFrame = false; // list of animated properties

          this.dynamicProperties = []; // If layer has been modified in current tick this will be true

          this._mdf = false;
        },

        /**
           * @function
           * Calculates all dynamic values
           *
           * @param {number} num
           * current frame number in Layer's time
           * @param {boolean} isVisible
           * if layers is currently in range
           *
           */
        prepareProperties: function prepareProperties(num, isVisible) {
          var i;
          var len = this.dynamicProperties.length;

          for (i = 0; i < len; i += 1) {
            if (isVisible || this._isParent && this.dynamicProperties[i].propType === 'transform') {
              this.dynamicProperties[i].getValue();

              if (this.dynamicProperties[i]._mdf) {
                this.globalData._mdf = true;
                this._mdf = true;
              }
            }
          }
        },
        addDynamicProperty: function addDynamicProperty(prop) {
          if (this.dynamicProperties.indexOf(prop) === -1) {
            this.dynamicProperties.push(prop);
          }
        }
      };

      function _typeof$2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

      var FootageInterface = function () {
        var outlineInterfaceFactory = function outlineInterfaceFactory(elem) {
          var currentPropertyName = '';
          var currentProperty = elem.getFootageData();

          function init() {
            currentPropertyName = '';
            currentProperty = elem.getFootageData();
            return searchProperty;
          }

          function searchProperty(value) {
            if (currentProperty[value]) {
              currentPropertyName = value;
              currentProperty = currentProperty[value];

              if (_typeof$2(currentProperty) === 'object') {
                return searchProperty;
              }

              return currentProperty;
            }

            var propertyNameIndex = value.indexOf(currentPropertyName);

            if (propertyNameIndex !== -1) {
              var index = parseInt(value.substr(propertyNameIndex + currentPropertyName.length), 10);
              currentProperty = currentProperty[index];

              if (_typeof$2(currentProperty) === 'object') {
                return searchProperty;
              }

              return currentProperty;
            }

            return '';
          }

          return init;
        };

        var dataInterfaceFactory = function dataInterfaceFactory(elem) {
          function interfaceFunction(value) {
            if (value === 'Outline') {
              return interfaceFunction.outlineInterface();
            }

            return null;
          }

          interfaceFunction._name = 'Outline';
          interfaceFunction.outlineInterface = outlineInterfaceFactory(elem);
          return interfaceFunction;
        };

        return function (elem) {
          function _interfaceFunction(value) {
            if (value === 'Data') {
              return _interfaceFunction.dataInterface;
            }

            return null;
          }

          _interfaceFunction._name = 'Data';
          _interfaceFunction.dataInterface = dataInterfaceFactory(elem);
          return _interfaceFunction;
        };
      }();

      function FootageElement(data, globalData, comp) {
        this.initFrame();
        this.initRenderable();
        this.assetData = globalData.getAssetData(data.refId);
        this.footageData = globalData.imageLoader.getAsset(this.assetData);
        this.initBaseData(data, globalData, comp);
      }

      FootageElement.prototype.prepareFrame = function () {};

      extendPrototype([RenderableElement, BaseElement, FrameElement], FootageElement);

      FootageElement.prototype.getBaseElement = function () {
        return null;
      };

      FootageElement.prototype.renderFrame = function () {};

      FootageElement.prototype.destroy = function () {};

      FootageElement.prototype.initExpressions = function () {
        this.layerInterface = FootageInterface(this);
      };

      FootageElement.prototype.getFootageData = function () {
        return this.footageData;
      };

      function AudioElement(data, globalData, comp) {
        this.initFrame();
        this.initRenderable();
        this.assetData = globalData.getAssetData(data.refId);
        this.initBaseData(data, globalData, comp);
        this._isPlaying = false;
        this._canPlay = false;
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        this.audio = this.globalData.audioController.createAudio(assetPath);
        this._currentTime = 0;
        this.globalData.audioController.addAudio(this);
        this._volumeMultiplier = 1;
        this._volume = 1;
        this._previousVolume = null;
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
          _placeholder: true
        };
        this.lv = PropertyFactory.getProp(this, data.au && data.au.lv ? data.au.lv : {
          k: [100]
        }, 1, 0.01, this);
      }

      AudioElement.prototype.prepareFrame = function (num) {
        this.prepareRenderableFrame(num, true);
        this.prepareProperties(num, true);

        if (!this.tm._placeholder) {
          var timeRemapped = this.tm.v;
          this._currentTime = timeRemapped;
        } else {
          this._currentTime = num / this.data.sr;
        }

        this._volume = this.lv.v[0];
        var totalVolume = this._volume * this._volumeMultiplier;

        if (this._previousVolume !== totalVolume) {
          this._previousVolume = totalVolume;
          this.audio.volume(totalVolume);
        }
      };

      extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);

      AudioElement.prototype.renderFrame = function () {
        if (this.isInRange && this._canPlay) {
          if (!this._isPlaying) {
            this.audio.play();
            this.audio.seek(this._currentTime / this.globalData.frameRate);
            this._isPlaying = true;
          } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
            this.audio.seek(this._currentTime / this.globalData.frameRate);
          }
        }
      };

      AudioElement.prototype.show = function () {// this.audio.play()
      };

      AudioElement.prototype.hide = function () {
        this.audio.pause();
        this._isPlaying = false;
      };

      AudioElement.prototype.pause = function () {
        this.audio.pause();
        this._isPlaying = false;
        this._canPlay = false;
      };

      AudioElement.prototype.resume = function () {
        this._canPlay = true;
      };

      AudioElement.prototype.setRate = function (rateValue) {
        this.audio.rate(rateValue);
      };

      AudioElement.prototype.volume = function (volumeValue) {
        this._volumeMultiplier = volumeValue;
        this._previousVolume = volumeValue * this._volume;
        this.audio.volume(this._previousVolume);
      };

      AudioElement.prototype.getBaseElement = function () {
        return null;
      };

      AudioElement.prototype.destroy = function () {};

      AudioElement.prototype.sourceRectAtTime = function () {};

      AudioElement.prototype.initExpressions = function () {};

      function BaseRenderer() {}

      BaseRenderer.prototype.checkLayers = function (num) {
        var i;
        var len = this.layers.length;
        var data;
        this.completeLayers = true;

        for (i = len - 1; i >= 0; i -= 1) {
          if (!this.elements[i]) {
            data = this.layers[i];

            if (data.ip - data.st <= num - this.layers[i].st && data.op - data.st > num - this.layers[i].st) {
              this.buildItem(i);
            }
          }

          this.completeLayers = this.elements[i] ? this.completeLayers : false;
        }

        this.checkPendingElements();
      };

      BaseRenderer.prototype.createItem = function (layer) {
        switch (layer.ty) {
          case 2:
            return this.createImage(layer);

          case 0:
            return this.createComp(layer);

          case 1:
            return this.createSolid(layer);

          case 3:
            return this.createNull(layer);

          case 4:
            return this.createShape(layer);

          case 5:
            return this.createText(layer);

          case 6:
            return this.createAudio(layer);

          case 13:
            return this.createCamera(layer);

          case 15:
            return this.createFootage(layer);

          default:
            return this.createNull(layer);
        }
      };

      BaseRenderer.prototype.createCamera = function () {
        throw new Error('You\'re using a 3d camera. Try the html renderer.');
      };

      BaseRenderer.prototype.createAudio = function (data) {
        return new AudioElement(data, this.globalData, this);
      };

      BaseRenderer.prototype.createFootage = function (data) {
        return new FootageElement(data, this.globalData, this);
      };

      BaseRenderer.prototype.buildAllItems = function () {
        var i;
        var len = this.layers.length;

        for (i = 0; i < len; i += 1) {
          this.buildItem(i);
        }

        this.checkPendingElements();
      };

      BaseRenderer.prototype.includeLayers = function (newLayers) {
        this.completeLayers = false;
        var i;
        var len = newLayers.length;
        var j;
        var jLen = this.layers.length;

        for (i = 0; i < len; i += 1) {
          j = 0;

          while (j < jLen) {
            if (this.layers[j].id === newLayers[i].id) {
              this.layers[j] = newLayers[i];
              break;
            }

            j += 1;
          }
        }
      };

      BaseRenderer.prototype.setProjectInterface = function (pInterface) {
        this.globalData.projectInterface = pInterface;
      };

      BaseRenderer.prototype.initItems = function () {
        if (!this.globalData.progressiveLoad) {
          this.buildAllItems();
        }
      };

      BaseRenderer.prototype.buildElementParenting = function (element, parentName, hierarchy) {
        var elements = this.elements;
        var layers = this.layers;
        var i = 0;
        var len = layers.length;

        while (i < len) {
          if (layers[i].ind == parentName) {
            // eslint-disable-line eqeqeq
            if (!elements[i] || elements[i] === true) {
              this.buildItem(i);
              this.addPendingElement(element);
            } else {
              hierarchy.push(elements[i]);
              elements[i].setAsParent();

              if (layers[i].parent !== undefined) {
                this.buildElementParenting(element, layers[i].parent, hierarchy);
              } else {
                element.setHierarchy(hierarchy);
              }
            }
          }

          i += 1;
        }
      };

      BaseRenderer.prototype.addPendingElement = function (element) {
        this.pendingElements.push(element);
      };

      BaseRenderer.prototype.searchExtraCompositions = function (assets) {
        var i;
        var len = assets.length;

        for (i = 0; i < len; i += 1) {
          if (assets[i].xt) {
            var comp = this.createComp(assets[i]);
            comp.initExpressions();
            this.globalData.projectInterface.registerComposition(comp);
          }
        }
      };

      BaseRenderer.prototype.getElementByPath = function (path) {
        var pathValue = path.shift();
        var element;

        if (typeof pathValue === 'number') {
          element = this.elements[pathValue];
        } else {
          var i;
          var len = this.elements.length;

          for (i = 0; i < len; i += 1) {
            if (this.elements[i].data.nm === pathValue) {
              element = this.elements[i];
              break;
            }
          }
        }

        if (path.length === 0) {
          return element;
        }

        return element.getElementByPath(path);
      };

      BaseRenderer.prototype.setupGlobalData = function (animData, fontsContainer) {
        this.globalData.fontManager = new FontManager();
        this.globalData.fontManager.addChars(animData.chars);
        this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
        this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
        this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
        this.globalData.imageLoader = this.animationItem.imagePreloader;
        this.globalData.audioController = this.animationItem.audioController;
        this.globalData.frameId = 0;
        this.globalData.frameRate = animData.fr;
        this.globalData.nm = animData.nm;
        this.globalData.compSize = {
          w: animData.w,
          h: animData.h
        };
      };

      function TransformElement() {}

      TransformElement.prototype = {
        initTransform: function initTransform() {
          this.finalTransform = {
            mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
              o: 0
            },
            _matMdf: false,
            _opMdf: false,
            mat: new Matrix()
          };

          if (this.data.ao) {
            this.finalTransform.mProp.autoOriented = true;
          } // TODO: check TYPE 11: Guided elements


          if (this.data.ty !== 11) ;
        },
        renderTransform: function renderTransform() {
          this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
          this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;

          if (this.hierarchy) {
            var mat;
            var finalMat = this.finalTransform.mat;
            var i = 0;
            var len = this.hierarchy.length; // Checking if any of the transformation matrices in the hierarchy chain has changed.

            if (!this.finalTransform._matMdf) {
              while (i < len) {
                if (this.hierarchy[i].finalTransform.mProp._mdf) {
                  this.finalTransform._matMdf = true;
                  break;
                }

                i += 1;
              }
            }

            if (this.finalTransform._matMdf) {
              mat = this.finalTransform.mProp.v.props;
              finalMat.cloneFromProps(mat);

              for (i = 0; i < len; i += 1) {
                mat = this.hierarchy[i].finalTransform.mProp.v.props;
                finalMat.transform(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15]);
              }
            }
          }
        },
        globalToLocal: function globalToLocal(pt) {
          var transforms = [];
          transforms.push(this.finalTransform);
          var flag = true;
          var comp = this.comp;

          while (flag) {
            if (comp.finalTransform) {
              if (comp.data.hasMask) {
                transforms.splice(0, 0, comp.finalTransform);
              }

              comp = comp.comp;
            } else {
              flag = false;
            }
          }

          var i;
          var len = transforms.length;
          var ptNew;

          for (i = 0; i < len; i += 1) {
            ptNew = transforms[i].mat.applyToPointArray(0, 0, 0); // ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);

            pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
          }

          return pt;
        },
        mHelper: new Matrix()
      };

      function MaskElement(data, element, globalData) {
        this.data = data;
        this.element = element;
        this.globalData = globalData;
        this.storedData = [];
        this.masksProperties = this.data.masksProperties || [];
        this.maskElement = null;
        var defs = this.globalData.defs;
        var i;
        var len = this.masksProperties ? this.masksProperties.length : 0;
        this.viewData = createSizedArray(len);
        this.solidPath = '';
        var path;
        var properties = this.masksProperties;
        var count = 0;
        var currentMasks = [];
        var j;
        var jLen;
        var layerId = createElementID();
        var rect;
        var expansor;
        var feMorph;
        var x;
        var maskType = 'clipPath';
        var maskRef = 'clip-path';

        for (i = 0; i < len; i += 1) {
          if (properties[i].mode !== 'a' && properties[i].mode !== 'n' || properties[i].inv || properties[i].o.k !== 100 || properties[i].o.x) {
            maskType = 'mask';
            maskRef = 'mask';
          }

          if ((properties[i].mode === 's' || properties[i].mode === 'i') && count === 0) {
            rect = createNS('rect');
            rect.setAttribute('fill', '#ffffff');
            rect.setAttribute('width', this.element.comp.data.w || 0);
            rect.setAttribute('height', this.element.comp.data.h || 0);
            currentMasks.push(rect);
          } else {
            rect = null;
          }

          path = createNS('path');

          if (properties[i].mode === 'n') {
            // TODO move this to a factory or to a constructor
            this.viewData[i] = {
              op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
              prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
              elem: path,
              lastPath: ''
            };
            defs.appendChild(path);
          } else {
            count += 1;
            path.setAttribute('fill', properties[i].mode === 's' ? '#000000' : '#ffffff');
            path.setAttribute('clip-rule', 'nonzero');
            var filterID;

            if (properties[i].x.k !== 0) {
              maskType = 'mask';
              maskRef = 'mask';
              x = PropertyFactory.getProp(this.element, properties[i].x, 0, null, this.element);
              filterID = createElementID();
              expansor = createNS('filter');
              expansor.setAttribute('id', filterID);
              feMorph = createNS('feMorphology');
              feMorph.setAttribute('operator', 'erode');
              feMorph.setAttribute('in', 'SourceGraphic');
              feMorph.setAttribute('radius', '0');
              expansor.appendChild(feMorph);
              defs.appendChild(expansor);
              path.setAttribute('stroke', properties[i].mode === 's' ? '#000000' : '#ffffff');
            } else {
              feMorph = null;
              x = null;
            } // TODO move this to a factory or to a constructor


            this.storedData[i] = {
              elem: path,
              x: x,
              expan: feMorph,
              lastPath: '',
              lastOperator: '',
              filterId: filterID,
              lastRadius: 0
            };

            if (properties[i].mode === 'i') {
              jLen = currentMasks.length;
              var g = createNS('g');

              for (j = 0; j < jLen; j += 1) {
                g.appendChild(currentMasks[j]);
              }

              var mask = createNS('mask');
              mask.setAttribute('mask-type', 'alpha');
              mask.setAttribute('id', layerId + '_' + count);
              mask.appendChild(path);
              defs.appendChild(mask);
              g.setAttribute('mask', 'url(' + getLocationHref() + '#' + layerId + '_' + count + ')');
              currentMasks.length = 0;
              currentMasks.push(g);
            } else {
              currentMasks.push(path);
            }

            if (properties[i].inv && !this.solidPath) {
              this.solidPath = this.createLayerSolidPath();
            } // TODO move this to a factory or to a constructor


            this.viewData[i] = {
              elem: path,
              lastPath: '',
              op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
              prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
              invRect: rect
            };

            if (!this.viewData[i].prop.k) {
              this.drawPath(properties[i], this.viewData[i].prop.v, this.viewData[i]);
            }
          }
        }

        this.maskElement = createNS(maskType);
        len = currentMasks.length;

        for (i = 0; i < len; i += 1) {
          this.maskElement.appendChild(currentMasks[i]);
        }

        if (count > 0) {
          this.maskElement.setAttribute('id', layerId);
          this.element.maskedElement.setAttribute(maskRef, 'url(' + getLocationHref() + '#' + layerId + ')');
          defs.appendChild(this.maskElement);
        }

        if (this.viewData.length) {
          this.element.addRenderableComponent(this);
        }
      }

      MaskElement.prototype.getMaskProperty = function (pos) {
        return this.viewData[pos].prop;
      };

      MaskElement.prototype.renderFrame = function (isFirstFrame) {
        var finalMat = this.element.finalTransform.mat;
        var i;
        var len = this.masksProperties.length;

        for (i = 0; i < len; i += 1) {
          if (this.viewData[i].prop._mdf || isFirstFrame) {
            this.drawPath(this.masksProperties[i], this.viewData[i].prop.v, this.viewData[i]);
          }

          if (this.viewData[i].op._mdf || isFirstFrame) {
            this.viewData[i].elem.setAttribute('fill-opacity', this.viewData[i].op.v);
          }

          if (this.masksProperties[i].mode !== 'n') {
            if (this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
              this.viewData[i].invRect.setAttribute('transform', finalMat.getInverseMatrix().to2dCSS());
            }

            if (this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)) {
              var feMorph = this.storedData[i].expan;

              if (this.storedData[i].x.v < 0) {
                if (this.storedData[i].lastOperator !== 'erode') {
                  this.storedData[i].lastOperator = 'erode';
                  this.storedData[i].elem.setAttribute('filter', 'url(' + getLocationHref() + '#' + this.storedData[i].filterId + ')');
                }

                feMorph.setAttribute('radius', -this.storedData[i].x.v);
              } else {
                if (this.storedData[i].lastOperator !== 'dilate') {
                  this.storedData[i].lastOperator = 'dilate';
                  this.storedData[i].elem.setAttribute('filter', null);
                }

                this.storedData[i].elem.setAttribute('stroke-width', this.storedData[i].x.v * 2);
              }
            }
          }
        }
      };

      MaskElement.prototype.getMaskelement = function () {
        return this.maskElement;
      };

      MaskElement.prototype.createLayerSolidPath = function () {
        var path = 'M0,0 ';
        path += ' h' + this.globalData.compSize.w;
        path += ' v' + this.globalData.compSize.h;
        path += ' h-' + this.globalData.compSize.w;
        path += ' v-' + this.globalData.compSize.h + ' ';
        return path;
      };

      MaskElement.prototype.drawPath = function (pathData, pathNodes, viewData) {
        var pathString = ' M' + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
        var i;
        var len;
        len = pathNodes._length;

        for (i = 1; i < len; i += 1) {
          // pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
          pathString += ' C' + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + ' ' + pathNodes.i[i][0] + ',' + pathNodes.i[i][1] + ' ' + pathNodes.v[i][0] + ',' + pathNodes.v[i][1];
        } // pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];


        if (pathNodes.c && len > 1) {
          pathString += ' C' + pathNodes.o[i - 1][0] + ',' + pathNodes.o[i - 1][1] + ' ' + pathNodes.i[0][0] + ',' + pathNodes.i[0][1] + ' ' + pathNodes.v[0][0] + ',' + pathNodes.v[0][1];
        } // pathNodes.__renderedString = pathString;


        if (viewData.lastPath !== pathString) {
          var pathShapeValue = '';

          if (viewData.elem) {
            if (pathNodes.c) {
              pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
            }

            viewData.elem.setAttribute('d', pathShapeValue);
          }

          viewData.lastPath = pathString;
        }
      };

      MaskElement.prototype.destroy = function () {
        this.element = null;
        this.globalData = null;
        this.maskElement = null;
        this.data = null;
        this.masksProperties = null;
      };

      var filtersFactory = function () {
        var ob = {};
        ob.createFilter = createFilter;
        ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;

        function createFilter(filId, skipCoordinates) {
          var fil = createNS('filter');
          fil.setAttribute('id', filId);

          if (skipCoordinates !== true) {
            fil.setAttribute('filterUnits', 'objectBoundingBox');
            fil.setAttribute('x', '0%');
            fil.setAttribute('y', '0%');
            fil.setAttribute('width', '100%');
            fil.setAttribute('height', '100%');
          }

          return fil;
        }

        function createAlphaToLuminanceFilter() {
          var feColorMatrix = createNS('feColorMatrix');
          feColorMatrix.setAttribute('type', 'matrix');
          feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
          feColorMatrix.setAttribute('values', '0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');
          return feColorMatrix;
        }

        return ob;
      }();

      var featureSupport = function () {
        var ob = {
          maskType: true
        };

        if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
          ob.maskType = false;
        }

        return ob;
      }();

      var registeredEffects = {};
      var idPrefix = 'filter_result_';

      function SVGEffects(elem) {
        var i;
        var source = 'SourceGraphic';
        var len = elem.data.ef ? elem.data.ef.length : 0;
        var filId = createElementID();
        var fil = filtersFactory.createFilter(filId, true);
        var count = 0;
        this.filters = [];
        var filterManager;

        for (i = 0; i < len; i += 1) {
          filterManager = null;
          var type = elem.data.ef[i].ty;

          if (registeredEffects[type]) {
            var Effect = registeredEffects[type].effect;
            filterManager = new Effect(fil, elem.effectsManager.effectElements[i], elem, idPrefix + count, source);
            source = idPrefix + count;

            if (registeredEffects[type].countsAsEffect) {
              count += 1;
            }
          }

          if (filterManager) {
            this.filters.push(filterManager);
          }
        }

        if (count) {
          elem.globalData.defs.appendChild(fil);
          elem.layerElement.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
        }

        if (this.filters.length) {
          elem.addRenderableComponent(this);
        }
      }

      SVGEffects.prototype.renderFrame = function (_isFirstFrame) {
        var i;
        var len = this.filters.length;

        for (i = 0; i < len; i += 1) {
          this.filters[i].renderFrame(_isFirstFrame);
        }
      };

      function registerEffect(id, effect, countsAsEffect) {
        registeredEffects[id] = {
          effect: effect,
          countsAsEffect: countsAsEffect
        };
      }

      function SVGBaseElement() {}

      SVGBaseElement.prototype = {
        initRendererElement: function initRendererElement() {
          this.layerElement = createNS('g');
        },
        createContainerElements: function createContainerElements() {
          this.matteElement = createNS('g');
          this.transformedElement = this.layerElement;
          this.maskedElement = this.layerElement;
          this._sizeChanged = false;
          var layerElementParent = null; // If this layer acts as a mask for the following layer

          var filId;
          var fil;
          var gg;

          if (this.data.td) {
            if (this.data.td == 3 || this.data.td == 1) {
              // eslint-disable-line eqeqeq
              var masker = createNS('mask');
              masker.setAttribute('id', this.layerId);
              masker.setAttribute('mask-type', this.data.td == 3 ? 'luminance' : 'alpha'); // eslint-disable-line eqeqeq

              masker.appendChild(this.layerElement);
              layerElementParent = masker;
              this.globalData.defs.appendChild(masker); // This is only for IE and Edge when mask if of type alpha

              if (!featureSupport.maskType && this.data.td == 1) {
                // eslint-disable-line eqeqeq
                masker.setAttribute('mask-type', 'luminance');
                filId = createElementID();
                fil = filtersFactory.createFilter(filId);
                this.globalData.defs.appendChild(fil);
                fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                gg = createNS('g');
                gg.appendChild(this.layerElement);
                layerElementParent = gg;
                masker.appendChild(gg);
                gg.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
              }
            } else if (this.data.td == 2) {
              // eslint-disable-line eqeqeq
              var maskGroup = createNS('mask');
              maskGroup.setAttribute('id', this.layerId);
              maskGroup.setAttribute('mask-type', 'alpha');
              var maskGrouper = createNS('g');
              maskGroup.appendChild(maskGrouper);
              filId = createElementID();
              fil = filtersFactory.createFilter(filId); /// /
              // This solution doesn't work on Android when meta tag with viewport attribute is set

              /* var feColorMatrix = createNS('feColorMatrix');
                      feColorMatrix.setAttribute('type', 'matrix');
                      feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
                      feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 -1 1');
                      fil.appendChild(feColorMatrix); */
              /// /

              var feCTr = createNS('feComponentTransfer');
              feCTr.setAttribute('in', 'SourceGraphic');
              fil.appendChild(feCTr);
              var feFunc = createNS('feFuncA');
              feFunc.setAttribute('type', 'table');
              feFunc.setAttribute('tableValues', '1.0 0.0');
              feCTr.appendChild(feFunc); /// /

              this.globalData.defs.appendChild(fil);
              var alphaRect = createNS('rect');
              alphaRect.setAttribute('width', this.comp.data.w);
              alphaRect.setAttribute('height', this.comp.data.h);
              alphaRect.setAttribute('x', '0');
              alphaRect.setAttribute('y', '0');
              alphaRect.setAttribute('fill', '#ffffff');
              alphaRect.setAttribute('opacity', '0');
              maskGrouper.setAttribute('filter', 'url(' + getLocationHref() + '#' + filId + ')');
              maskGrouper.appendChild(alphaRect);
              maskGrouper.appendChild(this.layerElement);
              layerElementParent = maskGrouper;

              if (!featureSupport.maskType) {
                maskGroup.setAttribute('mask-type', 'luminance');
                fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                gg = createNS('g');
                maskGrouper.appendChild(alphaRect);
                gg.appendChild(this.layerElement);
                layerElementParent = gg;
                maskGrouper.appendChild(gg);
              }

              this.globalData.defs.appendChild(maskGroup);
            }
          } else if (this.data.tt) {
            this.matteElement.appendChild(this.layerElement);
            layerElementParent = this.matteElement;
            this.baseElement = this.matteElement;
          } else {
            this.baseElement = this.layerElement;
          }

          if (this.data.ln) {
            this.layerElement.setAttribute('id', this.data.ln);
          }

          if (this.data.cl) {
            this.layerElement.setAttribute('class', this.data.cl);
          } // Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped


          if (this.data.ty === 0 && !this.data.hd) {
            var cp = createNS('clipPath');
            var pt = createNS('path');
            pt.setAttribute('d', 'M0,0 L' + this.data.w + ',0 L' + this.data.w + ',' + this.data.h + ' L0,' + this.data.h + 'z');
            var clipId = createElementID();
            cp.setAttribute('id', clipId);
            cp.appendChild(pt);
            this.globalData.defs.appendChild(cp);

            if (this.checkMasks()) {
              var cpGroup = createNS('g');
              cpGroup.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + clipId + ')');
              cpGroup.appendChild(this.layerElement);
              this.transformedElement = cpGroup;

              if (layerElementParent) {
                layerElementParent.appendChild(this.transformedElement);
              } else {
                this.baseElement = this.transformedElement;
              }
            } else {
              this.layerElement.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + clipId + ')');
            }
          }

          if (this.data.bm !== 0) {
            this.setBlendMode();
          }
        },
        renderElement: function renderElement() {
          if (this.finalTransform._matMdf) {
            this.transformedElement.setAttribute('transform', this.finalTransform.mat.to2dCSS());
          }

          if (this.finalTransform._opMdf) {
            this.transformedElement.setAttribute('opacity', this.finalTransform.mProp.o.v);
          }
        },
        destroyBaseElement: function destroyBaseElement() {
          this.layerElement = null;
          this.matteElement = null;
          this.maskManager.destroy();
        },
        getBaseElement: function getBaseElement() {
          if (this.data.hd) {
            return null;
          }

          return this.baseElement;
        },
        createRenderableComponents: function createRenderableComponents() {
          this.maskManager = new MaskElement(this.data, this, this.globalData);
          this.renderableEffectsManager = new SVGEffects(this);
        },
        setMatte: function setMatte(id) {
          if (!this.matteElement) {
            return;
          }

          this.matteElement.setAttribute('mask', 'url(' + getLocationHref() + '#' + id + ')');
        }
      };

      /**
       * @file
       * Handles AE's layer parenting property.
       *
       */
      function HierarchyElement() {}

      HierarchyElement.prototype = {
        /**
           * @function
           * Initializes hierarchy properties
           *
           */
        initHierarchy: function initHierarchy() {
          // element's parent list
          this.hierarchy = []; // if element is parent of another layer _isParent will be true

          this._isParent = false;
          this.checkParenting();
        },

        /**
           * @function
           * Sets layer's hierarchy.
           * @param {array} hierarch
           * layer's parent list
           *
           */
        setHierarchy: function setHierarchy(hierarchy) {
          this.hierarchy = hierarchy;
        },

        /**
           * @function
           * Sets layer as parent.
           *
           */
        setAsParent: function setAsParent() {
          this._isParent = true;
        },

        /**
           * @function
           * Searches layer's parenting chain
           *
           */
        checkParenting: function checkParenting() {
          if (this.data.parent !== undefined) {
            this.comp.buildElementParenting(this, this.data.parent, []);
          }
        }
      };

      function RenderableDOMElement() {}

      (function () {
        var _prototype = {
          initElement: function initElement(data, globalData, comp) {
            this.initFrame();
            this.initBaseData(data, globalData, comp);
            this.initTransform(data, globalData, comp);
            this.initHierarchy();
            this.initRenderable();
            this.initRendererElement();
            this.createContainerElements();
            this.createRenderableComponents();
            this.createContent();
            this.hide();
          },
          hide: function hide() {
            // console.log('HIDE', this);
            if (!this.hidden && (!this.isInRange || this.isTransparent)) {
              var elem = this.baseElement || this.layerElement;
              elem.style.display = 'none';
              this.hidden = true;
            }
          },
          show: function show() {
            // console.log('SHOW', this);
            if (this.isInRange && !this.isTransparent) {
              if (!this.data.hd) {
                var elem = this.baseElement || this.layerElement;
                elem.style.display = 'block';
              }

              this.hidden = false;
              this._isFirstFrame = true;
            }
          },
          renderFrame: function renderFrame() {
            // If it is exported as hidden (data.hd === true) no need to render
            // If it is not visible no need to render
            if (this.data.hd || this.hidden) {
              return;
            }

            this.renderTransform();
            this.renderRenderable();
            this.renderElement();
            this.renderInnerContent();

            if (this._isFirstFrame) {
              this._isFirstFrame = false;
            }
          },
          renderInnerContent: function renderInnerContent() {},
          prepareFrame: function prepareFrame(num) {
            this._mdf = false;
            this.prepareRenderableFrame(num);
            this.prepareProperties(num, this.isInRange);
            this.checkTransparency();
          },
          destroy: function destroy() {
            this.innerElem = null;
            this.destroyBaseElement();
          }
        };
        extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
      })();

      function IImageElement(data, globalData, comp) {
        this.assetData = globalData.getAssetData(data.refId);
        this.initElement(data, globalData, comp);
        this.sourceRect = {
          top: 0,
          left: 0,
          width: this.assetData.w,
          height: this.assetData.h
        };
      }

      extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);

      IImageElement.prototype.createContent = function () {
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        this.innerElem = createNS('image');
        this.innerElem.setAttribute('width', this.assetData.w + 'px');
        this.innerElem.setAttribute('height', this.assetData.h + 'px');
        this.innerElem.setAttribute('preserveAspectRatio', this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
        this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);
        this.layerElement.appendChild(this.innerElem);
      };

      IImageElement.prototype.sourceRectAtTime = function () {
        return this.sourceRect;
      };

      function ProcessedElement(element, position) {
        this.elem = element;
        this.pos = position;
      }

      function IShapeElement() {}

      IShapeElement.prototype = {
        addShapeToModifiers: function addShapeToModifiers(data) {
          var i;
          var len = this.shapeModifiers.length;

          for (i = 0; i < len; i += 1) {
            this.shapeModifiers[i].addShape(data);
          }
        },
        isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data) {
          var i = 0;
          var len = this.shapeModifiers.length;

          while (i < len) {
            if (this.shapeModifiers[i].isAnimatedWithShape(data)) {
              return true;
            }
          }

          return false;
        },
        renderModifiers: function renderModifiers() {
          if (!this.shapeModifiers.length) {
            return;
          }

          var i;
          var len = this.shapes.length;

          for (i = 0; i < len; i += 1) {
            this.shapes[i].sh.reset();
          }

          len = this.shapeModifiers.length;
          var shouldBreakProcess;

          for (i = len - 1; i >= 0; i -= 1) {
            shouldBreakProcess = this.shapeModifiers[i].processShapes(this._isFirstFrame); // workaround to fix cases where a repeater resets the shape so the following processes get called twice
            // TODO: find a better solution for this

            if (shouldBreakProcess) {
              break;
            }
          }
        },
        searchProcessedElement: function searchProcessedElement(elem) {
          var elements = this.processedElements;
          var i = 0;
          var len = elements.length;

          while (i < len) {
            if (elements[i].elem === elem) {
              return elements[i].pos;
            }

            i += 1;
          }

          return 0;
        },
        addProcessedElement: function addProcessedElement(elem, pos) {
          var elements = this.processedElements;
          var i = elements.length;

          while (i) {
            i -= 1;

            if (elements[i].elem === elem) {
              elements[i].pos = pos;
              return;
            }
          }

          elements.push(new ProcessedElement(elem, pos));
        },
        prepareFrame: function prepareFrame(num) {
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
        }
      };

      var lineCapEnum = {
        1: 'butt',
        2: 'round',
        3: 'square'
      };
      var lineJoinEnum = {
        1: 'miter',
        2: 'round',
        3: 'bevel'
      };

      function SVGShapeData(transformers, level, shape) {
        this.caches = [];
        this.styles = [];
        this.transformers = transformers;
        this.lStr = '';
        this.sh = shape;
        this.lvl = level; // TODO find if there are some cases where _isAnimated can be false.
        // For now, since shapes add up with other shapes. They have to be calculated every time.
        // One way of finding out is checking if all styles associated to this shape depend only of this shape

        this._isAnimated = !!shape.k; // TODO: commenting this for now since all shapes are animated

        var i = 0;
        var len = transformers.length;

        while (i < len) {
          if (transformers[i].mProps.dynamicProperties.length) {
            this._isAnimated = true;
            break;
          }

          i += 1;
        }
      }

      SVGShapeData.prototype.setAsAnimated = function () {
        this._isAnimated = true;
      };

      function SVGStyleData(data, level) {
        this.data = data;
        this.type = data.ty;
        this.d = '';
        this.lvl = level;
        this._mdf = false;
        this.closed = data.hd === true;
        this.pElem = createNS('path');
        this.msElem = null;
      }

      SVGStyleData.prototype.reset = function () {
        this.d = '';
        this._mdf = false;
      };

      function DashProperty(elem, data, renderer, container) {
        this.elem = elem;
        this.frameId = -1;
        this.dataProps = createSizedArray(data.length);
        this.renderer = renderer;
        this.k = false;
        this.dashStr = '';
        this.dashArray = createTypedArray('float32', data.length ? data.length - 1 : 0);
        this.dashoffset = createTypedArray('float32', 1);
        this.initDynamicPropertyContainer(container);
        var i;
        var len = data.length || 0;
        var prop;

        for (i = 0; i < len; i += 1) {
          prop = PropertyFactory.getProp(elem, data[i].v, 0, 0, this);
          this.k = prop.k || this.k;
          this.dataProps[i] = {
            n: data[i].n,
            p: prop
          };
        }

        if (!this.k) {
          this.getValue(true);
        }

        this._isAnimated = this.k;
      }

      DashProperty.prototype.getValue = function (forceRender) {
        if (this.elem.globalData.frameId === this.frameId && !forceRender) {
          return;
        }

        this.frameId = this.elem.globalData.frameId;
        this.iterateDynamicProperties();
        this._mdf = this._mdf || forceRender;

        if (this._mdf) {
          var i = 0;
          var len = this.dataProps.length;

          if (this.renderer === 'svg') {
            this.dashStr = '';
          }

          for (i = 0; i < len; i += 1) {
            if (this.dataProps[i].n !== 'o') {
              if (this.renderer === 'svg') {
                this.dashStr += ' ' + this.dataProps[i].p.v;
              } else {
                this.dashArray[i] = this.dataProps[i].p.v;
              }
            } else {
              this.dashoffset[0] = this.dataProps[i].p.v;
            }
          }
        }
      };

      extendPrototype([DynamicPropertyContainer], DashProperty);

      function SVGStrokeStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
        this.d = new DashProperty(elem, data.d || {}, 'svg', this);
        this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
        this.style = styleOb;
        this._isAnimated = !!this._isAnimated;
      }

      extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);

      function SVGFillStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
        this.style = styleOb;
      }

      extendPrototype([DynamicPropertyContainer], SVGFillStyleData);

      function SVGNoStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.style = styleOb;
      }

      extendPrototype([DynamicPropertyContainer], SVGNoStyleData);

      function GradientProperty(elem, data, container) {
        this.data = data;
        this.c = createTypedArray('uint8c', data.p * 4);
        var cLength = data.k.k[0].s ? data.k.k[0].s.length - data.p * 4 : data.k.k.length - data.p * 4;
        this.o = createTypedArray('float32', cLength);
        this._cmdf = false;
        this._omdf = false;
        this._collapsable = this.checkCollapsable();
        this._hasOpacity = cLength;
        this.initDynamicPropertyContainer(container);
        this.prop = PropertyFactory.getProp(elem, data.k, 1, null, this);
        this.k = this.prop.k;
        this.getValue(true);
      }

      GradientProperty.prototype.comparePoints = function (values, points) {
        var i = 0;
        var len = this.o.length / 2;
        var diff;

        while (i < len) {
          diff = Math.abs(values[i * 4] - values[points * 4 + i * 2]);

          if (diff > 0.01) {
            return false;
          }

          i += 1;
        }

        return true;
      };

      GradientProperty.prototype.checkCollapsable = function () {
        if (this.o.length / 2 !== this.c.length / 4) {
          return false;
        }

        if (this.data.k.k[0].s) {
          var i = 0;
          var len = this.data.k.k.length;

          while (i < len) {
            if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
              return false;
            }

            i += 1;
          }
        } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
          return false;
        }

        return true;
      };

      GradientProperty.prototype.getValue = function (forceRender) {
        this.prop.getValue();
        this._mdf = false;
        this._cmdf = false;
        this._omdf = false;

        if (this.prop._mdf || forceRender) {
          var i;
          var len = this.data.p * 4;
          var mult;
          var val;

          for (i = 0; i < len; i += 1) {
            mult = i % 4 === 0 ? 100 : 255;
            val = Math.round(this.prop.v[i] * mult);

            if (this.c[i] !== val) {
              this.c[i] = val;
              this._cmdf = !forceRender;
            }
          }

          if (this.o.length) {
            len = this.prop.v.length;

            for (i = this.data.p * 4; i < len; i += 1) {
              mult = i % 2 === 0 ? 100 : 1;
              val = i % 2 === 0 ? Math.round(this.prop.v[i] * 100) : this.prop.v[i];

              if (this.o[i - this.data.p * 4] !== val) {
                this.o[i - this.data.p * 4] = val;
                this._omdf = !forceRender;
              }
            }
          }

          this._mdf = !forceRender;
        }
      };

      extendPrototype([DynamicPropertyContainer], GradientProperty);

      function SVGGradientFillStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.initGradientData(elem, data, styleOb);
      }

      SVGGradientFillStyleData.prototype.initGradientData = function (elem, data, styleOb) {
        this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
        this.s = PropertyFactory.getProp(elem, data.s, 1, null, this);
        this.e = PropertyFactory.getProp(elem, data.e, 1, null, this);
        this.h = PropertyFactory.getProp(elem, data.h || {
          k: 0
        }, 0, 0.01, this);
        this.a = PropertyFactory.getProp(elem, data.a || {
          k: 0
        }, 0, degToRads, this);
        this.g = new GradientProperty(elem, data.g, this);
        this.style = styleOb;
        this.stops = [];
        this.setGradientData(styleOb.pElem, data);
        this.setGradientOpacity(data, styleOb);
        this._isAnimated = !!this._isAnimated;
      };

      SVGGradientFillStyleData.prototype.setGradientData = function (pathElement, data) {
        var gradientId = createElementID();
        var gfill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
        gfill.setAttribute('id', gradientId);
        gfill.setAttribute('spreadMethod', 'pad');
        gfill.setAttribute('gradientUnits', 'userSpaceOnUse');
        var stops = [];
        var stop;
        var j;
        var jLen;
        jLen = data.g.p * 4;

        for (j = 0; j < jLen; j += 4) {
          stop = createNS('stop');
          gfill.appendChild(stop);
          stops.push(stop);
        }

        pathElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(' + getLocationHref() + '#' + gradientId + ')');
        this.gf = gfill;
        this.cst = stops;
      };

      SVGGradientFillStyleData.prototype.setGradientOpacity = function (data, styleOb) {
        if (this.g._hasOpacity && !this.g._collapsable) {
          var stop;
          var j;
          var jLen;
          var mask = createNS('mask');
          var maskElement = createNS('path');
          mask.appendChild(maskElement);
          var opacityId = createElementID();
          var maskId = createElementID();
          mask.setAttribute('id', maskId);
          var opFill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
          opFill.setAttribute('id', opacityId);
          opFill.setAttribute('spreadMethod', 'pad');
          opFill.setAttribute('gradientUnits', 'userSpaceOnUse');
          jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
          var stops = this.stops;

          for (j = data.g.p * 4; j < jLen; j += 2) {
            stop = createNS('stop');
            stop.setAttribute('stop-color', 'rgb(255,255,255)');
            opFill.appendChild(stop);
            stops.push(stop);
          }

          maskElement.setAttribute(data.ty === 'gf' ? 'fill' : 'stroke', 'url(' + getLocationHref() + '#' + opacityId + ')');

          if (data.ty === 'gs') {
            maskElement.setAttribute('stroke-linecap', lineCapEnum[data.lc || 2]);
            maskElement.setAttribute('stroke-linejoin', lineJoinEnum[data.lj || 2]);

            if (data.lj === 1) {
              maskElement.setAttribute('stroke-miterlimit', data.ml);
            }
          }

          this.of = opFill;
          this.ms = mask;
          this.ost = stops;
          this.maskId = maskId;
          styleOb.msElem = maskElement;
        }
      };

      extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);

      function SVGGradientStrokeStyleData(elem, data, styleOb) {
        this.initDynamicPropertyContainer(elem);
        this.getValue = this.iterateDynamicProperties;
        this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
        this.d = new DashProperty(elem, data.d || {}, 'svg', this);
        this.initGradientData(elem, data, styleOb);
        this._isAnimated = !!this._isAnimated;
      }

      extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);

      function ShapeGroupData() {
        this.it = [];
        this.prevViewData = [];
        this.gr = createNS('g');
      }

      function SVGTransformData(mProps, op, container) {
        this.transform = {
          mProps: mProps,
          op: op,
          container: container
        };
        this.elements = [];
        this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
      }

      var buildShapeString = function buildShapeString(pathNodes, length, closed, mat) {
        if (length === 0) {
          return '';
        }

        var _o = pathNodes.o;
        var _i = pathNodes.i;
        var _v = pathNodes.v;
        var i;
        var shapeString = ' M' + mat.applyToPointStringified(_v[0][0], _v[0][1]);

        for (i = 1; i < length; i += 1) {
          shapeString += ' C' + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + ' ' + mat.applyToPointStringified(_i[i][0], _i[i][1]) + ' ' + mat.applyToPointStringified(_v[i][0], _v[i][1]);
        }

        if (closed && length) {
          shapeString += ' C' + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + ' ' + mat.applyToPointStringified(_i[0][0], _i[0][1]) + ' ' + mat.applyToPointStringified(_v[0][0], _v[0][1]);
          shapeString += 'z';
        }

        return shapeString;
      };

      var SVGElementsRenderer = function () {
        var _identityMatrix = new Matrix();

        var _matrixHelper = new Matrix();

        var ob = {
          createRenderFunction: createRenderFunction
        };

        function createRenderFunction(data) {
          switch (data.ty) {
            case 'fl':
              return renderFill;

            case 'gf':
              return renderGradient;

            case 'gs':
              return renderGradientStroke;

            case 'st':
              return renderStroke;

            case 'sh':
            case 'el':
            case 'rc':
            case 'sr':
              return renderPath;

            case 'tr':
              return renderContentTransform;

            case 'no':
              return renderNoop;

            default:
              return null;
          }
        }

        function renderContentTransform(styleData, itemData, isFirstFrame) {
          if (isFirstFrame || itemData.transform.op._mdf) {
            itemData.transform.container.setAttribute('opacity', itemData.transform.op.v);
          }

          if (isFirstFrame || itemData.transform.mProps._mdf) {
            itemData.transform.container.setAttribute('transform', itemData.transform.mProps.v.to2dCSS());
          }
        }

        function renderNoop() {}

        function renderPath(styleData, itemData, isFirstFrame) {
          var j;
          var jLen;
          var pathStringTransformed;
          var redraw;
          var pathNodes;
          var l;
          var lLen = itemData.styles.length;
          var lvl = itemData.lvl;
          var paths;
          var mat;
          var props;
          var iterations;
          var k;

          for (l = 0; l < lLen; l += 1) {
            redraw = itemData.sh._mdf || isFirstFrame;

            if (itemData.styles[l].lvl < lvl) {
              mat = _matrixHelper.reset();
              iterations = lvl - itemData.styles[l].lvl;
              k = itemData.transformers.length - 1;

              while (!redraw && iterations > 0) {
                redraw = itemData.transformers[k].mProps._mdf || redraw;
                iterations -= 1;
                k -= 1;
              }

              if (redraw) {
                iterations = lvl - itemData.styles[l].lvl;
                k = itemData.transformers.length - 1;

                while (iterations > 0) {
                  props = itemData.transformers[k].mProps.v.props;
                  mat.transform(props[0], props[1], props[2], props[3], props[4], props[5], props[6], props[7], props[8], props[9], props[10], props[11], props[12], props[13], props[14], props[15]);
                  iterations -= 1;
                  k -= 1;
                }
              }
            } else {
              mat = _identityMatrix;
            }

            paths = itemData.sh.paths;
            jLen = paths._length;

            if (redraw) {
              pathStringTransformed = '';

              for (j = 0; j < jLen; j += 1) {
                pathNodes = paths.shapes[j];

                if (pathNodes && pathNodes._length) {
                  pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
                }
              }

              itemData.caches[l] = pathStringTransformed;
            } else {
              pathStringTransformed = itemData.caches[l];
            }

            itemData.styles[l].d += styleData.hd === true ? '' : pathStringTransformed;
            itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
          }
        }

        function renderFill(styleData, itemData, isFirstFrame) {
          var styleElem = itemData.style;

          if (itemData.c._mdf || isFirstFrame) {
            styleElem.pElem.setAttribute('fill', 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')');
          }

          if (itemData.o._mdf || isFirstFrame) {
            styleElem.pElem.setAttribute('fill-opacity', itemData.o.v);
          }
        }

        function renderGradientStroke(styleData, itemData, isFirstFrame) {
          renderGradient(styleData, itemData, isFirstFrame);
          renderStroke(styleData, itemData, isFirstFrame);
        }

        function renderGradient(styleData, itemData, isFirstFrame) {
          var gfill = itemData.gf;
          var hasOpacity = itemData.g._hasOpacity;
          var pt1 = itemData.s.v;
          var pt2 = itemData.e.v;

          if (itemData.o._mdf || isFirstFrame) {
            var attr = styleData.ty === 'gf' ? 'fill-opacity' : 'stroke-opacity';
            itemData.style.pElem.setAttribute(attr, itemData.o.v);
          }

          if (itemData.s._mdf || isFirstFrame) {
            var attr1 = styleData.t === 1 ? 'x1' : 'cx';
            var attr2 = attr1 === 'x1' ? 'y1' : 'cy';
            gfill.setAttribute(attr1, pt1[0]);
            gfill.setAttribute(attr2, pt1[1]);

            if (hasOpacity && !itemData.g._collapsable) {
              itemData.of.setAttribute(attr1, pt1[0]);
              itemData.of.setAttribute(attr2, pt1[1]);
            }
          }

          var stops;
          var i;
          var len;
          var stop;

          if (itemData.g._cmdf || isFirstFrame) {
            stops = itemData.cst;
            var cValues = itemData.g.c;
            len = stops.length;

            for (i = 0; i < len; i += 1) {
              stop = stops[i];
              stop.setAttribute('offset', cValues[i * 4] + '%');
              stop.setAttribute('stop-color', 'rgb(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ')');
            }
          }

          if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
            var oValues = itemData.g.o;

            if (itemData.g._collapsable) {
              stops = itemData.cst;
            } else {
              stops = itemData.ost;
            }

            len = stops.length;

            for (i = 0; i < len; i += 1) {
              stop = stops[i];

              if (!itemData.g._collapsable) {
                stop.setAttribute('offset', oValues[i * 2] + '%');
              }

              stop.setAttribute('stop-opacity', oValues[i * 2 + 1]);
            }
          }

          if (styleData.t === 1) {
            if (itemData.e._mdf || isFirstFrame) {
              gfill.setAttribute('x2', pt2[0]);
              gfill.setAttribute('y2', pt2[1]);

              if (hasOpacity && !itemData.g._collapsable) {
                itemData.of.setAttribute('x2', pt2[0]);
                itemData.of.setAttribute('y2', pt2[1]);
              }
            }
          } else {
            var rad;

            if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
              rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
              gfill.setAttribute('r', rad);

              if (hasOpacity && !itemData.g._collapsable) {
                itemData.of.setAttribute('r', rad);
              }
            }

            if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
              if (!rad) {
                rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
              }

              var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
              var percent = itemData.h.v;

              if (percent >= 1) {
                percent = 0.99;
              } else if (percent <= -1) {
                percent = -0.99;
              }

              var dist = rad * percent;
              var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
              var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
              gfill.setAttribute('fx', x);
              gfill.setAttribute('fy', y);

              if (hasOpacity && !itemData.g._collapsable) {
                itemData.of.setAttribute('fx', x);
                itemData.of.setAttribute('fy', y);
              }
            } // gfill.setAttribute('fy','200');

          }
        }

        function renderStroke(styleData, itemData, isFirstFrame) {
          var styleElem = itemData.style;
          var d = itemData.d;

          if (d && (d._mdf || isFirstFrame) && d.dashStr) {
            styleElem.pElem.setAttribute('stroke-dasharray', d.dashStr);
            styleElem.pElem.setAttribute('stroke-dashoffset', d.dashoffset[0]);
          }

          if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
            styleElem.pElem.setAttribute('stroke', 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')');
          }

          if (itemData.o._mdf || isFirstFrame) {
            styleElem.pElem.setAttribute('stroke-opacity', itemData.o.v);
          }

          if (itemData.w._mdf || isFirstFrame) {
            styleElem.pElem.setAttribute('stroke-width', itemData.w.v);

            if (styleElem.msElem) {
              styleElem.msElem.setAttribute('stroke-width', itemData.w.v);
            }
          }
        }

        return ob;
      }();

      function SVGShapeElement(data, globalData, comp) {
        // List of drawable elements
        this.shapes = []; // Full shape data

        this.shapesData = data.shapes; // List of styles that will be applied to shapes

        this.stylesList = []; // List of modifiers that will be applied to shapes

        this.shapeModifiers = []; // List of items in shape tree

        this.itemsData = []; // List of items in previous shape tree

        this.processedElements = []; // List of animated components

        this.animatedContents = [];
        this.initElement(data, globalData, comp); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
        // List of elements that have been created

        this.prevViewData = []; // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
      }

      extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);

      SVGShapeElement.prototype.initSecondaryElement = function () {};

      SVGShapeElement.prototype.identityMatrix = new Matrix();

      SVGShapeElement.prototype.buildExpressionInterface = function () {};

      SVGShapeElement.prototype.createContent = function () {
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
        this.filterUniqueShapes();
      };
      /*
      This method searches for multiple shapes that affect a single element and one of them is animated
      */


      SVGShapeElement.prototype.filterUniqueShapes = function () {
        var i;
        var len = this.shapes.length;
        var shape;
        var j;
        var jLen = this.stylesList.length;
        var style;
        var tempShapes = [];
        var areAnimated = false;

        for (j = 0; j < jLen; j += 1) {
          style = this.stylesList[j];
          areAnimated = false;
          tempShapes.length = 0;

          for (i = 0; i < len; i += 1) {
            shape = this.shapes[i];

            if (shape.styles.indexOf(style) !== -1) {
              tempShapes.push(shape);
              areAnimated = shape._isAnimated || areAnimated;
            }
          }

          if (tempShapes.length > 1 && areAnimated) {
            this.setShapesAsAnimated(tempShapes);
          }
        }
      };

      SVGShapeElement.prototype.setShapesAsAnimated = function (shapes) {
        var i;
        var len = shapes.length;

        for (i = 0; i < len; i += 1) {
          shapes[i].setAsAnimated();
        }
      };

      SVGShapeElement.prototype.createStyleElement = function (data, level) {
        // TODO: prevent drawing of hidden styles
        var elementData;
        var styleOb = new SVGStyleData(data, level);
        var pathElement = styleOb.pElem;

        if (data.ty === 'st') {
          elementData = new SVGStrokeStyleData(this, data, styleOb);
        } else if (data.ty === 'fl') {
          elementData = new SVGFillStyleData(this, data, styleOb);
        } else if (data.ty === 'gf' || data.ty === 'gs') {
          var GradientConstructor = data.ty === 'gf' ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
          elementData = new GradientConstructor(this, data, styleOb);
          this.globalData.defs.appendChild(elementData.gf);

          if (elementData.maskId) {
            this.globalData.defs.appendChild(elementData.ms);
            this.globalData.defs.appendChild(elementData.of);
            pathElement.setAttribute('mask', 'url(' + getLocationHref() + '#' + elementData.maskId + ')');
          }
        } else if (data.ty === 'no') {
          elementData = new SVGNoStyleData(this, data, styleOb);
        }

        if (data.ty === 'st' || data.ty === 'gs') {
          pathElement.setAttribute('stroke-linecap', lineCapEnum[data.lc || 2]);
          pathElement.setAttribute('stroke-linejoin', lineJoinEnum[data.lj || 2]);
          pathElement.setAttribute('fill-opacity', '0');

          if (data.lj === 1) {
            pathElement.setAttribute('stroke-miterlimit', data.ml);
          }
        }

        if (data.r === 2) {
          pathElement.setAttribute('fill-rule', 'evenodd');
        }

        if (data.ln) {
          pathElement.setAttribute('id', data.ln);
        }

        if (data.cl) {
          pathElement.setAttribute('class', data.cl);
        }

        if (data.bm) {
          pathElement.style['mix-blend-mode'] = getBlendMode(data.bm);
        }

        this.stylesList.push(styleOb);
        this.addToAnimatedContents(data, elementData);
        return elementData;
      };

      SVGShapeElement.prototype.createGroupElement = function (data) {
        var elementData = new ShapeGroupData();

        if (data.ln) {
          elementData.gr.setAttribute('id', data.ln);
        }

        if (data.cl) {
          elementData.gr.setAttribute('class', data.cl);
        }

        if (data.bm) {
          elementData.gr.style['mix-blend-mode'] = getBlendMode(data.bm);
        }

        return elementData;
      };

      SVGShapeElement.prototype.createTransformElement = function (data, container) {
        var transformProperty = TransformPropertyFactory.getTransformProperty(this, data, this);
        var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
        this.addToAnimatedContents(data, elementData);
        return elementData;
      };

      SVGShapeElement.prototype.createShapeElement = function (data, ownTransformers, level) {
        var ty = 4;

        if (data.ty === 'rc') {
          ty = 5;
        } else if (data.ty === 'el') {
          ty = 6;
        } else if (data.ty === 'sr') {
          ty = 7;
        }

        var shapeProperty = ShapePropertyFactory.getShapeProp(this, data, ty, this);
        var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
        this.shapes.push(elementData);
        this.addShapeToModifiers(elementData);
        this.addToAnimatedContents(data, elementData);
        return elementData;
      };

      SVGShapeElement.prototype.addToAnimatedContents = function (data, element) {
        var i = 0;
        var len = this.animatedContents.length;

        while (i < len) {
          if (this.animatedContents[i].element === element) {
            return;
          }

          i += 1;
        }

        this.animatedContents.push({
          fn: SVGElementsRenderer.createRenderFunction(data),
          element: element,
          data: data
        });
      };

      SVGShapeElement.prototype.setElementStyles = function (elementData) {
        var arr = elementData.styles;
        var j;
        var jLen = this.stylesList.length;

        for (j = 0; j < jLen; j += 1) {
          if (!this.stylesList[j].closed) {
            arr.push(this.stylesList[j]);
          }
        }
      };

      SVGShapeElement.prototype.reloadShapes = function () {
        this._isFirstFrame = true;
        var i;
        var len = this.itemsData.length;

        for (i = 0; i < len; i += 1) {
          this.prevViewData[i] = this.itemsData[i];
        }

        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
        this.filterUniqueShapes();
        len = this.dynamicProperties.length;

        for (i = 0; i < len; i += 1) {
          this.dynamicProperties[i].getValue();
        }

        this.renderModifiers();
      };

      SVGShapeElement.prototype.searchShapes = function (arr, itemsData, prevViewData, container, level, transformers, render) {
        var ownTransformers = [].concat(transformers);
        var i;
        var len = arr.length - 1;
        var j;
        var jLen;
        var ownStyles = [];
        var ownModifiers = [];
        var currentTransform;
        var modifier;
        var processedPos;

        for (i = len; i >= 0; i -= 1) {
          processedPos = this.searchProcessedElement(arr[i]);

          if (!processedPos) {
            arr[i]._render = render;
          } else {
            itemsData[i] = prevViewData[processedPos - 1];
          }

          if (arr[i].ty === 'fl' || arr[i].ty === 'st' || arr[i].ty === 'gf' || arr[i].ty === 'gs' || arr[i].ty === 'no') {
            if (!processedPos) {
              itemsData[i] = this.createStyleElement(arr[i], level);
            } else {
              itemsData[i].style.closed = false;
            }

            if (arr[i]._render) {
              if (itemsData[i].style.pElem.parentNode !== container) {
                container.appendChild(itemsData[i].style.pElem);
              }
            }

            ownStyles.push(itemsData[i].style);
          } else if (arr[i].ty === 'gr') {
            if (!processedPos) {
              itemsData[i] = this.createGroupElement(arr[i]);
            } else {
              jLen = itemsData[i].it.length;

              for (j = 0; j < jLen; j += 1) {
                itemsData[i].prevViewData[j] = itemsData[i].it[j];
              }
            }

            this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, itemsData[i].gr, level + 1, ownTransformers, render);

            if (arr[i]._render) {
              if (itemsData[i].gr.parentNode !== container) {
                container.appendChild(itemsData[i].gr);
              }
            }
          } else if (arr[i].ty === 'tr') {
            if (!processedPos) {
              itemsData[i] = this.createTransformElement(arr[i], container);
            }

            currentTransform = itemsData[i].transform;
            ownTransformers.push(currentTransform);
          } else if (arr[i].ty === 'sh' || arr[i].ty === 'rc' || arr[i].ty === 'el' || arr[i].ty === 'sr') {
            if (!processedPos) {
              itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
            }

            this.setElementStyles(itemsData[i]);
          } else if (arr[i].ty === 'tm' || arr[i].ty === 'rd' || arr[i].ty === 'ms' || arr[i].ty === 'pb') {
            if (!processedPos) {
              modifier = ShapeModifiers.getModifier(arr[i].ty);
              modifier.init(this, arr[i]);
              itemsData[i] = modifier;
              this.shapeModifiers.push(modifier);
            } else {
              modifier = itemsData[i];
              modifier.closed = false;
            }

            ownModifiers.push(modifier);
          } else if (arr[i].ty === 'rp') {
            if (!processedPos) {
              modifier = ShapeModifiers.getModifier(arr[i].ty);
              itemsData[i] = modifier;
              modifier.init(this, arr, i, itemsData);
              this.shapeModifiers.push(modifier);
              render = false;
            } else {
              modifier = itemsData[i];
              modifier.closed = true;
            }

            ownModifiers.push(modifier);
          }

          this.addProcessedElement(arr[i], i + 1);
        }

        len = ownStyles.length;

        for (i = 0; i < len; i += 1) {
          ownStyles[i].closed = true;
        }

        len = ownModifiers.length;

        for (i = 0; i < len; i += 1) {
          ownModifiers[i].closed = true;
        }
      };

      SVGShapeElement.prototype.renderInnerContent = function () {
        this.renderModifiers();
        var i;
        var len = this.stylesList.length;

        for (i = 0; i < len; i += 1) {
          this.stylesList[i].reset();
        }

        this.renderShape();

        for (i = 0; i < len; i += 1) {
          if (this.stylesList[i]._mdf || this._isFirstFrame) {
            if (this.stylesList[i].msElem) {
              this.stylesList[i].msElem.setAttribute('d', this.stylesList[i].d); // Adding M0 0 fixes same mask bug on all browsers

              this.stylesList[i].d = 'M0 0' + this.stylesList[i].d;
            }

            this.stylesList[i].pElem.setAttribute('d', this.stylesList[i].d || 'M0 0');
          }
        }
      };

      SVGShapeElement.prototype.renderShape = function () {
        var i;
        var len = this.animatedContents.length;
        var animatedContent;

        for (i = 0; i < len; i += 1) {
          animatedContent = this.animatedContents[i];

          if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
            animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
          }
        }
      };

      SVGShapeElement.prototype.destroy = function () {
        this.destroyBaseElement();
        this.shapesData = null;
        this.itemsData = null;
      };

      function LetterProps(o, sw, sc, fc, m, p) {
        this.o = o;
        this.sw = sw;
        this.sc = sc;
        this.fc = fc;
        this.m = m;
        this.p = p;
        this._mdf = {
          o: true,
          sw: !!sw,
          sc: !!sc,
          fc: !!fc,
          m: true,
          p: true
        };
      }

      LetterProps.prototype.update = function (o, sw, sc, fc, m, p) {
        this._mdf.o = false;
        this._mdf.sw = false;
        this._mdf.sc = false;
        this._mdf.fc = false;
        this._mdf.m = false;
        this._mdf.p = false;
        var updated = false;

        if (this.o !== o) {
          this.o = o;
          this._mdf.o = true;
          updated = true;
        }

        if (this.sw !== sw) {
          this.sw = sw;
          this._mdf.sw = true;
          updated = true;
        }

        if (this.sc !== sc) {
          this.sc = sc;
          this._mdf.sc = true;
          updated = true;
        }

        if (this.fc !== fc) {
          this.fc = fc;
          this._mdf.fc = true;
          updated = true;
        }

        if (this.m !== m) {
          this.m = m;
          this._mdf.m = true;
          updated = true;
        }

        if (p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
          this.p = p;
          this._mdf.p = true;
          updated = true;
        }

        return updated;
      };

      function TextProperty(elem, data) {
        this._frameId = initialDefaultFrame;
        this.pv = '';
        this.v = '';
        this.kf = false;
        this._isFirstFrame = true;
        this._mdf = false;
        this.data = data;
        this.elem = elem;
        this.comp = this.elem.comp;
        this.keysIndex = 0;
        this.canResize = false;
        this.minimumFontSize = 1;
        this.effectsSequence = [];
        this.currentData = {
          ascent: 0,
          boxWidth: this.defaultBoxWidth,
          f: '',
          fStyle: '',
          fWeight: '',
          fc: '',
          j: '',
          justifyOffset: '',
          l: [],
          lh: 0,
          lineWidths: [],
          ls: '',
          of: '',
          s: '',
          sc: '',
          sw: 0,
          t: 0,
          tr: 0,
          sz: 0,
          ps: null,
          fillColorAnim: false,
          strokeColorAnim: false,
          strokeWidthAnim: false,
          yOffset: 0,
          finalSize: 0,
          finalText: [],
          finalLineHeight: 0,
          __complete: false
        };
        this.copyData(this.currentData, this.data.d.k[0].s);

        if (!this.searchProperty()) {
          this.completeTextData(this.currentData);
        }
      }

      TextProperty.prototype.defaultBoxWidth = [0, 0];

      TextProperty.prototype.copyData = function (obj, data) {
        for (var s in data) {
          if (Object.prototype.hasOwnProperty.call(data, s)) {
            obj[s] = data[s];
          }
        }

        return obj;
      };

      TextProperty.prototype.setCurrentData = function (data) {
        if (!data.__complete) {
          this.completeTextData(data);
        }

        this.currentData = data;
        this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
        this._mdf = true;
      };

      TextProperty.prototype.searchProperty = function () {
        return this.searchKeyframes();
      };

      TextProperty.prototype.searchKeyframes = function () {
        this.kf = this.data.d.k.length > 1;

        if (this.kf) {
          this.addEffect(this.getKeyframeValue.bind(this));
        }

        return this.kf;
      };

      TextProperty.prototype.addEffect = function (effectFunction) {
        this.effectsSequence.push(effectFunction);
        this.elem.addDynamicProperty(this);
      };

      TextProperty.prototype.getValue = function (_finalValue) {
        if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
          return;
        }

        this.currentData.t = this.data.d.k[this.keysIndex].s.t;
        var currentValue = this.currentData;
        var currentIndex = this.keysIndex;

        if (this.lock) {
          this.setCurrentData(this.currentData);
          return;
        }

        this.lock = true;
        this._mdf = false;
        var i;
        var len = this.effectsSequence.length;
        var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;

        for (i = 0; i < len; i += 1) {
          // Checking if index changed to prevent creating a new object every time the expression updates.
          if (currentIndex !== this.keysIndex) {
            finalValue = this.effectsSequence[i](finalValue, finalValue.t);
          } else {
            finalValue = this.effectsSequence[i](this.currentData, finalValue.t);
          }
        }

        if (currentValue !== finalValue) {
          this.setCurrentData(finalValue);
        }

        this.v = this.currentData;
        this.pv = this.v;
        this.lock = false;
        this.frameId = this.elem.globalData.frameId;
      };

      TextProperty.prototype.getKeyframeValue = function () {
        var textKeys = this.data.d.k;
        var frameNum = this.elem.comp.renderedFrame;
        var i = 0;
        var len = textKeys.length;

        while (i <= len - 1) {
          if (i === len - 1 || textKeys[i + 1].t > frameNum) {
            break;
          }

          i += 1;
        }

        if (this.keysIndex !== i) {
          this.keysIndex = i;
        }

        return this.data.d.k[this.keysIndex].s;
      };

      TextProperty.prototype.buildFinalText = function (text) {
        var charactersArray = [];
        var i = 0;
        var len = text.length;
        var charCode;
        var secondCharCode;
        var shouldCombine = false;

        while (i < len) {
          charCode = text.charCodeAt(i);

          if (FontManager.isCombinedCharacter(charCode)) {
            charactersArray[charactersArray.length - 1] += text.charAt(i);
          } else if (charCode >= 0xD800 && charCode <= 0xDBFF) {
            secondCharCode = text.charCodeAt(i + 1);

            if (secondCharCode >= 0xDC00 && secondCharCode <= 0xDFFF) {
              if (shouldCombine || FontManager.isModifier(charCode, secondCharCode)) {
                charactersArray[charactersArray.length - 1] += text.substr(i, 2);
                shouldCombine = false;
              } else {
                charactersArray.push(text.substr(i, 2));
              }

              i += 1;
            } else {
              charactersArray.push(text.charAt(i));
            }
          } else if (charCode > 0xDBFF) {
            secondCharCode = text.charCodeAt(i + 1);

            if (FontManager.isZeroWidthJoiner(charCode, secondCharCode)) {
              shouldCombine = true;
              charactersArray[charactersArray.length - 1] += text.substr(i, 2);
              i += 1;
            } else {
              charactersArray.push(text.charAt(i));
            }
          } else if (FontManager.isZeroWidthJoiner(charCode)) {
            charactersArray[charactersArray.length - 1] += text.charAt(i);
            shouldCombine = true;
          } else {
            charactersArray.push(text.charAt(i));
          }

          i += 1;
        }

        return charactersArray;
      };

      TextProperty.prototype.completeTextData = function (documentData) {
        documentData.__complete = true;
        var fontManager = this.elem.globalData.fontManager;
        var data = this.data;
        var letters = [];
        var i;
        var len;
        var newLineFlag;
        var index = 0;
        var val;
        var anchorGrouping = data.m.g;
        var currentSize = 0;
        var currentPos = 0;
        var currentLine = 0;
        var lineWidths = [];
        var lineWidth = 0;
        var maxLineWidth = 0;
        var j;
        var jLen;
        var fontData = fontManager.getFontByName(documentData.f);
        var charData;
        var cLength = 0;
        var fontProps = getFontProperties(fontData);
        documentData.fWeight = fontProps.weight;
        documentData.fStyle = fontProps.style;
        documentData.finalSize = documentData.s;
        documentData.finalText = this.buildFinalText(documentData.t);
        len = documentData.finalText.length;
        documentData.finalLineHeight = documentData.lh;
        var trackingOffset = documentData.tr / 1000 * documentData.finalSize;
        var charCode;

        if (documentData.sz) {
          var flag = true;
          var boxWidth = documentData.sz[0];
          var boxHeight = documentData.sz[1];
          var currentHeight;
          var finalText;

          while (flag) {
            finalText = this.buildFinalText(documentData.t);
            currentHeight = 0;
            lineWidth = 0;
            len = finalText.length;
            trackingOffset = documentData.tr / 1000 * documentData.finalSize;
            var lastSpaceIndex = -1;

            for (i = 0; i < len; i += 1) {
              charCode = finalText[i].charCodeAt(0);
              newLineFlag = false;

              if (finalText[i] === ' ') {
                lastSpaceIndex = i;
              } else if (charCode === 13 || charCode === 3) {
                lineWidth = 0;
                newLineFlag = true;
                currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
              }

              if (fontManager.chars) {
                charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
                cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
              } else {
                // tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
                cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
              }

              if (lineWidth + cLength > boxWidth && finalText[i] !== ' ') {
                if (lastSpaceIndex === -1) {
                  len += 1;
                } else {
                  i = lastSpaceIndex;
                }

                currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                finalText.splice(i, lastSpaceIndex === i ? 1 : 0, '\r'); // finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);

                lastSpaceIndex = -1;
                lineWidth = 0;
              } else {
                lineWidth += cLength;
                lineWidth += trackingOffset;
              }
            }

            currentHeight += fontData.ascent * documentData.finalSize / 100;

            if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
              documentData.finalSize -= 1;
              documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
            } else {
              documentData.finalText = finalText;
              len = documentData.finalText.length;
              flag = false;
            }
          }
        }

        lineWidth = -trackingOffset;
        cLength = 0;
        var uncollapsedSpaces = 0;
        var currentChar;

        for (i = 0; i < len; i += 1) {
          newLineFlag = false;
          currentChar = documentData.finalText[i];
          charCode = currentChar.charCodeAt(0);

          if (charCode === 13 || charCode === 3) {
            uncollapsedSpaces = 0;
            lineWidths.push(lineWidth);
            maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
            lineWidth = -2 * trackingOffset;
            val = '';
            newLineFlag = true;
            currentLine += 1;
          } else {
            val = currentChar;
          }

          if (fontManager.chars) {
            charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
            cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
          } else {
            // var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
            // tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
            cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
          } //


          if (currentChar === ' ') {
            uncollapsedSpaces += cLength + trackingOffset;
          } else {
            lineWidth += cLength + trackingOffset + uncollapsedSpaces;
            uncollapsedSpaces = 0;
          }

          letters.push({
            l: cLength,
            an: cLength,
            add: currentSize,
            n: newLineFlag,
            anIndexes: [],
            val: val,
            line: currentLine,
            animatorJustifyOffset: 0
          });

          if (anchorGrouping == 2) {
            // eslint-disable-line eqeqeq
            currentSize += cLength;

            if (val === '' || val === ' ' || i === len - 1) {
              if (val === '' || val === ' ') {
                currentSize -= cLength;
              }

              while (currentPos <= i) {
                letters[currentPos].an = currentSize;
                letters[currentPos].ind = index;
                letters[currentPos].extra = cLength;
                currentPos += 1;
              }

              index += 1;
              currentSize = 0;
            }
          } else if (anchorGrouping == 3) {
            // eslint-disable-line eqeqeq
            currentSize += cLength;

            if (val === '' || i === len - 1) {
              if (val === '') {
                currentSize -= cLength;
              }

              while (currentPos <= i) {
                letters[currentPos].an = currentSize;
                letters[currentPos].ind = index;
                letters[currentPos].extra = cLength;
                currentPos += 1;
              }

              currentSize = 0;
              index += 1;
            }
          } else {
            letters[index].ind = index;
            letters[index].extra = 0;
            index += 1;
          }
        }

        documentData.l = letters;
        maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
        lineWidths.push(lineWidth);

        if (documentData.sz) {
          documentData.boxWidth = documentData.sz[0];
          documentData.justifyOffset = 0;
        } else {
          documentData.boxWidth = maxLineWidth;

          switch (documentData.j) {
            case 1:
              documentData.justifyOffset = -documentData.boxWidth;
              break;

            case 2:
              documentData.justifyOffset = -documentData.boxWidth / 2;
              break;

            default:
              documentData.justifyOffset = 0;
          }
        }

        documentData.lineWidths = lineWidths;
        var animators = data.a;
        var animatorData;
        var letterData;
        jLen = animators.length;
        var based;
        var ind;
        var indexes = [];

        for (j = 0; j < jLen; j += 1) {
          animatorData = animators[j];

          if (animatorData.a.sc) {
            documentData.strokeColorAnim = true;
          }

          if (animatorData.a.sw) {
            documentData.strokeWidthAnim = true;
          }

          if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
            documentData.fillColorAnim = true;
          }

          ind = 0;
          based = animatorData.s.b;

          for (i = 0; i < len; i += 1) {
            letterData = letters[i];
            letterData.anIndexes[j] = ind;

            if (based == 1 && letterData.val !== '' || based == 2 && letterData.val !== '' && letterData.val !== ' ' || based == 3 && (letterData.n || letterData.val == ' ' || i == len - 1) || based == 4 && (letterData.n || i == len - 1)) {
              // eslint-disable-line eqeqeq
              if (animatorData.s.rn === 1) {
                indexes.push(ind);
              }

              ind += 1;
            }
          }

          data.a[j].s.totalChars = ind;
          var currentInd = -1;
          var newInd;

          if (animatorData.s.rn === 1) {
            for (i = 0; i < len; i += 1) {
              letterData = letters[i];

              if (currentInd != letterData.anIndexes[j]) {
                // eslint-disable-line eqeqeq
                currentInd = letterData.anIndexes[j];
                newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
              }

              letterData.anIndexes[j] = newInd;
            }
          }
        }

        documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
        documentData.ls = documentData.ls || 0;
        documentData.ascent = fontData.ascent * documentData.finalSize / 100;
      };

      TextProperty.prototype.updateDocumentData = function (newData, index) {
        index = index === undefined ? this.keysIndex : index;
        var dData = this.copyData({}, this.data.d.k[index].s);
        dData = this.copyData(dData, newData);
        this.data.d.k[index].s = dData;
        this.recalculate(index);
        this.elem.addDynamicProperty(this);
      };

      TextProperty.prototype.recalculate = function (index) {
        var dData = this.data.d.k[index].s;
        dData.__complete = false;
        this.keysIndex = 0;
        this._isFirstFrame = true;
        this.getValue(dData);
      };

      TextProperty.prototype.canResizeFont = function (_canResize) {
        this.canResize = _canResize;
        this.recalculate(this.keysIndex);
        this.elem.addDynamicProperty(this);
      };

      TextProperty.prototype.setMinimumFontSize = function (_fontValue) {
        this.minimumFontSize = Math.floor(_fontValue) || 1;
        this.recalculate(this.keysIndex);
        this.elem.addDynamicProperty(this);
      };

      var TextSelectorProp = function () {
        var max = Math.max;
        var min = Math.min;
        var floor = Math.floor;

        function TextSelectorPropFactory(elem, data) {
          this._currentTextLength = -1;
          this.k = false;
          this.data = data;
          this.elem = elem;
          this.comp = elem.comp;
          this.finalS = 0;
          this.finalE = 0;
          this.initDynamicPropertyContainer(elem);
          this.s = PropertyFactory.getProp(elem, data.s || {
            k: 0
          }, 0, 0, this);

          if ('e' in data) {
            this.e = PropertyFactory.getProp(elem, data.e, 0, 0, this);
          } else {
            this.e = {
              v: 100
            };
          }

          this.o = PropertyFactory.getProp(elem, data.o || {
            k: 0
          }, 0, 0, this);
          this.xe = PropertyFactory.getProp(elem, data.xe || {
            k: 0
          }, 0, 0, this);
          this.ne = PropertyFactory.getProp(elem, data.ne || {
            k: 0
          }, 0, 0, this);
          this.sm = PropertyFactory.getProp(elem, data.sm || {
            k: 100
          }, 0, 0, this);
          this.a = PropertyFactory.getProp(elem, data.a, 0, 0.01, this);

          if (!this.dynamicProperties.length) {
            this.getValue();
          }
        }

        TextSelectorPropFactory.prototype = {
          getMult: function getMult(ind) {
            if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
              this.getValue();
            }

            var x1 = 0;
            var y1 = 0;
            var x2 = 1;
            var y2 = 1;

            if (this.ne.v > 0) {
              x1 = this.ne.v / 100.0;
            } else {
              y1 = -this.ne.v / 100.0;
            }

            if (this.xe.v > 0) {
              x2 = 1.0 - this.xe.v / 100.0;
            } else {
              y2 = 1.0 + this.xe.v / 100.0;
            }

            var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;
            var mult = 0;
            var s = this.finalS;
            var e = this.finalE;
            var type = this.data.sh;

            if (type === 2) {
              if (e === s) {
                mult = ind >= e ? 1 : 0;
              } else {
                mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
              }

              mult = easer(mult);
            } else if (type === 3) {
              if (e === s) {
                mult = ind >= e ? 0 : 1;
              } else {
                mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
              }

              mult = easer(mult);
            } else if (type === 4) {
              if (e === s) {
                mult = 0;
              } else {
                mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));

                if (mult < 0.5) {
                  mult *= 2;
                } else {
                  mult = 1 - 2 * (mult - 0.5);
                }
              }

              mult = easer(mult);
            } else if (type === 5) {
              if (e === s) {
                mult = 0;
              } else {
                var tot = e - s;
                /* ind += 0.5;
                          mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind; */

                ind = min(max(0, ind + 0.5 - s), e - s);
                var x = -tot / 2 + ind;
                var a = tot / 2;
                mult = Math.sqrt(1 - x * x / (a * a));
              }

              mult = easer(mult);
            } else if (type === 6) {
              if (e === s) {
                mult = 0;
              } else {
                ind = min(max(0, ind + 0.5 - s), e - s);
                mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e - s))) / 2; // eslint-disable-line
              }

              mult = easer(mult);
            } else {
              if (ind >= floor(s)) {
                if (ind - s < 0) {
                  mult = max(0, min(min(e, 1) - (s - ind), 1));
                } else {
                  mult = max(0, min(e - ind, 1));
                }
              }

              mult = easer(mult);
            } // Smoothness implementation.
            // The smoothness represents a reduced range of the original [0; 1] range.
            // if smoothness is 25%, the new range will be [0.375; 0.625]
            // Steps are:
            // - find the lower value of the new range (threshold)
            // - if multiplier is smaller than that value, floor it to 0
            // - if it is larger,
            //     - subtract the threshold
            //     - divide it by the smoothness (this will return the range to [0; 1])
            // Note: If it doesn't work on some scenarios, consider applying it before the easer.


            if (this.sm.v !== 100) {
              var smoothness = this.sm.v * 0.01;

              if (smoothness === 0) {
                smoothness = 0.00000001;
              }

              var threshold = 0.5 - smoothness * 0.5;

              if (mult < threshold) {
                mult = 0;
              } else {
                mult = (mult - threshold) / smoothness;

                if (mult > 1) {
                  mult = 1;
                }
              }
            }

            return mult * this.a.v;
          },
          getValue: function getValue(newCharsFlag) {
            this.iterateDynamicProperties();
            this._mdf = newCharsFlag || this._mdf;
            this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;

            if (newCharsFlag && this.data.r === 2) {
              this.e.v = this._currentTextLength;
            }

            var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
            var o = this.o.v / divisor;
            var s = this.s.v / divisor + o;
            var e = this.e.v / divisor + o;

            if (s > e) {
              var _s = s;
              s = e;
              e = _s;
            }

            this.finalS = s;
            this.finalE = e;
          }
        };
        extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);

        function getTextSelectorProp(elem, data, arr) {
          return new TextSelectorPropFactory(elem, data, arr);
        }

        return {
          getTextSelectorProp: getTextSelectorProp
        };
      }();

      function TextAnimatorDataProperty(elem, animatorProps, container) {
        var defaultData = {
          propType: false
        };
        var getProp = PropertyFactory.getProp;
        var textAnimatorAnimatables = animatorProps.a;
        this.a = {
          r: textAnimatorAnimatables.r ? getProp(elem, textAnimatorAnimatables.r, 0, degToRads, container) : defaultData,
          rx: textAnimatorAnimatables.rx ? getProp(elem, textAnimatorAnimatables.rx, 0, degToRads, container) : defaultData,
          ry: textAnimatorAnimatables.ry ? getProp(elem, textAnimatorAnimatables.ry, 0, degToRads, container) : defaultData,
          sk: textAnimatorAnimatables.sk ? getProp(elem, textAnimatorAnimatables.sk, 0, degToRads, container) : defaultData,
          sa: textAnimatorAnimatables.sa ? getProp(elem, textAnimatorAnimatables.sa, 0, degToRads, container) : defaultData,
          s: textAnimatorAnimatables.s ? getProp(elem, textAnimatorAnimatables.s, 1, 0.01, container) : defaultData,
          a: textAnimatorAnimatables.a ? getProp(elem, textAnimatorAnimatables.a, 1, 0, container) : defaultData,
          o: textAnimatorAnimatables.o ? getProp(elem, textAnimatorAnimatables.o, 0, 0.01, container) : defaultData,
          p: textAnimatorAnimatables.p ? getProp(elem, textAnimatorAnimatables.p, 1, 0, container) : defaultData,
          sw: textAnimatorAnimatables.sw ? getProp(elem, textAnimatorAnimatables.sw, 0, 0, container) : defaultData,
          sc: textAnimatorAnimatables.sc ? getProp(elem, textAnimatorAnimatables.sc, 1, 0, container) : defaultData,
          fc: textAnimatorAnimatables.fc ? getProp(elem, textAnimatorAnimatables.fc, 1, 0, container) : defaultData,
          fh: textAnimatorAnimatables.fh ? getProp(elem, textAnimatorAnimatables.fh, 0, 0, container) : defaultData,
          fs: textAnimatorAnimatables.fs ? getProp(elem, textAnimatorAnimatables.fs, 0, 0.01, container) : defaultData,
          fb: textAnimatorAnimatables.fb ? getProp(elem, textAnimatorAnimatables.fb, 0, 0.01, container) : defaultData,
          t: textAnimatorAnimatables.t ? getProp(elem, textAnimatorAnimatables.t, 0, 0, container) : defaultData
        };
        this.s = TextSelectorProp.getTextSelectorProp(elem, animatorProps.s, container);
        this.s.t = animatorProps.s.t;
      }

      function TextAnimatorProperty(textData, renderType, elem) {
        this._isFirstFrame = true;
        this._hasMaskedPath = false;
        this._frameId = -1;
        this._textData = textData;
        this._renderType = renderType;
        this._elem = elem;
        this._animatorsData = createSizedArray(this._textData.a.length);
        this._pathData = {};
        this._moreOptions = {
          alignment: {}
        };
        this.renderedLetters = [];
        this.lettersChangedFlag = false;
        this.initDynamicPropertyContainer(elem);
      }

      TextAnimatorProperty.prototype.searchProperties = function () {
        var i;
        var len = this._textData.a.length;
        var animatorProps;
        var getProp = PropertyFactory.getProp;

        for (i = 0; i < len; i += 1) {
          animatorProps = this._textData.a[i];
          this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
        }

        if (this._textData.p && 'm' in this._textData.p) {
          this._pathData = {
            a: getProp(this._elem, this._textData.p.a, 0, 0, this),
            f: getProp(this._elem, this._textData.p.f, 0, 0, this),
            l: getProp(this._elem, this._textData.p.l, 0, 0, this),
            r: getProp(this._elem, this._textData.p.r, 0, 0, this),
            p: getProp(this._elem, this._textData.p.p, 0, 0, this),
            m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
          };
          this._hasMaskedPath = true;
        } else {
          this._hasMaskedPath = false;
        }

        this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
      };

      TextAnimatorProperty.prototype.getMeasures = function (documentData, lettersChangedFlag) {
        this.lettersChangedFlag = lettersChangedFlag;

        if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
          return;
        }

        this._isFirstFrame = false;
        var alignment = this._moreOptions.alignment.v;
        var animators = this._animatorsData;
        var textData = this._textData;
        var matrixHelper = this.mHelper;
        var renderType = this._renderType;
        var renderedLettersCount = this.renderedLetters.length;
        var xPos;
        var yPos;
        var i;
        var len;
        var letters = documentData.l;
        var pathInfo;
        var currentLength;
        var currentPoint;
        var segmentLength;
        var flag;
        var pointInd;
        var segmentInd;
        var prevPoint;
        var points;
        var segments;
        var partialLength;
        var totalLength;
        var perc;
        var tanAngle;
        var mask;

        if (this._hasMaskedPath) {
          mask = this._pathData.m;

          if (!this._pathData.n || this._pathData._mdf) {
            var paths = mask.v;

            if (this._pathData.r.v) {
              paths = paths.reverse();
            } // TODO: release bezier data cached from previous pathInfo: this._pathData.pi


            pathInfo = {
              tLength: 0,
              segments: []
            };
            len = paths._length - 1;
            var bezierData;
            totalLength = 0;

            for (i = 0; i < len; i += 1) {
              bezierData = bez.buildBezierData(paths.v[i], paths.v[i + 1], [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]], [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]);
              pathInfo.tLength += bezierData.segmentLength;
              pathInfo.segments.push(bezierData);
              totalLength += bezierData.segmentLength;
            }

            i = len;

            if (mask.v.c) {
              bezierData = bez.buildBezierData(paths.v[i], paths.v[0], [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
              pathInfo.tLength += bezierData.segmentLength;
              pathInfo.segments.push(bezierData);
              totalLength += bezierData.segmentLength;
            }

            this._pathData.pi = pathInfo;
          }

          pathInfo = this._pathData.pi;
          currentLength = this._pathData.f.v;
          segmentInd = 0;
          pointInd = 1;
          segmentLength = 0;
          flag = true;
          segments = pathInfo.segments;

          if (currentLength < 0 && mask.v.c) {
            if (pathInfo.tLength < Math.abs(currentLength)) {
              currentLength = -Math.abs(currentLength) % pathInfo.tLength;
            }

            segmentInd = segments.length - 1;
            points = segments[segmentInd].points;
            pointInd = points.length - 1;

            while (currentLength < 0) {
              currentLength += points[pointInd].partialLength;
              pointInd -= 1;

              if (pointInd < 0) {
                segmentInd -= 1;
                points = segments[segmentInd].points;
                pointInd = points.length - 1;
              }
            }
          }

          points = segments[segmentInd].points;
          prevPoint = points[pointInd - 1];
          currentPoint = points[pointInd];
          partialLength = currentPoint.partialLength;
        }

        len = letters.length;
        xPos = 0;
        yPos = 0;
        var yOff = documentData.finalSize * 1.2 * 0.714;
        var firstLine = true;
        var animatorProps;
        var animatorSelector;
        var j;
        var jLen;
        var letterValue;
        jLen = animators.length;
        var mult;
        var ind = -1;
        var offf;
        var xPathPos;
        var yPathPos;
        var initPathPos = currentLength;
        var initSegmentInd = segmentInd;
        var initPointInd = pointInd;
        var currentLine = -1;
        var elemOpacity;
        var sc;
        var sw;
        var fc;
        var k;
        var letterSw;
        var letterSc;
        var letterFc;
        var letterM = '';
        var letterP = this.defaultPropsArray;
        var letterO; //

        if (documentData.j === 2 || documentData.j === 1) {
          var animatorJustifyOffset = 0;
          var animatorFirstCharOffset = 0;
          var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
          var lastIndex = 0;
          var isNewLine = true;

          for (i = 0; i < len; i += 1) {
            if (letters[i].n) {
              if (animatorJustifyOffset) {
                animatorJustifyOffset += animatorFirstCharOffset;
              }

              while (lastIndex < i) {
                letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                lastIndex += 1;
              }

              animatorJustifyOffset = 0;
              isNewLine = true;
            } else {
              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;

                if (animatorProps.t.propType) {
                  if (isNewLine && documentData.j === 2) {
                    animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                  }

                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

                  if (mult.length) {
                    animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                  } else {
                    animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                  }
                }
              }

              isNewLine = false;
            }
          }

          if (animatorJustifyOffset) {
            animatorJustifyOffset += animatorFirstCharOffset;
          }

          while (lastIndex < i) {
            letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
            lastIndex += 1;
          }
        } //


        for (i = 0; i < len; i += 1) {
          matrixHelper.reset();
          elemOpacity = 1;

          if (letters[i].n) {
            xPos = 0;
            yPos += documentData.yOffset;
            yPos += firstLine ? 1 : 0;
            currentLength = initPathPos;
            firstLine = false;

            if (this._hasMaskedPath) {
              segmentInd = initSegmentInd;
              pointInd = initPointInd;
              points = segments[segmentInd].points;
              prevPoint = points[pointInd - 1];
              currentPoint = points[pointInd];
              partialLength = currentPoint.partialLength;
              segmentLength = 0;
            }

            letterM = '';
            letterFc = '';
            letterSw = '';
            letterO = '';
            letterP = this.defaultPropsArray;
          } else {
            if (this._hasMaskedPath) {
              if (currentLine !== letters[i].line) {
                switch (documentData.j) {
                  case 1:
                    currentLength += totalLength - documentData.lineWidths[letters[i].line];
                    break;

                  case 2:
                    currentLength += (totalLength - documentData.lineWidths[letters[i].line]) / 2;
                    break;
                }

                currentLine = letters[i].line;
              }

              if (ind !== letters[i].ind) {
                if (letters[ind]) {
                  currentLength += letters[ind].extra;
                }

                currentLength += letters[i].an / 2;
                ind = letters[i].ind;
              }

              currentLength += alignment[0] * letters[i].an * 0.005;
              var animatorOffset = 0;

              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;

                if (animatorProps.p.propType) {
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

                  if (mult.length) {
                    animatorOffset += animatorProps.p.v[0] * mult[0];
                  } else {
                    animatorOffset += animatorProps.p.v[0] * mult;
                  }
                }

                if (animatorProps.a.propType) {
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

                  if (mult.length) {
                    animatorOffset += animatorProps.a.v[0] * mult[0];
                  } else {
                    animatorOffset += animatorProps.a.v[0] * mult;
                  }
                }
              }

              flag = true; // Force alignment only works with a single line for now

              if (this._pathData.a.v) {
                currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
                currentLength += this._pathData.f.v;
              }

              while (flag) {
                if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                  perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                  xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                  yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                  matrixHelper.translate(-alignment[0] * letters[i].an * 0.005, -(alignment[1] * yOff) * 0.01);
                  flag = false;
                } else if (points) {
                  segmentLength += currentPoint.partialLength;
                  pointInd += 1;

                  if (pointInd >= points.length) {
                    pointInd = 0;
                    segmentInd += 1;

                    if (!segments[segmentInd]) {
                      if (mask.v.c) {
                        pointInd = 0;
                        segmentInd = 0;
                        points = segments[segmentInd].points;
                      } else {
                        segmentLength -= currentPoint.partialLength;
                        points = null;
                      }
                    } else {
                      points = segments[segmentInd].points;
                    }
                  }

                  if (points) {
                    prevPoint = currentPoint;
                    currentPoint = points[pointInd];
                    partialLength = currentPoint.partialLength;
                  }
                }
              }

              offf = letters[i].an / 2 - letters[i].add;
              matrixHelper.translate(-offf, 0, 0);
            } else {
              offf = letters[i].an / 2 - letters[i].add;
              matrixHelper.translate(-offf, 0, 0); // Grouping alignment

              matrixHelper.translate(-alignment[0] * letters[i].an * 0.005, -alignment[1] * yOff * 0.01, 0);
            }

            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;

              if (animatorProps.t.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars); // This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"

                if (xPos !== 0 || documentData.j !== 0) {
                  if (this._hasMaskedPath) {
                    if (mult.length) {
                      currentLength += animatorProps.t.v * mult[0];
                    } else {
                      currentLength += animatorProps.t.v * mult;
                    }
                  } else if (mult.length) {
                    xPos += animatorProps.t.v * mult[0];
                  } else {
                    xPos += animatorProps.t.v * mult;
                  }
                }
              }
            }

            if (documentData.strokeWidthAnim) {
              sw = documentData.sw || 0;
            }

            if (documentData.strokeColorAnim) {
              if (documentData.sc) {
                sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
              } else {
                sc = [0, 0, 0];
              }
            }

            if (documentData.fillColorAnim && documentData.fc) {
              fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
            }

            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;

              if (animatorProps.a.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

                if (mult.length) {
                  matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
                } else {
                  matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
                }
              }
            }

            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;

              if (animatorProps.s.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

                if (mult.length) {
                  matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
                } else {
                  matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
                }
              }
            }

            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;
              animatorSelector = animators[j].s;
              mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

              if (animatorProps.sk.propType) {
                if (mult.length) {
                  matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
                } else {
                  matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
                }
              }

              if (animatorProps.r.propType) {
                if (mult.length) {
                  matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
                } else {
                  matrixHelper.rotateZ(-animatorProps.r.v * mult);
                }
              }

              if (animatorProps.ry.propType) {
                if (mult.length) {
                  matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
                } else {
                  matrixHelper.rotateY(animatorProps.ry.v * mult);
                }
              }

              if (animatorProps.rx.propType) {
                if (mult.length) {
                  matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
                } else {
                  matrixHelper.rotateX(animatorProps.rx.v * mult);
                }
              }

              if (animatorProps.o.propType) {
                if (mult.length) {
                  elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
                } else {
                  elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
                }
              }

              if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
                if (mult.length) {
                  sw += animatorProps.sw.v * mult[0];
                } else {
                  sw += animatorProps.sw.v * mult;
                }
              }

              if (documentData.strokeColorAnim && animatorProps.sc.propType) {
                for (k = 0; k < 3; k += 1) {
                  if (mult.length) {
                    sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult[0];
                  } else {
                    sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult;
                  }
                }
              }

              if (documentData.fillColorAnim && documentData.fc) {
                if (animatorProps.fc.propType) {
                  for (k = 0; k < 3; k += 1) {
                    if (mult.length) {
                      fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult[0];
                    } else {
                      fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult;
                    }
                  }
                }

                if (animatorProps.fh.propType) {
                  if (mult.length) {
                    fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
                  } else {
                    fc = addHueToRGB(fc, animatorProps.fh.v * mult);
                  }
                }

                if (animatorProps.fs.propType) {
                  if (mult.length) {
                    fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
                  } else {
                    fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
                  }
                }

                if (animatorProps.fb.propType) {
                  if (mult.length) {
                    fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
                  } else {
                    fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
                  }
                }
              }
            }

            for (j = 0; j < jLen; j += 1) {
              animatorProps = animators[j].a;

              if (animatorProps.p.propType) {
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);

                if (this._hasMaskedPath) {
                  if (mult.length) {
                    matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                  } else {
                    matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                  }
                } else if (mult.length) {
                  matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
                } else {
                  matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                }
              }
            }

            if (documentData.strokeWidthAnim) {
              letterSw = sw < 0 ? 0 : sw;
            }

            if (documentData.strokeColorAnim) {
              letterSc = 'rgb(' + Math.round(sc[0] * 255) + ',' + Math.round(sc[1] * 255) + ',' + Math.round(sc[2] * 255) + ')';
            }

            if (documentData.fillColorAnim && documentData.fc) {
              letterFc = 'rgb(' + Math.round(fc[0] * 255) + ',' + Math.round(fc[1] * 255) + ',' + Math.round(fc[2] * 255) + ')';
            }

            if (this._hasMaskedPath) {
              matrixHelper.translate(0, -documentData.ls);
              matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);

              if (this._pathData.p.v) {
                tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
                var rot = Math.atan(tanAngle) * 180 / Math.PI;

                if (currentPoint.point[0] < prevPoint.point[0]) {
                  rot += 180;
                }

                matrixHelper.rotate(-rot * Math.PI / 180);
              }

              matrixHelper.translate(xPathPos, yPathPos, 0);
              currentLength -= alignment[0] * letters[i].an * 0.005;

              if (letters[i + 1] && ind !== letters[i + 1].ind) {
                currentLength += letters[i].an / 2;
                currentLength += documentData.tr * 0.001 * documentData.finalSize;
              }
            } else {
              matrixHelper.translate(xPos, yPos, 0);

              if (documentData.ps) {
                // matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
                matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
              }

              switch (documentData.j) {
                case 1:
                  matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]), 0, 0);
                  break;

                case 2:
                  matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]) / 2, 0, 0);
                  break;
              }

              matrixHelper.translate(0, -documentData.ls);
              matrixHelper.translate(offf, 0, 0);
              matrixHelper.translate(alignment[0] * letters[i].an * 0.005, alignment[1] * yOff * 0.01, 0);
              xPos += letters[i].l + documentData.tr * 0.001 * documentData.finalSize;
            }

            if (renderType === 'html') {
              letterM = matrixHelper.toCSS();
            } else if (renderType === 'svg') {
              letterM = matrixHelper.to2dCSS();
            } else {
              letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
            }

            letterO = elemOpacity;
          }

          if (renderedLettersCount <= i) {
            letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
            this.renderedLetters.push(letterValue);
            renderedLettersCount += 1;
            this.lettersChangedFlag = true;
          } else {
            letterValue = this.renderedLetters[i];
            this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
          }
        }
      };

      TextAnimatorProperty.prototype.getValue = function () {
        if (this._elem.globalData.frameId === this._frameId) {
          return;
        }

        this._frameId = this._elem.globalData.frameId;
        this.iterateDynamicProperties();
      };

      TextAnimatorProperty.prototype.mHelper = new Matrix();
      TextAnimatorProperty.prototype.defaultPropsArray = [];
      extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);

      function ITextElement() {}

      ITextElement.prototype.initElement = function (data, globalData, comp) {
        this.lettersChangedFlag = true;
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
        this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
        this.initTransform(data, globalData, comp);
        this.initHierarchy();
        this.initRenderable();
        this.initRendererElement();
        this.createContainerElements();
        this.createRenderableComponents();
        this.createContent();
        this.hide();
        this.textAnimator.searchProperties(this.dynamicProperties);
      };

      ITextElement.prototype.prepareFrame = function (num) {
        this._mdf = false;
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);

        if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
          this.buildNewText();
          this.textProperty._isFirstFrame = false;
          this.textProperty._mdf = false;
        }
      };

      ITextElement.prototype.createPathShape = function (matrixHelper, shapes) {
        var j;
        var jLen = shapes.length;
        var pathNodes;
        var shapeStr = '';

        for (j = 0; j < jLen; j += 1) {
          if (shapes[j].ty === 'sh') {
            pathNodes = shapes[j].ks.k;
            shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
          }
        }

        return shapeStr;
      };

      ITextElement.prototype.updateDocumentData = function (newData, index) {
        this.textProperty.updateDocumentData(newData, index);
      };

      ITextElement.prototype.canResizeFont = function (_canResize) {
        this.textProperty.canResizeFont(_canResize);
      };

      ITextElement.prototype.setMinimumFontSize = function (_fontSize) {
        this.textProperty.setMinimumFontSize(_fontSize);
      };

      ITextElement.prototype.applyTextPropertiesToMatrix = function (documentData, matrixHelper, lineNumber, xPos, yPos) {
        if (documentData.ps) {
          matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
        }

        matrixHelper.translate(0, -documentData.ls, 0);

        switch (documentData.j) {
          case 1:
            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
            break;

          case 2:
            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
            break;
        }

        matrixHelper.translate(xPos, yPos, 0);
      };

      ITextElement.prototype.buildColor = function (colorData) {
        return 'rgb(' + Math.round(colorData[0] * 255) + ',' + Math.round(colorData[1] * 255) + ',' + Math.round(colorData[2] * 255) + ')';
      };

      ITextElement.prototype.emptyProp = new LetterProps();

      ITextElement.prototype.destroy = function () {};

      var emptyShapeData = {
        shapes: []
      };

      function SVGTextLottieElement(data, globalData, comp) {
        this.textSpans = [];
        this.renderType = 'svg';
        this.initElement(data, globalData, comp);
      }

      extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);

      SVGTextLottieElement.prototype.createContent = function () {
        if (this.data.singleShape && !this.globalData.fontManager.chars) {
          this.textContainer = createNS('text');
        }
      };

      SVGTextLottieElement.prototype.buildTextContents = function (textArray) {
        var i = 0;
        var len = textArray.length;
        var textContents = [];
        var currentTextContent = '';

        while (i < len) {
          if (textArray[i] === String.fromCharCode(13) || textArray[i] === String.fromCharCode(3)) {
            textContents.push(currentTextContent);
            currentTextContent = '';
          } else {
            currentTextContent += textArray[i];
          }

          i += 1;
        }

        textContents.push(currentTextContent);
        return textContents;
      };

      SVGTextLottieElement.prototype.buildShapeData = function (data, scale) {
        // data should probably be cloned to apply scale separately to each instance of a text on different layers
        // but since text internal content gets only rendered once and then it's never rerendered,
        // it's probably safe not to clone data and reuse always the same instance even if the object is mutated.
        // Avoiding cloning is preferred since cloning each character shape data is expensive
        if (data.shapes && data.shapes.length) {
          var shape = data.shapes[0];

          if (shape.it) {
            var shapeItem = shape.it[shape.it.length - 1];

            if (shapeItem.s) {
              shapeItem.s.k[0] = scale;
              shapeItem.s.k[1] = scale;
            }
          }
        }

        return data;
      };

      SVGTextLottieElement.prototype.buildNewText = function () {
        this.addDynamicProperty(this);
        var i;
        var len;
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);

        if (documentData.fc) {
          this.layerElement.setAttribute('fill', this.buildColor(documentData.fc));
        } else {
          this.layerElement.setAttribute('fill', 'rgba(0,0,0,0)');
        }

        if (documentData.sc) {
          this.layerElement.setAttribute('stroke', this.buildColor(documentData.sc));
          this.layerElement.setAttribute('stroke-width', documentData.sw);
        }

        this.layerElement.setAttribute('font-size', documentData.finalSize);
        var fontData = this.globalData.fontManager.getFontByName(documentData.f);

        if (fontData.fClass) {
          this.layerElement.setAttribute('class', fontData.fClass);
        } else {
          this.layerElement.setAttribute('font-family', fontData.fFamily);
          var fWeight = documentData.fWeight;
          var fStyle = documentData.fStyle;
          this.layerElement.setAttribute('font-style', fStyle);
          this.layerElement.setAttribute('font-weight', fWeight);
        }

        this.layerElement.setAttribute('aria-label', documentData.t);
        var letters = documentData.l || [];
        var usesGlyphs = !!this.globalData.fontManager.chars;
        len = letters.length;
        var tSpan;
        var matrixHelper = this.mHelper;
        var shapeStr = '';
        var singleShape = this.data.singleShape;
        var xPos = 0;
        var yPos = 0;
        var firstLine = true;
        var trackingOffset = documentData.tr * 0.001 * documentData.finalSize;

        if (singleShape && !usesGlyphs && !documentData.sz) {
          var tElement = this.textContainer;
          var justify = 'start';

          switch (documentData.j) {
            case 1:
              justify = 'end';
              break;

            case 2:
              justify = 'middle';
              break;

            default:
              justify = 'start';
              break;
          }

          tElement.setAttribute('text-anchor', justify);
          tElement.setAttribute('letter-spacing', trackingOffset);
          var textContent = this.buildTextContents(documentData.finalText);
          len = textContent.length;
          yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;

          for (i = 0; i < len; i += 1) {
            tSpan = this.textSpans[i].span || createNS('tspan');
            tSpan.textContent = textContent[i];
            tSpan.setAttribute('x', 0);
            tSpan.setAttribute('y', yPos);
            tSpan.style.display = 'inherit';
            tElement.appendChild(tSpan);

            if (!this.textSpans[i]) {
              this.textSpans[i] = {
                span: null,
                glyph: null
              };
            }

            this.textSpans[i].span = tSpan;
            yPos += documentData.finalLineHeight;
          }

          this.layerElement.appendChild(tElement);
        } else {
          var cachedSpansLength = this.textSpans.length;
          var charData;

          for (i = 0; i < len; i += 1) {
            if (!this.textSpans[i]) {
              this.textSpans[i] = {
                span: null,
                childSpan: null,
                glyph: null
              };
            }

            if (!usesGlyphs || !singleShape || i === 0) {
              tSpan = cachedSpansLength > i ? this.textSpans[i].span : createNS(usesGlyphs ? 'g' : 'text');

              if (cachedSpansLength <= i) {
                tSpan.setAttribute('stroke-linecap', 'butt');
                tSpan.setAttribute('stroke-linejoin', 'round');
                tSpan.setAttribute('stroke-miterlimit', '4');
                this.textSpans[i].span = tSpan;

                if (usesGlyphs) {
                  var childSpan = createNS('g');
                  tSpan.appendChild(childSpan);
                  this.textSpans[i].childSpan = childSpan;
                }

                this.textSpans[i].span = tSpan;
                this.layerElement.appendChild(tSpan);
              }

              tSpan.style.display = 'inherit';
            }

            matrixHelper.reset();

            if (singleShape) {
              if (letters[i].n) {
                xPos = -trackingOffset;
                yPos += documentData.yOffset;
                yPos += firstLine ? 1 : 0;
                firstLine = false;
              }

              this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
              xPos += letters[i].l || 0; // xPos += letters[i].val === ' ' ? 0 : trackingOffset;

              xPos += trackingOffset;
            }

            if (usesGlyphs) {
              charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
              var glyphElement; // t === 1 means the character has been replaced with an animated shaped

              if (charData.t === 1) {
                glyphElement = new SVGCompElement(charData.data, this.globalData, this);
              } else {
                var data = emptyShapeData;

                if (charData.data && charData.data.shapes) {
                  data = this.buildShapeData(charData.data, documentData.finalSize);
                }

                glyphElement = new SVGShapeElement(data, this.globalData, this);
              }

              if (this.textSpans[i].glyph) {
                var glyph = this.textSpans[i].glyph;
                this.textSpans[i].childSpan.removeChild(glyph.layerElement);
                glyph.destroy();
              }

              this.textSpans[i].glyph = glyphElement;
              glyphElement._debug = true;
              glyphElement.prepareFrame(0);
              glyphElement.renderFrame();
              this.textSpans[i].childSpan.appendChild(glyphElement.layerElement); // when using animated shapes, the layer will be scaled instead of replacing the internal scale
              // this might have issues with strokes and might need a different solution

              if (charData.t === 1) {
                this.textSpans[i].childSpan.setAttribute('transform', 'scale(' + documentData.finalSize / 100 + ',' + documentData.finalSize / 100 + ')');
              }
            } else {
              if (singleShape) {
                tSpan.setAttribute('transform', 'translate(' + matrixHelper.props[12] + ',' + matrixHelper.props[13] + ')');
              }

              tSpan.textContent = letters[i].val;
              tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');
            } //

          }

          if (singleShape && tSpan) {
            tSpan.setAttribute('d', shapeStr);
          }
        }

        while (i < this.textSpans.length) {
          this.textSpans[i].span.style.display = 'none';
          i += 1;
        }

        this._sizeChanged = true;
      };

      SVGTextLottieElement.prototype.sourceRectAtTime = function () {
        this.prepareFrame(this.comp.renderedFrame - this.data.st);
        this.renderInnerContent();

        if (this._sizeChanged) {
          this._sizeChanged = false;
          var textBox = this.layerElement.getBBox();
          this.bbox = {
            top: textBox.y,
            left: textBox.x,
            width: textBox.width,
            height: textBox.height
          };
        }

        return this.bbox;
      };

      SVGTextLottieElement.prototype.getValue = function () {
        var i;
        var len = this.textSpans.length;
        var glyphElement;
        this.renderedFrame = this.comp.renderedFrame;

        for (i = 0; i < len; i += 1) {
          glyphElement = this.textSpans[i].glyph;

          if (glyphElement) {
            glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);

            if (glyphElement._mdf) {
              this._mdf = true;
            }
          }
        }
      };

      SVGTextLottieElement.prototype.renderInnerContent = function () {
        if (!this.data.singleShape || this._mdf) {
          this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);

          if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
            this._sizeChanged = true;
            var i;
            var len;
            var renderedLetters = this.textAnimator.renderedLetters;
            var letters = this.textProperty.currentData.l;
            len = letters.length;
            var renderedLetter;
            var textSpan;
            var glyphElement;

            for (i = 0; i < len; i += 1) {
              if (!letters[i].n) {
                renderedLetter = renderedLetters[i];
                textSpan = this.textSpans[i].span;
                glyphElement = this.textSpans[i].glyph;

                if (glyphElement) {
                  glyphElement.renderFrame();
                }

                if (renderedLetter._mdf.m) {
                  textSpan.setAttribute('transform', renderedLetter.m);
                }

                if (renderedLetter._mdf.o) {
                  textSpan.setAttribute('opacity', renderedLetter.o);
                }

                if (renderedLetter._mdf.sw) {
                  textSpan.setAttribute('stroke-width', renderedLetter.sw);
                }

                if (renderedLetter._mdf.sc) {
                  textSpan.setAttribute('stroke', renderedLetter.sc);
                }

                if (renderedLetter._mdf.fc) {
                  textSpan.setAttribute('fill', renderedLetter.fc);
                }
              }
            }
          }
        }
      };

      function ISolidElement(data, globalData, comp) {
        this.initElement(data, globalData, comp);
      }

      extendPrototype([IImageElement], ISolidElement);

      ISolidElement.prototype.createContent = function () {
        var rect = createNS('rect'); /// /rect.style.width = this.data.sw;
        /// /rect.style.height = this.data.sh;
        /// /rect.style.fill = this.data.sc;

        rect.setAttribute('width', this.data.sw);
        rect.setAttribute('height', this.data.sh);
        rect.setAttribute('fill', this.data.sc);
        this.layerElement.appendChild(rect);
      };

      function NullElement(data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initFrame();
        this.initTransform(data, globalData, comp);
        this.initHierarchy();
      }

      NullElement.prototype.prepareFrame = function (num) {
        this.prepareProperties(num, true);
      };

      NullElement.prototype.renderFrame = function () {};

      NullElement.prototype.getBaseElement = function () {
        return null;
      };

      NullElement.prototype.destroy = function () {};

      NullElement.prototype.sourceRectAtTime = function () {};

      NullElement.prototype.hide = function () {};

      extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);

      function SVGRendererBase() {}

      extendPrototype([BaseRenderer], SVGRendererBase);

      SVGRendererBase.prototype.createNull = function (data) {
        return new NullElement(data, this.globalData, this);
      };

      SVGRendererBase.prototype.createShape = function (data) {
        return new SVGShapeElement(data, this.globalData, this);
      };

      SVGRendererBase.prototype.createText = function (data) {
        return new SVGTextLottieElement(data, this.globalData, this);
      };

      SVGRendererBase.prototype.createImage = function (data) {
        return new IImageElement(data, this.globalData, this);
      };

      SVGRendererBase.prototype.createSolid = function (data) {
        return new ISolidElement(data, this.globalData, this);
      };

      SVGRendererBase.prototype.configAnimation = function (animData) {
        this.svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');

        if (this.renderConfig.viewBoxSize) {
          this.svgElement.setAttribute('viewBox', this.renderConfig.viewBoxSize);
        } else {
          this.svgElement.setAttribute('viewBox', '0 0 ' + animData.w + ' ' + animData.h);
        }

        if (!this.renderConfig.viewBoxOnly) {
          this.svgElement.setAttribute('width', animData.w);
          this.svgElement.setAttribute('height', animData.h);
          this.svgElement.style.width = '100%';
          this.svgElement.style.height = '100%';
          this.svgElement.style.transform = 'translate3d(0,0,0)';
          this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
        }

        if (this.renderConfig.width) {
          this.svgElement.setAttribute('width', this.renderConfig.width);
        }

        if (this.renderConfig.height) {
          this.svgElement.setAttribute('height', this.renderConfig.height);
        }

        if (this.renderConfig.className) {
          this.svgElement.setAttribute('class', this.renderConfig.className);
        }

        if (this.renderConfig.id) {
          this.svgElement.setAttribute('id', this.renderConfig.id);
        }

        if (this.renderConfig.focusable !== undefined) {
          this.svgElement.setAttribute('focusable', this.renderConfig.focusable);
        }

        this.svgElement.setAttribute('preserveAspectRatio', this.renderConfig.preserveAspectRatio); // this.layerElement.style.transform = 'translate3d(0,0,0)';
        // this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";

        this.animationItem.wrapper.appendChild(this.svgElement); // Mask animation

        var defs = this.globalData.defs;
        this.setupGlobalData(animData, defs);
        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
        this.data = animData;
        var maskElement = createNS('clipPath');
        var rect = createNS('rect');
        rect.setAttribute('width', animData.w);
        rect.setAttribute('height', animData.h);
        rect.setAttribute('x', 0);
        rect.setAttribute('y', 0);
        var maskId = createElementID();
        maskElement.setAttribute('id', maskId);
        maskElement.appendChild(rect);
        this.layerElement.setAttribute('clip-path', 'url(' + getLocationHref() + '#' + maskId + ')');
        defs.appendChild(maskElement);
        this.layers = animData.layers;
        this.elements = createSizedArray(animData.layers.length);
      };

      SVGRendererBase.prototype.destroy = function () {
        if (this.animationItem.wrapper) {
          this.animationItem.wrapper.innerText = '';
        }

        this.layerElement = null;
        this.globalData.defs = null;
        var i;
        var len = this.layers ? this.layers.length : 0;

        for (i = 0; i < len; i += 1) {
          if (this.elements[i]) {
            this.elements[i].destroy();
          }
        }

        this.elements.length = 0;
        this.destroyed = true;
        this.animationItem = null;
      };

      SVGRendererBase.prototype.updateContainerSize = function () {};

      SVGRendererBase.prototype.buildItem = function (pos) {
        var elements = this.elements;

        if (elements[pos] || this.layers[pos].ty === 99) {
          return;
        }

        elements[pos] = true;
        var element = this.createItem(this.layers[pos]);
        elements[pos] = element;

        if (getExpressionsPlugin()) {
          if (this.layers[pos].ty === 0) {
            this.globalData.projectInterface.registerComposition(element);
          }

          element.initExpressions();
        }

        this.appendElementInPos(element, pos);

        if (this.layers[pos].tt) {
          if (!this.elements[pos - 1] || this.elements[pos - 1] === true) {
            this.buildItem(pos - 1);
            this.addPendingElement(element);
          } else {
            element.setMatte(elements[pos - 1].layerId);
          }
        }
      };

      SVGRendererBase.prototype.checkPendingElements = function () {
        while (this.pendingElements.length) {
          var element = this.pendingElements.pop();
          element.checkParenting();

          if (element.data.tt) {
            var i = 0;
            var len = this.elements.length;

            while (i < len) {
              if (this.elements[i] === element) {
                element.setMatte(this.elements[i - 1].layerId);
                break;
              }

              i += 1;
            }
          }
        }
      };

      SVGRendererBase.prototype.renderFrame = function (num) {
        if (this.renderedFrame === num || this.destroyed) {
          return;
        }

        if (num === null) {
          num = this.renderedFrame;
        } else {
          this.renderedFrame = num;
        } // console.log('-------');
        // console.log('FRAME ',num);


        this.globalData.frameNum = num;
        this.globalData.frameId += 1;
        this.globalData.projectInterface.currentFrame = num;
        this.globalData._mdf = false;
        var i;
        var len = this.layers.length;

        if (!this.completeLayers) {
          this.checkLayers(num);
        }

        for (i = len - 1; i >= 0; i -= 1) {
          if (this.completeLayers || this.elements[i]) {
            this.elements[i].prepareFrame(num - this.layers[i].st);
          }
        }

        if (this.globalData._mdf) {
          for (i = 0; i < len; i += 1) {
            if (this.completeLayers || this.elements[i]) {
              this.elements[i].renderFrame();
            }
          }
        }
      };

      SVGRendererBase.prototype.appendElementInPos = function (element, pos) {
        var newElement = element.getBaseElement();

        if (!newElement) {
          return;
        }

        var i = 0;
        var nextElement;

        while (i < pos) {
          if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement()) {
            nextElement = this.elements[i].getBaseElement();
          }

          i += 1;
        }

        if (nextElement) {
          this.layerElement.insertBefore(newElement, nextElement);
        } else {
          this.layerElement.appendChild(newElement);
        }
      };

      SVGRendererBase.prototype.hide = function () {
        this.layerElement.style.display = 'none';
      };

      SVGRendererBase.prototype.show = function () {
        this.layerElement.style.display = 'block';
      };

      function ICompElement() {}

      extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);

      ICompElement.prototype.initElement = function (data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initTransform(data, globalData, comp);
        this.initRenderable();
        this.initHierarchy();
        this.initRendererElement();
        this.createContainerElements();
        this.createRenderableComponents();

        if (this.data.xt || !globalData.progressiveLoad) {
          this.buildAllItems();
        }

        this.hide();
      };
      /* ICompElement.prototype.hide = function(){
          if(!this.hidden){
              this.hideElement();
              var i,len = this.elements.length;
              for( i = 0; i < len; i+=1 ){
                  if(this.elements[i]){
                      this.elements[i].hide();
                  }
              }
          }
      }; */


      ICompElement.prototype.prepareFrame = function (num) {
        this._mdf = false;
        this.prepareRenderableFrame(num);
        this.prepareProperties(num, this.isInRange);

        if (!this.isInRange && !this.data.xt) {
          return;
        }

        if (!this.tm._placeholder) {
          var timeRemapped = this.tm.v;

          if (timeRemapped === this.data.op) {
            timeRemapped = this.data.op - 1;
          }

          this.renderedFrame = timeRemapped;
        } else {
          this.renderedFrame = num / this.data.sr;
        }

        var i;
        var len = this.elements.length;

        if (!this.completeLayers) {
          this.checkLayers(this.renderedFrame);
        } // This iteration needs to be backwards because of how expressions connect between each other


        for (i = len - 1; i >= 0; i -= 1) {
          if (this.completeLayers || this.elements[i]) {
            this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);

            if (this.elements[i]._mdf) {
              this._mdf = true;
            }
          }
        }
      };

      ICompElement.prototype.renderInnerContent = function () {
        var i;
        var len = this.layers.length;

        for (i = 0; i < len; i += 1) {
          if (this.completeLayers || this.elements[i]) {
            this.elements[i].renderFrame();
          }
        }
      };

      ICompElement.prototype.setElements = function (elems) {
        this.elements = elems;
      };

      ICompElement.prototype.getElements = function () {
        return this.elements;
      };

      ICompElement.prototype.destroyElements = function () {
        var i;
        var len = this.layers.length;

        for (i = 0; i < len; i += 1) {
          if (this.elements[i]) {
            this.elements[i].destroy();
          }
        }
      };

      ICompElement.prototype.destroy = function () {
        this.destroyElements();
        this.destroyBaseElement();
      };

      function SVGCompElement(data, globalData, comp) {
        this.layers = data.layers;
        this.supports3d = true;
        this.completeLayers = false;
        this.pendingElements = [];
        this.elements = this.layers ? createSizedArray(this.layers.length) : [];
        this.initElement(data, globalData, comp);
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
          _placeholder: true
        };
      }

      extendPrototype([SVGRendererBase, ICompElement, SVGBaseElement], SVGCompElement);

      SVGCompElement.prototype.createComp = function (data) {
        return new SVGCompElement(data, this.globalData, this);
      };

      function SVGRenderer(animationItem, config) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.svgElement = createNS('svg');
        var ariaLabel = '';

        if (config && config.title) {
          var titleElement = createNS('title');
          var titleId = createElementID();
          titleElement.setAttribute('id', titleId);
          titleElement.textContent = config.title;
          this.svgElement.appendChild(titleElement);
          ariaLabel += titleId;
        }

        if (config && config.description) {
          var descElement = createNS('desc');
          var descId = createElementID();
          descElement.setAttribute('id', descId);
          descElement.textContent = config.description;
          this.svgElement.appendChild(descElement);
          ariaLabel += ' ' + descId;
        }

        if (ariaLabel) {
          this.svgElement.setAttribute('aria-labelledby', ariaLabel);
        }

        var defs = createNS('defs');
        this.svgElement.appendChild(defs);
        var maskElement = createNS('g');
        this.svgElement.appendChild(maskElement);
        this.layerElement = maskElement;
        this.renderConfig = {
          preserveAspectRatio: config && config.preserveAspectRatio || 'xMidYMid meet',
          imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
          contentVisibility: config && config.contentVisibility || 'visible',
          progressiveLoad: config && config.progressiveLoad || false,
          hideOnTransparent: !(config && config.hideOnTransparent === false),
          viewBoxOnly: config && config.viewBoxOnly || false,
          viewBoxSize: config && config.viewBoxSize || false,
          className: config && config.className || '',
          id: config && config.id || '',
          focusable: config && config.focusable,
          filterSize: {
            width: config && config.filterSize && config.filterSize.width || '100%',
            height: config && config.filterSize && config.filterSize.height || '100%',
            x: config && config.filterSize && config.filterSize.x || '0%',
            y: config && config.filterSize && config.filterSize.y || '0%'
          },
          width: config && config.width,
          height: config && config.height
        };
        this.globalData = {
          _mdf: false,
          frameNum: -1,
          defs: defs,
          renderConfig: this.renderConfig
        };
        this.elements = [];
        this.pendingElements = [];
        this.destroyed = false;
        this.rendererType = 'svg';
      }

      extendPrototype([SVGRendererBase], SVGRenderer);

      SVGRenderer.prototype.createComp = function (data) {
        return new SVGCompElement(data, this.globalData, this);
      };

      function CVContextData() {
        this.saved = [];
        this.cArrPos = 0;
        this.cTr = new Matrix();
        this.cO = 1;
        var i;
        var len = 15;
        this.savedOp = createTypedArray('float32', len);

        for (i = 0; i < len; i += 1) {
          this.saved[i] = createTypedArray('float32', 16);
        }

        this._length = len;
      }

      CVContextData.prototype.duplicate = function () {
        var newLength = this._length * 2;
        var currentSavedOp = this.savedOp;
        this.savedOp = createTypedArray('float32', newLength);
        this.savedOp.set(currentSavedOp);
        var i = 0;

        for (i = this._length; i < newLength; i += 1) {
          this.saved[i] = createTypedArray('float32', 16);
        }

        this._length = newLength;
      };

      CVContextData.prototype.reset = function () {
        this.cArrPos = 0;
        this.cTr.reset();
        this.cO = 1;
      };

      function ShapeTransformManager() {
        this.sequences = {};
        this.sequenceList = [];
        this.transform_key_count = 0;
      }

      ShapeTransformManager.prototype = {
        addTransformSequence: function addTransformSequence(transforms) {
          var i;
          var len = transforms.length;
          var key = '_';

          for (i = 0; i < len; i += 1) {
            key += transforms[i].transform.key + '_';
          }

          var sequence = this.sequences[key];

          if (!sequence) {
            sequence = {
              transforms: [].concat(transforms),
              finalTransform: new Matrix(),
              _mdf: false
            };
            this.sequences[key] = sequence;
            this.sequenceList.push(sequence);
          }

          return sequence;
        },
        processSequence: function processSequence(sequence, isFirstFrame) {
          var i = 0;
          var len = sequence.transforms.length;
          var _mdf = isFirstFrame;

          while (i < len && !isFirstFrame) {
            if (sequence.transforms[i].transform.mProps._mdf) {
              _mdf = true;
              break;
            }

            i += 1;
          }

          if (_mdf) {
            var props;
            sequence.finalTransform.reset();

            for (i = len - 1; i >= 0; i -= 1) {
              props = sequence.transforms[i].transform.mProps.v.props;
              sequence.finalTransform.transform(props[0], props[1], props[2], props[3], props[4], props[5], props[6], props[7], props[8], props[9], props[10], props[11], props[12], props[13], props[14], props[15]);
            }
          }

          sequence._mdf = _mdf;
        },
        processSequences: function processSequences(isFirstFrame) {
          var i;
          var len = this.sequenceList.length;

          for (i = 0; i < len; i += 1) {
            this.processSequence(this.sequenceList[i], isFirstFrame);
          }
        },
        getNewKey: function getNewKey() {
          this.transform_key_count += 1;
          return '_' + this.transform_key_count;
        }
      };

      function CVEffects() {}

      CVEffects.prototype.renderFrame = function () {};

      function CVMaskElement(data, element) {
        this.data = data;
        this.element = element;
        this.masksProperties = this.data.masksProperties || [];
        this.viewData = createSizedArray(this.masksProperties.length);
        var i;
        var len = this.masksProperties.length;
        var hasMasks = false;

        for (i = 0; i < len; i += 1) {
          if (this.masksProperties[i].mode !== 'n') {
            hasMasks = true;
          }

          this.viewData[i] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i], 3);
        }

        this.hasMasks = hasMasks;

        if (hasMasks) {
          this.element.addRenderableComponent(this);
        }
      }

      CVMaskElement.prototype.renderFrame = function () {
        if (!this.hasMasks) {
          return;
        }

        var transform = this.element.finalTransform.mat;
        var ctx = this.element.canvasContext;
        var i;
        var len = this.masksProperties.length;
        var pt;
        var pts;
        var data;
        ctx.beginPath();

        for (i = 0; i < len; i += 1) {
          if (this.masksProperties[i].mode !== 'n') {
            if (this.masksProperties[i].inv) {
              ctx.moveTo(0, 0);
              ctx.lineTo(this.element.globalData.compSize.w, 0);
              ctx.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
              ctx.lineTo(0, this.element.globalData.compSize.h);
              ctx.lineTo(0, 0);
            }

            data = this.viewData[i].v;
            pt = transform.applyToPointArray(data.v[0][0], data.v[0][1], 0);
            ctx.moveTo(pt[0], pt[1]);
            var j;
            var jLen = data._length;

            for (j = 1; j < jLen; j += 1) {
              pts = transform.applyToTriplePoints(data.o[j - 1], data.i[j], data.v[j]);
              ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
            }

            pts = transform.applyToTriplePoints(data.o[j - 1], data.i[0], data.v[0]);
            ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
          }
        }

        this.element.globalData.renderer.save(true);
        ctx.clip();
      };

      CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;

      CVMaskElement.prototype.destroy = function () {
        this.element = null;
      };

      function CVBaseElement() {}

      CVBaseElement.prototype = {
        createElements: function createElements() {},
        initRendererElement: function initRendererElement() {},
        createContainerElements: function createContainerElements() {
          this.canvasContext = this.globalData.canvasContext;
          this.renderableEffectsManager = new CVEffects(this);
        },
        createContent: function createContent() {},
        setBlendMode: function setBlendMode() {
          var globalData = this.globalData;

          if (globalData.blendMode !== this.data.bm) {
            globalData.blendMode = this.data.bm;
            var blendModeValue = getBlendMode(this.data.bm);
            globalData.canvasContext.globalCompositeOperation = blendModeValue;
          }
        },
        createRenderableComponents: function createRenderableComponents() {
          this.maskManager = new CVMaskElement(this.data, this);
        },
        hideElement: function hideElement() {
          if (!this.hidden && (!this.isInRange || this.isTransparent)) {
            this.hidden = true;
          }
        },
        showElement: function showElement() {
          if (this.isInRange && !this.isTransparent) {
            this.hidden = false;
            this._isFirstFrame = true;
            this.maskManager._isFirstFrame = true;
          }
        },
        renderFrame: function renderFrame() {
          if (this.hidden || this.data.hd) {
            return;
          }

          this.renderTransform();
          this.renderRenderable();
          this.setBlendMode();
          var forceRealStack = this.data.ty === 0;
          this.globalData.renderer.save(forceRealStack);
          this.globalData.renderer.ctxTransform(this.finalTransform.mat.props);
          this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v);
          this.renderInnerContent();
          this.globalData.renderer.restore(forceRealStack);

          if (this.maskManager.hasMasks) {
            this.globalData.renderer.restore(true);
          }

          if (this._isFirstFrame) {
            this._isFirstFrame = false;
          }
        },
        destroy: function destroy() {
          this.canvasContext = null;
          this.data = null;
          this.globalData = null;
          this.maskManager.destroy();
        },
        mHelper: new Matrix()
      };
      CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
      CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;

      function CVShapeData(element, data, styles, transformsManager) {
        this.styledShapes = [];
        this.tr = [0, 0, 0, 0, 0, 0];
        var ty = 4;

        if (data.ty === 'rc') {
          ty = 5;
        } else if (data.ty === 'el') {
          ty = 6;
        } else if (data.ty === 'sr') {
          ty = 7;
        }

        this.sh = ShapePropertyFactory.getShapeProp(element, data, ty, element);
        var i;
        var len = styles.length;
        var styledShape;

        for (i = 0; i < len; i += 1) {
          if (!styles[i].closed) {
            styledShape = {
              transforms: transformsManager.addTransformSequence(styles[i].transforms),
              trNodes: []
            };
            this.styledShapes.push(styledShape);
            styles[i].elements.push(styledShape);
          }
        }
      }

      CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;

      function CVShapeElement(data, globalData, comp) {
        this.shapes = [];
        this.shapesData = data.shapes;
        this.stylesList = [];
        this.itemsData = [];
        this.prevViewData = [];
        this.shapeModifiers = [];
        this.processedElements = [];
        this.transformsManager = new ShapeTransformManager();
        this.initElement(data, globalData, comp);
      }

      extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);
      CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
      CVShapeElement.prototype.transformHelper = {
        opacity: 1,
        _opMdf: false
      };
      CVShapeElement.prototype.dashResetter = [];

      CVShapeElement.prototype.createContent = function () {
        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
      };

      CVShapeElement.prototype.createStyleElement = function (data, transforms) {
        var styleElem = {
          data: data,
          type: data.ty,
          preTransforms: this.transformsManager.addTransformSequence(transforms),
          transforms: [],
          elements: [],
          closed: data.hd === true
        };
        var elementData = {};

        if (data.ty === 'fl' || data.ty === 'st') {
          elementData.c = PropertyFactory.getProp(this, data.c, 1, 255, this);

          if (!elementData.c.k) {
            styleElem.co = 'rgb(' + bmFloor(elementData.c.v[0]) + ',' + bmFloor(elementData.c.v[1]) + ',' + bmFloor(elementData.c.v[2]) + ')';
          }
        } else if (data.ty === 'gf' || data.ty === 'gs') {
          elementData.s = PropertyFactory.getProp(this, data.s, 1, null, this);
          elementData.e = PropertyFactory.getProp(this, data.e, 1, null, this);
          elementData.h = PropertyFactory.getProp(this, data.h || {
            k: 0
          }, 0, 0.01, this);
          elementData.a = PropertyFactory.getProp(this, data.a || {
            k: 0
          }, 0, degToRads, this);
          elementData.g = new GradientProperty(this, data.g, this);
        }

        elementData.o = PropertyFactory.getProp(this, data.o, 0, 0.01, this);

        if (data.ty === 'st' || data.ty === 'gs') {
          styleElem.lc = lineCapEnum[data.lc || 2];
          styleElem.lj = lineJoinEnum[data.lj || 2];

          if (data.lj == 1) {
            // eslint-disable-line eqeqeq
            styleElem.ml = data.ml;
          }

          elementData.w = PropertyFactory.getProp(this, data.w, 0, null, this);

          if (!elementData.w.k) {
            styleElem.wi = elementData.w.v;
          }

          if (data.d) {
            var d = new DashProperty(this, data.d, 'canvas', this);
            elementData.d = d;

            if (!elementData.d.k) {
              styleElem.da = elementData.d.dashArray;
              styleElem["do"] = elementData.d.dashoffset[0];
            }
          }
        } else {
          styleElem.r = data.r === 2 ? 'evenodd' : 'nonzero';
        }

        this.stylesList.push(styleElem);
        elementData.style = styleElem;
        return elementData;
      };

      CVShapeElement.prototype.createGroupElement = function () {
        var elementData = {
          it: [],
          prevViewData: []
        };
        return elementData;
      };

      CVShapeElement.prototype.createTransformElement = function (data) {
        var elementData = {
          transform: {
            opacity: 1,
            _opMdf: false,
            key: this.transformsManager.getNewKey(),
            op: PropertyFactory.getProp(this, data.o, 0, 0.01, this),
            mProps: TransformPropertyFactory.getTransformProperty(this, data, this)
          }
        };
        return elementData;
      };

      CVShapeElement.prototype.createShapeElement = function (data) {
        var elementData = new CVShapeData(this, data, this.stylesList, this.transformsManager);
        this.shapes.push(elementData);
        this.addShapeToModifiers(elementData);
        return elementData;
      };

      CVShapeElement.prototype.reloadShapes = function () {
        this._isFirstFrame = true;
        var i;
        var len = this.itemsData.length;

        for (i = 0; i < len; i += 1) {
          this.prevViewData[i] = this.itemsData[i];
        }

        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
        len = this.dynamicProperties.length;

        for (i = 0; i < len; i += 1) {
          this.dynamicProperties[i].getValue();
        }

        this.renderModifiers();
        this.transformsManager.processSequences(this._isFirstFrame);
      };

      CVShapeElement.prototype.addTransformToStyleList = function (transform) {
        var i;
        var len = this.stylesList.length;

        for (i = 0; i < len; i += 1) {
          if (!this.stylesList[i].closed) {
            this.stylesList[i].transforms.push(transform);
          }
        }
      };

      CVShapeElement.prototype.removeTransformFromStyleList = function () {
        var i;
        var len = this.stylesList.length;

        for (i = 0; i < len; i += 1) {
          if (!this.stylesList[i].closed) {
            this.stylesList[i].transforms.pop();
          }
        }
      };

      CVShapeElement.prototype.closeStyles = function (styles) {
        var i;
        var len = styles.length;

        for (i = 0; i < len; i += 1) {
          styles[i].closed = true;
        }
      };

      CVShapeElement.prototype.searchShapes = function (arr, itemsData, prevViewData, shouldRender, transforms) {
        var i;
        var len = arr.length - 1;
        var j;
        var jLen;
        var ownStyles = [];
        var ownModifiers = [];
        var processedPos;
        var modifier;
        var currentTransform;
        var ownTransforms = [].concat(transforms);

        for (i = len; i >= 0; i -= 1) {
          processedPos = this.searchProcessedElement(arr[i]);

          if (!processedPos) {
            arr[i]._shouldRender = shouldRender;
          } else {
            itemsData[i] = prevViewData[processedPos - 1];
          }

          if (arr[i].ty === 'fl' || arr[i].ty === 'st' || arr[i].ty === 'gf' || arr[i].ty === 'gs') {
            if (!processedPos) {
              itemsData[i] = this.createStyleElement(arr[i], ownTransforms);
            } else {
              itemsData[i].style.closed = false;
            }

            ownStyles.push(itemsData[i].style);
          } else if (arr[i].ty === 'gr') {
            if (!processedPos) {
              itemsData[i] = this.createGroupElement(arr[i]);
            } else {
              jLen = itemsData[i].it.length;

              for (j = 0; j < jLen; j += 1) {
                itemsData[i].prevViewData[j] = itemsData[i].it[j];
              }
            }

            this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, shouldRender, ownTransforms);
          } else if (arr[i].ty === 'tr') {
            if (!processedPos) {
              currentTransform = this.createTransformElement(arr[i]);
              itemsData[i] = currentTransform;
            }

            ownTransforms.push(itemsData[i]);
            this.addTransformToStyleList(itemsData[i]);
          } else if (arr[i].ty === 'sh' || arr[i].ty === 'rc' || arr[i].ty === 'el' || arr[i].ty === 'sr') {
            if (!processedPos) {
              itemsData[i] = this.createShapeElement(arr[i]);
            }
          } else if (arr[i].ty === 'tm' || arr[i].ty === 'rd' || arr[i].ty === 'pb') {
            if (!processedPos) {
              modifier = ShapeModifiers.getModifier(arr[i].ty);
              modifier.init(this, arr[i]);
              itemsData[i] = modifier;
              this.shapeModifiers.push(modifier);
            } else {
              modifier = itemsData[i];
              modifier.closed = false;
            }

            ownModifiers.push(modifier);
          } else if (arr[i].ty === 'rp') {
            if (!processedPos) {
              modifier = ShapeModifiers.getModifier(arr[i].ty);
              itemsData[i] = modifier;
              modifier.init(this, arr, i, itemsData);
              this.shapeModifiers.push(modifier);
              shouldRender = false;
            } else {
              modifier = itemsData[i];
              modifier.closed = true;
            }

            ownModifiers.push(modifier);
          }

          this.addProcessedElement(arr[i], i + 1);
        }

        this.removeTransformFromStyleList();
        this.closeStyles(ownStyles);
        len = ownModifiers.length;

        for (i = 0; i < len; i += 1) {
          ownModifiers[i].closed = true;
        }
      };

      CVShapeElement.prototype.renderInnerContent = function () {
        this.transformHelper.opacity = 1;
        this.transformHelper._opMdf = false;
        this.renderModifiers();
        this.transformsManager.processSequences(this._isFirstFrame);
        this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
      };

      CVShapeElement.prototype.renderShapeTransform = function (parentTransform, groupTransform) {
        if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
          groupTransform.opacity = parentTransform.opacity;
          groupTransform.opacity *= groupTransform.op.v;
          groupTransform._opMdf = true;
        }
      };

      CVShapeElement.prototype.drawLayer = function () {
        var i;
        var len = this.stylesList.length;
        var j;
        var jLen;
        var k;
        var kLen;
        var elems;
        var nodes;
        var renderer = this.globalData.renderer;
        var ctx = this.globalData.canvasContext;
        var type;
        var currentStyle;

        for (i = 0; i < len; i += 1) {
          currentStyle = this.stylesList[i];
          type = currentStyle.type; // Skipping style when
          // Stroke width equals 0
          // style should not be rendered (extra unused repeaters)
          // current opacity equals 0
          // global opacity equals 0

          if (!((type === 'st' || type === 'gs') && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {
            renderer.save();
            elems = currentStyle.elements;

            if (type === 'st' || type === 'gs') {
              ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;
              ctx.lineWidth = currentStyle.wi;
              ctx.lineCap = currentStyle.lc;
              ctx.lineJoin = currentStyle.lj;
              ctx.miterLimit = currentStyle.ml || 0;
            } else {
              ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;
            }

            renderer.ctxOpacity(currentStyle.coOp);

            if (type !== 'st' && type !== 'gs') {
              ctx.beginPath();
            }

            renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);
            jLen = elems.length;

            for (j = 0; j < jLen; j += 1) {
              if (type === 'st' || type === 'gs') {
                ctx.beginPath();

                if (currentStyle.da) {
                  ctx.setLineDash(currentStyle.da);
                  ctx.lineDashOffset = currentStyle["do"];
                }
              }

              nodes = elems[j].trNodes;
              kLen = nodes.length;

              for (k = 0; k < kLen; k += 1) {
                if (nodes[k].t === 'm') {
                  ctx.moveTo(nodes[k].p[0], nodes[k].p[1]);
                } else if (nodes[k].t === 'c') {
                  ctx.bezierCurveTo(nodes[k].pts[0], nodes[k].pts[1], nodes[k].pts[2], nodes[k].pts[3], nodes[k].pts[4], nodes[k].pts[5]);
                } else {
                  ctx.closePath();
                }
              }

              if (type === 'st' || type === 'gs') {
                ctx.stroke();

                if (currentStyle.da) {
                  ctx.setLineDash(this.dashResetter);
                }
              }
            }

            if (type !== 'st' && type !== 'gs') {
              ctx.fill(currentStyle.r);
            }

            renderer.restore();
          }
        }
      };

      CVShapeElement.prototype.renderShape = function (parentTransform, items, data, isMain) {
        var i;
        var len = items.length - 1;
        var groupTransform;
        groupTransform = parentTransform;

        for (i = len; i >= 0; i -= 1) {
          if (items[i].ty === 'tr') {
            groupTransform = data[i].transform;
            this.renderShapeTransform(parentTransform, groupTransform);
          } else if (items[i].ty === 'sh' || items[i].ty === 'el' || items[i].ty === 'rc' || items[i].ty === 'sr') {
            this.renderPath(items[i], data[i]);
          } else if (items[i].ty === 'fl') {
            this.renderFill(items[i], data[i], groupTransform);
          } else if (items[i].ty === 'st') {
            this.renderStroke(items[i], data[i], groupTransform);
          } else if (items[i].ty === 'gf' || items[i].ty === 'gs') {
            this.renderGradientFill(items[i], data[i], groupTransform);
          } else if (items[i].ty === 'gr') {
            this.renderShape(groupTransform, items[i].it, data[i].it);
          } else if (items[i].ty === 'tm') ;
        }

        if (isMain) {
          this.drawLayer();
        }
      };

      CVShapeElement.prototype.renderStyledShape = function (styledShape, shape) {
        if (this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
          var shapeNodes = styledShape.trNodes;
          var paths = shape.paths;
          var i;
          var len;
          var j;
          var jLen = paths._length;
          shapeNodes.length = 0;
          var groupTransformMat = styledShape.transforms.finalTransform;

          for (j = 0; j < jLen; j += 1) {
            var pathNodes = paths.shapes[j];

            if (pathNodes && pathNodes.v) {
              len = pathNodes._length;

              for (i = 1; i < len; i += 1) {
                if (i === 1) {
                  shapeNodes.push({
                    t: 'm',
                    p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                  });
                }

                shapeNodes.push({
                  t: 'c',
                  pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[i], pathNodes.v[i])
                });
              }

              if (len === 1) {
                shapeNodes.push({
                  t: 'm',
                  p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                });
              }

              if (pathNodes.c && len) {
                shapeNodes.push({
                  t: 'c',
                  pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[0], pathNodes.v[0])
                });
                shapeNodes.push({
                  t: 'z'
                });
              }
            }
          }

          styledShape.trNodes = shapeNodes;
        }
      };

      CVShapeElement.prototype.renderPath = function (pathData, itemData) {
        if (pathData.hd !== true && pathData._shouldRender) {
          var i;
          var len = itemData.styledShapes.length;

          for (i = 0; i < len; i += 1) {
            this.renderStyledShape(itemData.styledShapes[i], itemData.sh);
          }
        }
      };

      CVShapeElement.prototype.renderFill = function (styleData, itemData, groupTransform) {
        var styleElem = itemData.style;

        if (itemData.c._mdf || this._isFirstFrame) {
          styleElem.co = 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')';
        }

        if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
          styleElem.coOp = itemData.o.v * groupTransform.opacity;
        }
      };

      CVShapeElement.prototype.renderGradientFill = function (styleData, itemData, groupTransform) {
        var styleElem = itemData.style;
        var grd;

        if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {
          var ctx = this.globalData.canvasContext;
          var pt1 = itemData.s.v;
          var pt2 = itemData.e.v;

          if (styleData.t === 1) {
            grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
          } else {
            var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
            var percent = itemData.h.v;

            if (percent >= 1) {
              percent = 0.99;
            } else if (percent <= -1) {
              percent = -0.99;
            }

            var dist = rad * percent;
            var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
            var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
            grd = ctx.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);
          }

          var i;
          var len = styleData.g.p;
          var cValues = itemData.g.c;
          var opacity = 1;

          for (i = 0; i < len; i += 1) {
            if (itemData.g._hasOpacity && itemData.g._collapsable) {
              opacity = itemData.g.o[i * 2 + 1];
            }

            grd.addColorStop(cValues[i * 4] / 100, 'rgba(' + cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ',' + cValues[i * 4 + 3] + ',' + opacity + ')');
          }

          styleElem.grd = grd;
        }

        styleElem.coOp = itemData.o.v * groupTransform.opacity;
      };

      CVShapeElement.prototype.renderStroke = function (styleData, itemData, groupTransform) {
        var styleElem = itemData.style;
        var d = itemData.d;

        if (d && (d._mdf || this._isFirstFrame)) {
          styleElem.da = d.dashArray;
          styleElem["do"] = d.dashoffset[0];
        }

        if (itemData.c._mdf || this._isFirstFrame) {
          styleElem.co = 'rgb(' + bmFloor(itemData.c.v[0]) + ',' + bmFloor(itemData.c.v[1]) + ',' + bmFloor(itemData.c.v[2]) + ')';
        }

        if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
          styleElem.coOp = itemData.o.v * groupTransform.opacity;
        }

        if (itemData.w._mdf || this._isFirstFrame) {
          styleElem.wi = itemData.w.v;
        }
      };

      CVShapeElement.prototype.destroy = function () {
        this.shapesData = null;
        this.globalData = null;
        this.canvasContext = null;
        this.stylesList.length = 0;
        this.itemsData.length = 0;
      };

      function CVTextElement(data, globalData, comp) {
        this.textSpans = [];
        this.yOffset = 0;
        this.fillColorAnim = false;
        this.strokeColorAnim = false;
        this.strokeWidthAnim = false;
        this.stroke = false;
        this.fill = false;
        this.justifyOffset = 0;
        this.currentRender = null;
        this.renderType = 'canvas';
        this.values = {
          fill: 'rgba(0,0,0,0)',
          stroke: 'rgba(0,0,0,0)',
          sWidth: 0,
          fValue: ''
        };
        this.initElement(data, globalData, comp);
      }

      extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);
      CVTextElement.prototype.tHelper = createTag('canvas').getContext('2d');

      CVTextElement.prototype.buildNewText = function () {
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
        var hasFill = false;

        if (documentData.fc) {
          hasFill = true;
          this.values.fill = this.buildColor(documentData.fc);
        } else {
          this.values.fill = 'rgba(0,0,0,0)';
        }

        this.fill = hasFill;
        var hasStroke = false;

        if (documentData.sc) {
          hasStroke = true;
          this.values.stroke = this.buildColor(documentData.sc);
          this.values.sWidth = documentData.sw;
        }

        var fontData = this.globalData.fontManager.getFontByName(documentData.f);
        var i;
        var len;
        var letters = documentData.l;
        var matrixHelper = this.mHelper;
        this.stroke = hasStroke;
        this.values.fValue = documentData.finalSize + 'px ' + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
        len = documentData.finalText.length; // this.tHelper.font = this.values.fValue;

        var charData;
        var shapeData;
        var k;
        var kLen;
        var shapes;
        var j;
        var jLen;
        var pathNodes;
        var commands;
        var pathArr;
        var singleShape = this.data.singleShape;
        var trackingOffset = documentData.tr * 0.001 * documentData.finalSize;
        var xPos = 0;
        var yPos = 0;
        var firstLine = true;
        var cnt = 0;

        for (i = 0; i < len; i += 1) {
          charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
          shapeData = charData && charData.data || {};
          matrixHelper.reset();

          if (singleShape && letters[i].n) {
            xPos = -trackingOffset;
            yPos += documentData.yOffset;
            yPos += firstLine ? 1 : 0;
            firstLine = false;
          }

          shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
          jLen = shapes.length;
          matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);

          if (singleShape) {
            this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
          }

          commands = createSizedArray(jLen - 1);
          var commandsCounter = 0;

          for (j = 0; j < jLen; j += 1) {
            if (shapes[j].ty === 'sh') {
              kLen = shapes[j].ks.k.i.length;
              pathNodes = shapes[j].ks.k;
              pathArr = [];

              for (k = 1; k < kLen; k += 1) {
                if (k === 1) {
                  pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
                }

                pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToY(pathNodes.i[k][0], pathNodes.i[k][1], 0), matrixHelper.applyToX(pathNodes.v[k][0], pathNodes.v[k][1], 0), matrixHelper.applyToY(pathNodes.v[k][0], pathNodes.v[k][1], 0));
              }

              pathArr.push(matrixHelper.applyToX(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k - 1][0], pathNodes.o[k - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
              commands[commandsCounter] = pathArr;
              commandsCounter += 1;
            }
          }

          if (singleShape) {
            xPos += letters[i].l;
            xPos += trackingOffset;
          }

          if (this.textSpans[cnt]) {
            this.textSpans[cnt].elem = commands;
          } else {
            this.textSpans[cnt] = {
              elem: commands
            };
          }

          cnt += 1;
        }
      };

      CVTextElement.prototype.renderInnerContent = function () {
        var ctx = this.canvasContext;
        ctx.font = this.values.fValue;
        ctx.lineCap = 'butt';
        ctx.lineJoin = 'miter';
        ctx.miterLimit = 4;

        if (!this.data.singleShape) {
          this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
        }

        var i;
        var len;
        var j;
        var jLen;
        var k;
        var kLen;
        var renderedLetters = this.textAnimator.renderedLetters;
        var letters = this.textProperty.currentData.l;
        len = letters.length;
        var renderedLetter;
        var lastFill = null;
        var lastStroke = null;
        var lastStrokeW = null;
        var commands;
        var pathArr;

        for (i = 0; i < len; i += 1) {
          if (!letters[i].n) {
            renderedLetter = renderedLetters[i];

            if (renderedLetter) {
              this.globalData.renderer.save();
              this.globalData.renderer.ctxTransform(renderedLetter.p);
              this.globalData.renderer.ctxOpacity(renderedLetter.o);
            }

            if (this.fill) {
              if (renderedLetter && renderedLetter.fc) {
                if (lastFill !== renderedLetter.fc) {
                  lastFill = renderedLetter.fc;
                  ctx.fillStyle = renderedLetter.fc;
                }
              } else if (lastFill !== this.values.fill) {
                lastFill = this.values.fill;
                ctx.fillStyle = this.values.fill;
              }

              commands = this.textSpans[i].elem;
              jLen = commands.length;
              this.globalData.canvasContext.beginPath();

              for (j = 0; j < jLen; j += 1) {
                pathArr = commands[j];
                kLen = pathArr.length;
                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);

                for (k = 2; k < kLen; k += 6) {
                  this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
                }
              }

              this.globalData.canvasContext.closePath();
              this.globalData.canvasContext.fill(); /// ctx.fillText(this.textSpans[i].val,0,0);
            }

            if (this.stroke) {
              if (renderedLetter && renderedLetter.sw) {
                if (lastStrokeW !== renderedLetter.sw) {
                  lastStrokeW = renderedLetter.sw;
                  ctx.lineWidth = renderedLetter.sw;
                }
              } else if (lastStrokeW !== this.values.sWidth) {
                lastStrokeW = this.values.sWidth;
                ctx.lineWidth = this.values.sWidth;
              }

              if (renderedLetter && renderedLetter.sc) {
                if (lastStroke !== renderedLetter.sc) {
                  lastStroke = renderedLetter.sc;
                  ctx.strokeStyle = renderedLetter.sc;
                }
              } else if (lastStroke !== this.values.stroke) {
                lastStroke = this.values.stroke;
                ctx.strokeStyle = this.values.stroke;
              }

              commands = this.textSpans[i].elem;
              jLen = commands.length;
              this.globalData.canvasContext.beginPath();

              for (j = 0; j < jLen; j += 1) {
                pathArr = commands[j];
                kLen = pathArr.length;
                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);

                for (k = 2; k < kLen; k += 6) {
                  this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
                }
              }

              this.globalData.canvasContext.closePath();
              this.globalData.canvasContext.stroke(); /// ctx.strokeText(letters[i].val,0,0);
            }

            if (renderedLetter) {
              this.globalData.renderer.restore();
            }
          }
        }
      };

      function CVImageElement(data, globalData, comp) {
        this.assetData = globalData.getAssetData(data.refId);
        this.img = globalData.imageLoader.getAsset(this.assetData);
        this.initElement(data, globalData, comp);
      }

      extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
      CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
      CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

      CVImageElement.prototype.createContent = function () {
        if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
          var canvas = createTag('canvas');
          canvas.width = this.assetData.w;
          canvas.height = this.assetData.h;
          var ctx = canvas.getContext('2d');
          var imgW = this.img.width;
          var imgH = this.img.height;
          var imgRel = imgW / imgH;
          var canvasRel = this.assetData.w / this.assetData.h;
          var widthCrop;
          var heightCrop;
          var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;

          if (imgRel > canvasRel && par === 'xMidYMid slice' || imgRel < canvasRel && par !== 'xMidYMid slice') {
            heightCrop = imgH;
            widthCrop = heightCrop * canvasRel;
          } else {
            widthCrop = imgW;
            heightCrop = widthCrop / canvasRel;
          }

          ctx.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
          this.img = canvas;
        }
      };

      CVImageElement.prototype.renderInnerContent = function () {
        this.canvasContext.drawImage(this.img, 0, 0);
      };

      CVImageElement.prototype.destroy = function () {
        this.img = null;
      };

      function CVSolidElement(data, globalData, comp) {
        this.initElement(data, globalData, comp);
      }

      extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
      CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
      CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

      CVSolidElement.prototype.renderInnerContent = function () {
        var ctx = this.canvasContext;
        ctx.fillStyle = this.data.sc;
        ctx.fillRect(0, 0, this.data.sw, this.data.sh); //
      };

      function CanvasRendererBase(animationItem, config) {
        this.animationItem = animationItem;
        this.renderConfig = {
          clearCanvas: config && config.clearCanvas !== undefined ? config.clearCanvas : true,
          context: config && config.context || null,
          progressiveLoad: config && config.progressiveLoad || false,
          preserveAspectRatio: config && config.preserveAspectRatio || 'xMidYMid meet',
          imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
          contentVisibility: config && config.contentVisibility || 'visible',
          className: config && config.className || '',
          id: config && config.id || ''
        };
        this.renderConfig.dpr = config && config.dpr || 1;

        if (this.animationItem.wrapper) {
          this.renderConfig.dpr = config && config.dpr || window.devicePixelRatio || 1;
        }

        this.renderedFrame = -1;
        this.globalData = {
          frameNum: -1,
          _mdf: false,
          renderConfig: this.renderConfig,
          currentGlobalAlpha: -1
        };
        this.contextData = new CVContextData();
        this.elements = [];
        this.pendingElements = [];
        this.transformMat = new Matrix();
        this.completeLayers = false;
        this.rendererType = 'canvas';
      }

      extendPrototype([BaseRenderer], CanvasRendererBase);

      CanvasRendererBase.prototype.createShape = function (data) {
        return new CVShapeElement(data, this.globalData, this);
      };

      CanvasRendererBase.prototype.createText = function (data) {
        return new CVTextElement(data, this.globalData, this);
      };

      CanvasRendererBase.prototype.createImage = function (data) {
        return new CVImageElement(data, this.globalData, this);
      };

      CanvasRendererBase.prototype.createSolid = function (data) {
        return new CVSolidElement(data, this.globalData, this);
      };

      CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;

      CanvasRendererBase.prototype.ctxTransform = function (props) {
        if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
          return;
        }

        if (!this.renderConfig.clearCanvas) {
          this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
          return;
        }

        this.transformMat.cloneFromProps(props);
        var cProps = this.contextData.cTr.props;
        this.transformMat.transform(cProps[0], cProps[1], cProps[2], cProps[3], cProps[4], cProps[5], cProps[6], cProps[7], cProps[8], cProps[9], cProps[10], cProps[11], cProps[12], cProps[13], cProps[14], cProps[15]); // this.contextData.cTr.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);

        this.contextData.cTr.cloneFromProps(this.transformMat.props);
        var trProps = this.contextData.cTr.props;
        this.canvasContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
      };

      CanvasRendererBase.prototype.ctxOpacity = function (op) {
        /* if(op === 1){
              return;
          } */
        if (!this.renderConfig.clearCanvas) {
          this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
          this.globalData.currentGlobalAlpha = this.contextData.cO;
          return;
        }

        this.contextData.cO *= op < 0 ? 0 : op;

        if (this.globalData.currentGlobalAlpha !== this.contextData.cO) {
          this.canvasContext.globalAlpha = this.contextData.cO;
          this.globalData.currentGlobalAlpha = this.contextData.cO;
        }
      };

      CanvasRendererBase.prototype.reset = function () {
        if (!this.renderConfig.clearCanvas) {
          this.canvasContext.restore();
          return;
        }

        this.contextData.reset();
      };

      CanvasRendererBase.prototype.save = function (actionFlag) {
        if (!this.renderConfig.clearCanvas) {
          this.canvasContext.save();
          return;
        }

        if (actionFlag) {
          this.canvasContext.save();
        }

        var props = this.contextData.cTr.props;

        if (this.contextData._length <= this.contextData.cArrPos) {
          this.contextData.duplicate();
        }

        var i;
        var arr = this.contextData.saved[this.contextData.cArrPos];

        for (i = 0; i < 16; i += 1) {
          arr[i] = props[i];
        }

        this.contextData.savedOp[this.contextData.cArrPos] = this.contextData.cO;
        this.contextData.cArrPos += 1;
      };

      CanvasRendererBase.prototype.restore = function (actionFlag) {
        if (!this.renderConfig.clearCanvas) {
          this.canvasContext.restore();
          return;
        }

        if (actionFlag) {
          this.canvasContext.restore();
          this.globalData.blendMode = 'source-over';
        }

        this.contextData.cArrPos -= 1;
        var popped = this.contextData.saved[this.contextData.cArrPos];
        var i;
        var arr = this.contextData.cTr.props;

        for (i = 0; i < 16; i += 1) {
          arr[i] = popped[i];
        }

        this.canvasContext.setTransform(popped[0], popped[1], popped[4], popped[5], popped[12], popped[13]);
        popped = this.contextData.savedOp[this.contextData.cArrPos];
        this.contextData.cO = popped;

        if (this.globalData.currentGlobalAlpha !== popped) {
          this.canvasContext.globalAlpha = popped;
          this.globalData.currentGlobalAlpha = popped;
        }
      };

      CanvasRendererBase.prototype.configAnimation = function (animData) {
        if (this.animationItem.wrapper) {
          this.animationItem.container = createTag('canvas');
          var containerStyle = this.animationItem.container.style;
          containerStyle.width = '100%';
          containerStyle.height = '100%';
          var origin = '0px 0px 0px';
          containerStyle.transformOrigin = origin;
          containerStyle.mozTransformOrigin = origin;
          containerStyle.webkitTransformOrigin = origin;
          containerStyle['-webkit-transform'] = origin;
          containerStyle.contentVisibility = this.renderConfig.contentVisibility;
          this.animationItem.wrapper.appendChild(this.animationItem.container);
          this.canvasContext = this.animationItem.container.getContext('2d');

          if (this.renderConfig.className) {
            this.animationItem.container.setAttribute('class', this.renderConfig.className);
          }

          if (this.renderConfig.id) {
            this.animationItem.container.setAttribute('id', this.renderConfig.id);
          }
        } else {
          this.canvasContext = this.renderConfig.context;
        }

        this.data = animData;
        this.layers = animData.layers;
        this.transformCanvas = {
          w: animData.w,
          h: animData.h,
          sx: 0,
          sy: 0,
          tx: 0,
          ty: 0
        };
        this.setupGlobalData(animData, document.body);
        this.globalData.canvasContext = this.canvasContext;
        this.globalData.renderer = this;
        this.globalData.isDashed = false;
        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
        this.globalData.transformCanvas = this.transformCanvas;
        this.elements = createSizedArray(animData.layers.length);
        this.updateContainerSize();
      };

      CanvasRendererBase.prototype.updateContainerSize = function () {
        this.reset();
        var elementWidth;
        var elementHeight;

        if (this.animationItem.wrapper && this.animationItem.container) {
          elementWidth = this.animationItem.wrapper.offsetWidth;
          elementHeight = this.animationItem.wrapper.offsetHeight;
          this.animationItem.container.setAttribute('width', elementWidth * this.renderConfig.dpr);
          this.animationItem.container.setAttribute('height', elementHeight * this.renderConfig.dpr);
        } else {
          elementWidth = this.canvasContext.canvas.width * this.renderConfig.dpr;
          elementHeight = this.canvasContext.canvas.height * this.renderConfig.dpr;
        }

        var elementRel;
        var animationRel;

        if (this.renderConfig.preserveAspectRatio.indexOf('meet') !== -1 || this.renderConfig.preserveAspectRatio.indexOf('slice') !== -1) {
          var par = this.renderConfig.preserveAspectRatio.split(' ');
          var fillType = par[1] || 'meet';
          var pos = par[0] || 'xMidYMid';
          var xPos = pos.substr(0, 4);
          var yPos = pos.substr(4);
          elementRel = elementWidth / elementHeight;
          animationRel = this.transformCanvas.w / this.transformCanvas.h;

          if (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice') {
            this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
            this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
          } else {
            this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
            this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
          }

          if (xPos === 'xMid' && (animationRel < elementRel && fillType === 'meet' || animationRel > elementRel && fillType === 'slice')) {
            this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
          } else if (xPos === 'xMax' && (animationRel < elementRel && fillType === 'meet' || animationRel > elementRel && fillType === 'slice')) {
            this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
          } else {
            this.transformCanvas.tx = 0;
          }

          if (yPos === 'YMid' && (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice')) {
            this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;
          } else if (yPos === 'YMax' && (animationRel > elementRel && fillType === 'meet' || animationRel < elementRel && fillType === 'slice')) {
            this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;
          } else {
            this.transformCanvas.ty = 0;
          }
        } else if (this.renderConfig.preserveAspectRatio === 'none') {
          this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
          this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
          this.transformCanvas.tx = 0;
          this.transformCanvas.ty = 0;
        } else {
          this.transformCanvas.sx = this.renderConfig.dpr;
          this.transformCanvas.sy = this.renderConfig.dpr;
          this.transformCanvas.tx = 0;
          this.transformCanvas.ty = 0;
        }

        this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
        /* var i, len = this.elements.length;
          for(i=0;i<len;i+=1){
              if(this.elements[i] && this.elements[i].data.ty === 0){
                  this.elements[i].resize(this.globalData.transformCanvas);
              }
          } */

        this.ctxTransform(this.transformCanvas.props);
        this.canvasContext.beginPath();
        this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
        this.canvasContext.closePath();
        this.canvasContext.clip();
        this.renderFrame(this.renderedFrame, true);
      };

      CanvasRendererBase.prototype.destroy = function () {
        if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {
          this.animationItem.wrapper.innerText = '';
        }

        var i;
        var len = this.layers ? this.layers.length : 0;

        for (i = len - 1; i >= 0; i -= 1) {
          if (this.elements[i]) {
            this.elements[i].destroy();
          }
        }

        this.elements.length = 0;
        this.globalData.canvasContext = null;
        this.animationItem.container = null;
        this.destroyed = true;
      };

      CanvasRendererBase.prototype.renderFrame = function (num, forceRender) {
        if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {
          return;
        }

        this.renderedFrame = num;
        this.globalData.frameNum = num - this.animationItem._isFirstFrame;
        this.globalData.frameId += 1;
        this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
        this.globalData.projectInterface.currentFrame = num; // console.log('--------');
        // console.log('NEW: ',num);

        var i;
        var len = this.layers.length;

        if (!this.completeLayers) {
          this.checkLayers(num);
        }

        for (i = 0; i < len; i += 1) {
          if (this.completeLayers || this.elements[i]) {
            this.elements[i].prepareFrame(num - this.layers[i].st);
          }
        }

        if (this.globalData._mdf) {
          if (this.renderConfig.clearCanvas === true) {
            this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
          } else {
            this.save();
          }

          for (i = len - 1; i >= 0; i -= 1) {
            if (this.completeLayers || this.elements[i]) {
              this.elements[i].renderFrame();
            }
          }

          if (this.renderConfig.clearCanvas !== true) {
            this.restore();
          }
        }
      };

      CanvasRendererBase.prototype.buildItem = function (pos) {
        var elements = this.elements;

        if (elements[pos] || this.layers[pos].ty === 99) {
          return;
        }

        var element = this.createItem(this.layers[pos], this, this.globalData);
        elements[pos] = element;
        element.initExpressions();
        /* if(this.layers[pos].ty === 0){
              element.resize(this.globalData.transformCanvas);
          } */
      };

      CanvasRendererBase.prototype.checkPendingElements = function () {
        while (this.pendingElements.length) {
          var element = this.pendingElements.pop();
          element.checkParenting();
        }
      };

      CanvasRendererBase.prototype.hide = function () {
        this.animationItem.container.style.display = 'none';
      };

      CanvasRendererBase.prototype.show = function () {
        this.animationItem.container.style.display = 'block';
      };

      function CVCompElement(data, globalData, comp) {
        this.completeLayers = false;
        this.layers = data.layers;
        this.pendingElements = [];
        this.elements = createSizedArray(this.layers.length);
        this.initElement(data, globalData, comp);
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
          _placeholder: true
        };
      }

      extendPrototype([CanvasRendererBase, ICompElement, CVBaseElement], CVCompElement);

      CVCompElement.prototype.renderInnerContent = function () {
        var ctx = this.canvasContext;
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(this.data.w, 0);
        ctx.lineTo(this.data.w, this.data.h);
        ctx.lineTo(0, this.data.h);
        ctx.lineTo(0, 0);
        ctx.clip();
        var i;
        var len = this.layers.length;

        for (i = len - 1; i >= 0; i -= 1) {
          if (this.completeLayers || this.elements[i]) {
            this.elements[i].renderFrame();
          }
        }
      };

      CVCompElement.prototype.destroy = function () {
        var i;
        var len = this.layers.length;

        for (i = len - 1; i >= 0; i -= 1) {
          if (this.elements[i]) {
            this.elements[i].destroy();
          }
        }

        this.layers = null;
        this.elements = null;
      };

      CVCompElement.prototype.createComp = function (data) {
        return new CVCompElement(data, this.globalData, this);
      };

      function CanvasRenderer(animationItem, config) {
        this.animationItem = animationItem;
        this.renderConfig = {
          clearCanvas: config && config.clearCanvas !== undefined ? config.clearCanvas : true,
          context: config && config.context || null,
          progressiveLoad: config && config.progressiveLoad || false,
          preserveAspectRatio: config && config.preserveAspectRatio || 'xMidYMid meet',
          imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
          contentVisibility: config && config.contentVisibility || 'visible',
          className: config && config.className || '',
          id: config && config.id || ''
        };
        this.renderConfig.dpr = config && config.dpr || 1;

        if (this.animationItem.wrapper) {
          this.renderConfig.dpr = config && config.dpr || window.devicePixelRatio || 1;
        }

        this.renderedFrame = -1;
        this.globalData = {
          frameNum: -1,
          _mdf: false,
          renderConfig: this.renderConfig,
          currentGlobalAlpha: -1
        };
        this.contextData = new CVContextData();
        this.elements = [];
        this.pendingElements = [];
        this.transformMat = new Matrix();
        this.completeLayers = false;
        this.rendererType = 'canvas';
      }

      extendPrototype([CanvasRendererBase], CanvasRenderer);

      CanvasRenderer.prototype.createComp = function (data) {
        return new CVCompElement(data, this.globalData, this);
      };

      function HBaseElement() {}

      HBaseElement.prototype = {
        checkBlendMode: function checkBlendMode() {},
        initRendererElement: function initRendererElement() {
          this.baseElement = createTag(this.data.tg || 'div');

          if (this.data.hasMask) {
            this.svgElement = createNS('svg');
            this.layerElement = createNS('g');
            this.maskedElement = this.layerElement;
            this.svgElement.appendChild(this.layerElement);
            this.baseElement.appendChild(this.svgElement);
          } else {
            this.layerElement = this.baseElement;
          }

          styleDiv(this.baseElement);
        },
        createContainerElements: function createContainerElements() {
          this.renderableEffectsManager = new CVEffects(this);
          this.transformedElement = this.baseElement;
          this.maskedElement = this.layerElement;

          if (this.data.ln) {
            this.layerElement.setAttribute('id', this.data.ln);
          }

          if (this.data.cl) {
            this.layerElement.setAttribute('class', this.data.cl);
          }

          if (this.data.bm !== 0) {
            this.setBlendMode();
          }
        },
        renderElement: function renderElement() {
          var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};

          if (this.finalTransform._matMdf) {
            var matrixValue = this.finalTransform.mat.toCSS();
            transformedElementStyle.transform = matrixValue;
            transformedElementStyle.webkitTransform = matrixValue;
          }

          if (this.finalTransform._opMdf) {
            transformedElementStyle.opacity = this.finalTransform.mProp.o.v;
          }
        },
        renderFrame: function renderFrame() {
          // If it is exported as hidden (data.hd === true) no need to render
          // If it is not visible no need to render
          if (this.data.hd || this.hidden) {
            return;
          }

          this.renderTransform();
          this.renderRenderable();
          this.renderElement();
          this.renderInnerContent();

          if (this._isFirstFrame) {
            this._isFirstFrame = false;
          }
        },
        destroy: function destroy() {
          this.layerElement = null;
          this.transformedElement = null;

          if (this.matteElement) {
            this.matteElement = null;
          }

          if (this.maskManager) {
            this.maskManager.destroy();
            this.maskManager = null;
          }
        },
        createRenderableComponents: function createRenderableComponents() {
          this.maskManager = new MaskElement(this.data, this, this.globalData);
        },
        addEffects: function addEffects() {},
        setMatte: function setMatte() {}
      };
      HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
      HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
      HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;

      function HSolidElement(data, globalData, comp) {
        this.initElement(data, globalData, comp);
      }

      extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);

      HSolidElement.prototype.createContent = function () {
        var rect;

        if (this.data.hasMask) {
          rect = createNS('rect');
          rect.setAttribute('width', this.data.sw);
          rect.setAttribute('height', this.data.sh);
          rect.setAttribute('fill', this.data.sc);
          this.svgElement.setAttribute('width', this.data.sw);
          this.svgElement.setAttribute('height', this.data.sh);
        } else {
          rect = createTag('div');
          rect.style.width = this.data.sw + 'px';
          rect.style.height = this.data.sh + 'px';
          rect.style.backgroundColor = this.data.sc;
        }

        this.layerElement.appendChild(rect);
      };

      function HShapeElement(data, globalData, comp) {
        // List of drawable elements
        this.shapes = []; // Full shape data

        this.shapesData = data.shapes; // List of styles that will be applied to shapes

        this.stylesList = []; // List of modifiers that will be applied to shapes

        this.shapeModifiers = []; // List of items in shape tree

        this.itemsData = []; // List of items in previous shape tree

        this.processedElements = []; // List of animated components

        this.animatedContents = [];
        this.shapesContainer = createNS('g');
        this.initElement(data, globalData, comp); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
        // List of elements that have been created

        this.prevViewData = [];
        this.currentBBox = {
          x: 999999,
          y: -999999,
          h: 0,
          w: 0
        };
      }

      extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
      HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;

      HShapeElement.prototype.createContent = function () {
        var cont;
        this.baseElement.style.fontSize = 0;

        if (this.data.hasMask) {
          this.layerElement.appendChild(this.shapesContainer);
          cont = this.svgElement;
        } else {
          cont = createNS('svg');
          var size = this.comp.data ? this.comp.data : this.globalData.compSize;
          cont.setAttribute('width', size.w);
          cont.setAttribute('height', size.h);
          cont.appendChild(this.shapesContainer);
          this.layerElement.appendChild(cont);
        }

        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
        this.filterUniqueShapes();
        this.shapeCont = cont;
      };

      HShapeElement.prototype.getTransformedPoint = function (transformers, point) {
        var i;
        var len = transformers.length;

        for (i = 0; i < len; i += 1) {
          point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);
        }

        return point;
      };

      HShapeElement.prototype.calculateShapeBoundingBox = function (item, boundingBox) {
        var shape = item.sh.v;
        var transformers = item.transformers;
        var i;
        var len = shape._length;
        var vPoint;
        var oPoint;
        var nextIPoint;
        var nextVPoint;

        if (len <= 1) {
          return;
        }

        for (i = 0; i < len - 1; i += 1) {
          vPoint = this.getTransformedPoint(transformers, shape.v[i]);
          oPoint = this.getTransformedPoint(transformers, shape.o[i]);
          nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
          nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
          this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
        }

        if (shape.c) {
          vPoint = this.getTransformedPoint(transformers, shape.v[i]);
          oPoint = this.getTransformedPoint(transformers, shape.o[i]);
          nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
          nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
          this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
        }
      };

      HShapeElement.prototype.checkBounds = function (vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
        this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
        var bounds = this.shapeBoundingBox;
        boundingBox.x = bmMin(bounds.left, boundingBox.x);
        boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
        boundingBox.y = bmMin(bounds.top, boundingBox.y);
        boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
      };

      HShapeElement.prototype.shapeBoundingBox = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };
      HShapeElement.prototype.tempBoundingBox = {
        x: 0,
        xMax: 0,
        y: 0,
        yMax: 0,
        width: 0,
        height: 0
      };

      HShapeElement.prototype.getBoundsOfCurve = function (p0, p1, p2, p3) {
        var bounds = [[p0[0], p3[0]], [p0[1], p3[1]]];

        for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {
          // eslint-disable-line no-plusplus
          b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
          a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
          c = 3 * p1[i] - 3 * p0[i];
          b |= 0; // eslint-disable-line no-bitwise

          a |= 0; // eslint-disable-line no-bitwise

          c |= 0; // eslint-disable-line no-bitwise

          if (a === 0 && b === 0) ; else if (a === 0) {
            t = -c / b;

            if (t > 0 && t < 1) {
              bounds[i].push(this.calculateF(t, p0, p1, p2, p3, i));
            }
          } else {
            b2ac = b * b - 4 * c * a;

            if (b2ac >= 0) {
              t1 = (-b + bmSqrt(b2ac)) / (2 * a);
              if (t1 > 0 && t1 < 1) bounds[i].push(this.calculateF(t1, p0, p1, p2, p3, i));
              t2 = (-b - bmSqrt(b2ac)) / (2 * a);
              if (t2 > 0 && t2 < 1) bounds[i].push(this.calculateF(t2, p0, p1, p2, p3, i));
            }
          }
        }

        this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
        this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
        this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
        this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
      };

      HShapeElement.prototype.calculateF = function (t, p0, p1, p2, p3, i) {
        return bmPow(1 - t, 3) * p0[i] + 3 * bmPow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * bmPow(t, 2) * p2[i] + bmPow(t, 3) * p3[i];
      };

      HShapeElement.prototype.calculateBoundingBox = function (itemsData, boundingBox) {
        var i;
        var len = itemsData.length;

        for (i = 0; i < len; i += 1) {
          if (itemsData[i] && itemsData[i].sh) {
            this.calculateShapeBoundingBox(itemsData[i], boundingBox);
          } else if (itemsData[i] && itemsData[i].it) {
            this.calculateBoundingBox(itemsData[i].it, boundingBox);
          }
        }
      };

      HShapeElement.prototype.currentBoxContains = function (box) {
        return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
      };

      HShapeElement.prototype.renderInnerContent = function () {
        this._renderShapeFrame();

        if (!this.hidden && (this._isFirstFrame || this._mdf)) {
          var tempBoundingBox = this.tempBoundingBox;
          var max = 999999;
          tempBoundingBox.x = max;
          tempBoundingBox.xMax = -max;
          tempBoundingBox.y = max;
          tempBoundingBox.yMax = -max;
          this.calculateBoundingBox(this.itemsData, tempBoundingBox);
          tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
          tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y; // var tempBoundingBox = this.shapeCont.getBBox();

          if (this.currentBoxContains(tempBoundingBox)) {
            return;
          }

          var changed = false;

          if (this.currentBBox.w !== tempBoundingBox.width) {
            this.currentBBox.w = tempBoundingBox.width;
            this.shapeCont.setAttribute('width', tempBoundingBox.width);
            changed = true;
          }

          if (this.currentBBox.h !== tempBoundingBox.height) {
            this.currentBBox.h = tempBoundingBox.height;
            this.shapeCont.setAttribute('height', tempBoundingBox.height);
            changed = true;
          }

          if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
            this.currentBBox.w = tempBoundingBox.width;
            this.currentBBox.h = tempBoundingBox.height;
            this.currentBBox.x = tempBoundingBox.x;
            this.currentBBox.y = tempBoundingBox.y;
            this.shapeCont.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
            var shapeStyle = this.shapeCont.style;
            var shapeTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
            shapeStyle.transform = shapeTransform;
            shapeStyle.webkitTransform = shapeTransform;
          }
        }
      };

      function HTextElement(data, globalData, comp) {
        this.textSpans = [];
        this.textPaths = [];
        this.currentBBox = {
          x: 999999,
          y: -999999,
          h: 0,
          w: 0
        };
        this.renderType = 'svg';
        this.isMasked = false;
        this.initElement(data, globalData, comp);
      }

      extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);

      HTextElement.prototype.createContent = function () {
        this.isMasked = this.checkMasks();

        if (this.isMasked) {
          this.renderType = 'svg';
          this.compW = this.comp.data.w;
          this.compH = this.comp.data.h;
          this.svgElement.setAttribute('width', this.compW);
          this.svgElement.setAttribute('height', this.compH);
          var g = createNS('g');
          this.maskedElement.appendChild(g);
          this.innerElem = g;
        } else {
          this.renderType = 'html';
          this.innerElem = this.layerElement;
        }

        this.checkParenting();
      };

      HTextElement.prototype.buildNewText = function () {
        var documentData = this.textProperty.currentData;
        this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
        var innerElemStyle = this.innerElem.style;
        var textColor = documentData.fc ? this.buildColor(documentData.fc) : 'rgba(0,0,0,0)';
        innerElemStyle.fill = textColor;
        innerElemStyle.color = textColor;

        if (documentData.sc) {
          innerElemStyle.stroke = this.buildColor(documentData.sc);
          innerElemStyle.strokeWidth = documentData.sw + 'px';
        }

        var fontData = this.globalData.fontManager.getFontByName(documentData.f);

        if (!this.globalData.fontManager.chars) {
          innerElemStyle.fontSize = documentData.finalSize + 'px';
          innerElemStyle.lineHeight = documentData.finalSize + 'px';

          if (fontData.fClass) {
            this.innerElem.className = fontData.fClass;
          } else {
            innerElemStyle.fontFamily = fontData.fFamily;
            var fWeight = documentData.fWeight;
            var fStyle = documentData.fStyle;
            innerElemStyle.fontStyle = fStyle;
            innerElemStyle.fontWeight = fWeight;
          }
        }

        var i;
        var len;
        var letters = documentData.l;
        len = letters.length;
        var tSpan;
        var tParent;
        var tCont;
        var matrixHelper = this.mHelper;
        var shapes;
        var shapeStr = '';
        var cnt = 0;

        for (i = 0; i < len; i += 1) {
          if (this.globalData.fontManager.chars) {
            if (!this.textPaths[cnt]) {
              tSpan = createNS('path');
              tSpan.setAttribute('stroke-linecap', lineCapEnum[1]);
              tSpan.setAttribute('stroke-linejoin', lineJoinEnum[2]);
              tSpan.setAttribute('stroke-miterlimit', '4');
            } else {
              tSpan = this.textPaths[cnt];
            }

            if (!this.isMasked) {
              if (this.textSpans[cnt]) {
                tParent = this.textSpans[cnt];
                tCont = tParent.children[0];
              } else {
                tParent = createTag('div');
                tParent.style.lineHeight = 0;
                tCont = createNS('svg');
                tCont.appendChild(tSpan);
                styleDiv(tParent);
              }
            }
          } else if (!this.isMasked) {
            if (this.textSpans[cnt]) {
              tParent = this.textSpans[cnt];
              tSpan = this.textPaths[cnt];
            } else {
              tParent = createTag('span');
              styleDiv(tParent);
              tSpan = createTag('span');
              styleDiv(tSpan);
              tParent.appendChild(tSpan);
            }
          } else {
            tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS('text');
          } // tSpan.setAttribute('visibility', 'hidden');


          if (this.globalData.fontManager.chars) {
            var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
            var shapeData;

            if (charData) {
              shapeData = charData.data;
            } else {
              shapeData = null;
            }

            matrixHelper.reset();

            if (shapeData && shapeData.shapes && shapeData.shapes.length) {
              shapes = shapeData.shapes[0].it;
              matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
              shapeStr = this.createPathShape(matrixHelper, shapes);
              tSpan.setAttribute('d', shapeStr);
            }

            if (!this.isMasked) {
              this.innerElem.appendChild(tParent);

              if (shapeData && shapeData.shapes) {
                // document.body.appendChild is needed to get exact measure of shape
                document.body.appendChild(tCont);
                var boundingBox = tCont.getBBox();
                tCont.setAttribute('width', boundingBox.width + 2);
                tCont.setAttribute('height', boundingBox.height + 2);
                tCont.setAttribute('viewBox', boundingBox.x - 1 + ' ' + (boundingBox.y - 1) + ' ' + (boundingBox.width + 2) + ' ' + (boundingBox.height + 2));
                var tContStyle = tCont.style;
                var tContTranslation = 'translate(' + (boundingBox.x - 1) + 'px,' + (boundingBox.y - 1) + 'px)';
                tContStyle.transform = tContTranslation;
                tContStyle.webkitTransform = tContTranslation;
                letters[i].yOffset = boundingBox.y - 1;
              } else {
                tCont.setAttribute('width', 1);
                tCont.setAttribute('height', 1);
              }

              tParent.appendChild(tCont);
            } else {
              this.innerElem.appendChild(tSpan);
            }
          } else {
            tSpan.textContent = letters[i].val;
            tSpan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');

            if (!this.isMasked) {
              this.innerElem.appendChild(tParent); //

              var tStyle = tSpan.style;
              var tSpanTranslation = 'translate3d(0,' + -documentData.finalSize / 1.2 + 'px,0)';
              tStyle.transform = tSpanTranslation;
              tStyle.webkitTransform = tSpanTranslation;
            } else {
              this.innerElem.appendChild(tSpan);
            }
          } //


          if (!this.isMasked) {
            this.textSpans[cnt] = tParent;
          } else {
            this.textSpans[cnt] = tSpan;
          }

          this.textSpans[cnt].style.display = 'block';
          this.textPaths[cnt] = tSpan;
          cnt += 1;
        }

        while (cnt < this.textSpans.length) {
          this.textSpans[cnt].style.display = 'none';
          cnt += 1;
        }
      };

      HTextElement.prototype.renderInnerContent = function () {
        var svgStyle;

        if (this.data.singleShape) {
          if (!this._isFirstFrame && !this.lettersChangedFlag) {
            return;
          }

          if (this.isMasked && this.finalTransform._matMdf) {
            // Todo Benchmark if using this is better than getBBox
            this.svgElement.setAttribute('viewBox', -this.finalTransform.mProp.p.v[0] + ' ' + -this.finalTransform.mProp.p.v[1] + ' ' + this.compW + ' ' + this.compH);
            svgStyle = this.svgElement.style;
            var translation = 'translate(' + -this.finalTransform.mProp.p.v[0] + 'px,' + -this.finalTransform.mProp.p.v[1] + 'px)';
            svgStyle.transform = translation;
            svgStyle.webkitTransform = translation;
          }
        }

        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);

        if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
          return;
        }

        var i;
        var len;
        var count = 0;
        var renderedLetters = this.textAnimator.renderedLetters;
        var letters = this.textProperty.currentData.l;
        len = letters.length;
        var renderedLetter;
        var textSpan;
        var textPath;

        for (i = 0; i < len; i += 1) {
          if (letters[i].n) {
            count += 1;
          } else {
            textSpan = this.textSpans[i];
            textPath = this.textPaths[i];
            renderedLetter = renderedLetters[count];
            count += 1;

            if (renderedLetter._mdf.m) {
              if (!this.isMasked) {
                textSpan.style.webkitTransform = renderedLetter.m;
                textSpan.style.transform = renderedLetter.m;
              } else {
                textSpan.setAttribute('transform', renderedLetter.m);
              }
            } /// /textSpan.setAttribute('opacity',renderedLetter.o);


            textSpan.style.opacity = renderedLetter.o;

            if (renderedLetter.sw && renderedLetter._mdf.sw) {
              textPath.setAttribute('stroke-width', renderedLetter.sw);
            }

            if (renderedLetter.sc && renderedLetter._mdf.sc) {
              textPath.setAttribute('stroke', renderedLetter.sc);
            }

            if (renderedLetter.fc && renderedLetter._mdf.fc) {
              textPath.setAttribute('fill', renderedLetter.fc);
              textPath.style.color = renderedLetter.fc;
            }
          }
        }

        if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
          var boundingBox = this.innerElem.getBBox();

          if (this.currentBBox.w !== boundingBox.width) {
            this.currentBBox.w = boundingBox.width;
            this.svgElement.setAttribute('width', boundingBox.width);
          }

          if (this.currentBBox.h !== boundingBox.height) {
            this.currentBBox.h = boundingBox.height;
            this.svgElement.setAttribute('height', boundingBox.height);
          }

          var margin = 1;

          if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {
            this.currentBBox.w = boundingBox.width + margin * 2;
            this.currentBBox.h = boundingBox.height + margin * 2;
            this.currentBBox.x = boundingBox.x - margin;
            this.currentBBox.y = boundingBox.y - margin;
            this.svgElement.setAttribute('viewBox', this.currentBBox.x + ' ' + this.currentBBox.y + ' ' + this.currentBBox.w + ' ' + this.currentBBox.h);
            svgStyle = this.svgElement.style;
            var svgTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
            svgStyle.transform = svgTransform;
            svgStyle.webkitTransform = svgTransform;
          }
        }
      };

      function HCameraElement(data, globalData, comp) {
        this.initFrame();
        this.initBaseData(data, globalData, comp);
        this.initHierarchy();
        var getProp = PropertyFactory.getProp;
        this.pe = getProp(this, data.pe, 0, 0, this);

        if (data.ks.p.s) {
          this.px = getProp(this, data.ks.p.x, 1, 0, this);
          this.py = getProp(this, data.ks.p.y, 1, 0, this);
          this.pz = getProp(this, data.ks.p.z, 1, 0, this);
        } else {
          this.p = getProp(this, data.ks.p, 1, 0, this);
        }

        if (data.ks.a) {
          this.a = getProp(this, data.ks.a, 1, 0, this);
        }

        if (data.ks.or.k.length && data.ks.or.k[0].to) {
          var i;
          var len = data.ks.or.k.length;

          for (i = 0; i < len; i += 1) {
            data.ks.or.k[i].to = null;
            data.ks.or.k[i].ti = null;
          }
        }

        this.or = getProp(this, data.ks.or, 1, degToRads, this);
        this.or.sh = true;
        this.rx = getProp(this, data.ks.rx, 0, degToRads, this);
        this.ry = getProp(this, data.ks.ry, 0, degToRads, this);
        this.rz = getProp(this, data.ks.rz, 0, degToRads, this);
        this.mat = new Matrix();
        this._prevMat = new Matrix();
        this._isFirstFrame = true; // TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.

        this.finalTransform = {
          mProp: this
        };
      }

      extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);

      HCameraElement.prototype.setup = function () {
        var i;
        var len = this.comp.threeDElements.length;
        var comp;
        var perspectiveStyle;
        var containerStyle;

        for (i = 0; i < len; i += 1) {
          // [perspectiveElem,container]
          comp = this.comp.threeDElements[i];

          if (comp.type === '3d') {
            perspectiveStyle = comp.perspectiveElem.style;
            containerStyle = comp.container.style;
            var perspective = this.pe.v + 'px';
            var origin = '0px 0px 0px';
            var matrix = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
            perspectiveStyle.perspective = perspective;
            perspectiveStyle.webkitPerspective = perspective;
            containerStyle.transformOrigin = origin;
            containerStyle.mozTransformOrigin = origin;
            containerStyle.webkitTransformOrigin = origin;
            perspectiveStyle.transform = matrix;
            perspectiveStyle.webkitTransform = matrix;
          }
        }
      };

      HCameraElement.prototype.createElements = function () {};

      HCameraElement.prototype.hide = function () {};

      HCameraElement.prototype.renderFrame = function () {
        var _mdf = this._isFirstFrame;
        var i;
        var len;

        if (this.hierarchy) {
          len = this.hierarchy.length;

          for (i = 0; i < len; i += 1) {
            _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;
          }
        }

        if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
          this.mat.reset();

          if (this.hierarchy) {
            len = this.hierarchy.length - 1;

            for (i = len; i >= 0; i -= 1) {
              var mTransf = this.hierarchy[i].finalTransform.mProp;
              this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
              this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
              this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
              this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
              this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
            }
          }

          if (this.p) {
            this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
          } else {
            this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
          }

          if (this.a) {
            var diffVector;

            if (this.p) {
              diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
            } else {
              diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
            }

            var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2)); // var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));

            var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
            var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
            var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
            var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
            this.mat.rotateY(mRotationY).rotateX(-mRotationX);
          }

          this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
          this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
          this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
          this.mat.translate(0, 0, this.pe.v);
          var hasMatrixChanged = !this._prevMat.equals(this.mat);

          if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
            len = this.comp.threeDElements.length;
            var comp;
            var perspectiveStyle;
            var containerStyle;

            for (i = 0; i < len; i += 1) {
              comp = this.comp.threeDElements[i];

              if (comp.type === '3d') {
                if (hasMatrixChanged) {
                  var matValue = this.mat.toCSS();
                  containerStyle = comp.container.style;
                  containerStyle.transform = matValue;
                  containerStyle.webkitTransform = matValue;
                }

                if (this.pe._mdf) {
                  perspectiveStyle = comp.perspectiveElem.style;
                  perspectiveStyle.perspective = this.pe.v + 'px';
                  perspectiveStyle.webkitPerspective = this.pe.v + 'px';
                }
              }
            }

            this.mat.clone(this._prevMat);
          }
        }

        this._isFirstFrame = false;
      };

      HCameraElement.prototype.prepareFrame = function (num) {
        this.prepareProperties(num, true);
      };

      HCameraElement.prototype.destroy = function () {};

      HCameraElement.prototype.getBaseElement = function () {
        return null;
      };

      function HImageElement(data, globalData, comp) {
        this.assetData = globalData.getAssetData(data.refId);
        this.initElement(data, globalData, comp);
      }

      extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);

      HImageElement.prototype.createContent = function () {
        var assetPath = this.globalData.getAssetsPath(this.assetData);
        var img = new Image();

        if (this.data.hasMask) {
          this.imageElem = createNS('image');
          this.imageElem.setAttribute('width', this.assetData.w + 'px');
          this.imageElem.setAttribute('height', this.assetData.h + 'px');
          this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink', 'href', assetPath);
          this.layerElement.appendChild(this.imageElem);
          this.baseElement.setAttribute('width', this.assetData.w);
          this.baseElement.setAttribute('height', this.assetData.h);
        } else {
          this.layerElement.appendChild(img);
        }

        img.crossOrigin = 'anonymous';
        img.src = assetPath;

        if (this.data.ln) {
          this.baseElement.setAttribute('id', this.data.ln);
        }
      };

      function HybridRendererBase(animationItem, config) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.renderConfig = {
          className: config && config.className || '',
          imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
          hideOnTransparent: !(config && config.hideOnTransparent === false),
          filterSize: {
            width: config && config.filterSize && config.filterSize.width || '400%',
            height: config && config.filterSize && config.filterSize.height || '400%',
            x: config && config.filterSize && config.filterSize.x || '-100%',
            y: config && config.filterSize && config.filterSize.y || '-100%'
          }
        };
        this.globalData = {
          _mdf: false,
          frameNum: -1,
          renderConfig: this.renderConfig
        };
        this.pendingElements = [];
        this.elements = [];
        this.threeDElements = [];
        this.destroyed = false;
        this.camera = null;
        this.supports3d = true;
        this.rendererType = 'html';
      }

      extendPrototype([BaseRenderer], HybridRendererBase);
      HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;

      HybridRendererBase.prototype.checkPendingElements = function () {
        while (this.pendingElements.length) {
          var element = this.pendingElements.pop();
          element.checkParenting();
        }
      };

      HybridRendererBase.prototype.appendElementInPos = function (element, pos) {
        var newDOMElement = element.getBaseElement();

        if (!newDOMElement) {
          return;
        }

        var layer = this.layers[pos];

        if (!layer.ddd || !this.supports3d) {
          if (this.threeDElements) {
            this.addTo3dContainer(newDOMElement, pos);
          } else {
            var i = 0;
            var nextDOMElement;
            var nextLayer;
            var tmpDOMElement;

            while (i < pos) {
              if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement) {
                nextLayer = this.elements[i];
                tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();
                nextDOMElement = tmpDOMElement || nextDOMElement;
              }

              i += 1;
            }

            if (nextDOMElement) {
              if (!layer.ddd || !this.supports3d) {
                this.layerElement.insertBefore(newDOMElement, nextDOMElement);
              }
            } else if (!layer.ddd || !this.supports3d) {
              this.layerElement.appendChild(newDOMElement);
            }
          }
        } else {
          this.addTo3dContainer(newDOMElement, pos);
        }
      };

      HybridRendererBase.prototype.createShape = function (data) {
        if (!this.supports3d) {
          return new SVGShapeElement(data, this.globalData, this);
        }

        return new HShapeElement(data, this.globalData, this);
      };

      HybridRendererBase.prototype.createText = function (data) {
        if (!this.supports3d) {
          return new SVGTextLottieElement(data, this.globalData, this);
        }

        return new HTextElement(data, this.globalData, this);
      };

      HybridRendererBase.prototype.createCamera = function (data) {
        this.camera = new HCameraElement(data, this.globalData, this);
        return this.camera;
      };

      HybridRendererBase.prototype.createImage = function (data) {
        if (!this.supports3d) {
          return new IImageElement(data, this.globalData, this);
        }

        return new HImageElement(data, this.globalData, this);
      };

      HybridRendererBase.prototype.createSolid = function (data) {
        if (!this.supports3d) {
          return new ISolidElement(data, this.globalData, this);
        }

        return new HSolidElement(data, this.globalData, this);
      };

      HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;

      HybridRendererBase.prototype.getThreeDContainerByPos = function (pos) {
        var i = 0;
        var len = this.threeDElements.length;

        while (i < len) {
          if (this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {
            return this.threeDElements[i].perspectiveElem;
          }

          i += 1;
        }

        return null;
      };

      HybridRendererBase.prototype.createThreeDContainer = function (pos, type) {
        var perspectiveElem = createTag('div');
        var style;
        var containerStyle;
        styleDiv(perspectiveElem);
        var container = createTag('div');
        styleDiv(container);

        if (type === '3d') {
          style = perspectiveElem.style;
          style.width = this.globalData.compSize.w + 'px';
          style.height = this.globalData.compSize.h + 'px';
          var center = '50% 50%';
          style.webkitTransformOrigin = center;
          style.mozTransformOrigin = center;
          style.transformOrigin = center;
          containerStyle = container.style;
          var matrix = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
          containerStyle.transform = matrix;
          containerStyle.webkitTransform = matrix;
        }

        perspectiveElem.appendChild(container); // this.resizerElem.appendChild(perspectiveElem);

        var threeDContainerData = {
          container: container,
          perspectiveElem: perspectiveElem,
          startPos: pos,
          endPos: pos,
          type: type
        };
        this.threeDElements.push(threeDContainerData);
        return threeDContainerData;
      };

      HybridRendererBase.prototype.build3dContainers = function () {
        var i;
        var len = this.layers.length;
        var lastThreeDContainerData;
        var currentContainer = '';

        for (i = 0; i < len; i += 1) {
          if (this.layers[i].ddd && this.layers[i].ty !== 3) {
            if (currentContainer !== '3d') {
              currentContainer = '3d';
              lastThreeDContainerData = this.createThreeDContainer(i, '3d');
            }

            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
          } else {
            if (currentContainer !== '2d') {
              currentContainer = '2d';
              lastThreeDContainerData = this.createThreeDContainer(i, '2d');
            }

            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i);
          }
        }

        len = this.threeDElements.length;

        for (i = len - 1; i >= 0; i -= 1) {
          this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);
        }
      };

      HybridRendererBase.prototype.addTo3dContainer = function (elem, pos) {
        var i = 0;
        var len = this.threeDElements.length;

        while (i < len) {
          if (pos <= this.threeDElements[i].endPos) {
            var j = this.threeDElements[i].startPos;
            var nextElement;

            while (j < pos) {
              if (this.elements[j] && this.elements[j].getBaseElement) {
                nextElement = this.elements[j].getBaseElement();
              }

              j += 1;
            }

            if (nextElement) {
              this.threeDElements[i].container.insertBefore(elem, nextElement);
            } else {
              this.threeDElements[i].container.appendChild(elem);
            }

            break;
          }

          i += 1;
        }
      };

      HybridRendererBase.prototype.configAnimation = function (animData) {
        var resizerElem = createTag('div');
        var wrapper = this.animationItem.wrapper;
        var style = resizerElem.style;
        style.width = animData.w + 'px';
        style.height = animData.h + 'px';
        this.resizerElem = resizerElem;
        styleDiv(resizerElem);
        style.transformStyle = 'flat';
        style.mozTransformStyle = 'flat';
        style.webkitTransformStyle = 'flat';

        if (this.renderConfig.className) {
          resizerElem.setAttribute('class', this.renderConfig.className);
        }

        wrapper.appendChild(resizerElem);
        style.overflow = 'hidden';
        var svg = createNS('svg');
        svg.setAttribute('width', '1');
        svg.setAttribute('height', '1');
        styleDiv(svg);
        this.resizerElem.appendChild(svg);
        var defs = createNS('defs');
        svg.appendChild(defs);
        this.data = animData; // Mask animation

        this.setupGlobalData(animData, svg);
        this.globalData.defs = defs;
        this.layers = animData.layers;
        this.layerElement = this.resizerElem;
        this.build3dContainers();
        this.updateContainerSize();
      };

      HybridRendererBase.prototype.destroy = function () {
        if (this.animationItem.wrapper) {
          this.animationItem.wrapper.innerText = '';
        }

        this.animationItem.container = null;
        this.globalData.defs = null;
        var i;
        var len = this.layers ? this.layers.length : 0;

        for (i = 0; i < len; i += 1) {
          this.elements[i].destroy();
        }

        this.elements.length = 0;
        this.destroyed = true;
        this.animationItem = null;
      };

      HybridRendererBase.prototype.updateContainerSize = function () {
        var elementWidth = this.animationItem.wrapper.offsetWidth;
        var elementHeight = this.animationItem.wrapper.offsetHeight;
        var elementRel = elementWidth / elementHeight;
        var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
        var sx;
        var sy;
        var tx;
        var ty;

        if (animationRel > elementRel) {
          sx = elementWidth / this.globalData.compSize.w;
          sy = elementWidth / this.globalData.compSize.w;
          tx = 0;
          ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
        } else {
          sx = elementHeight / this.globalData.compSize.h;
          sy = elementHeight / this.globalData.compSize.h;
          tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
          ty = 0;
        }

        var style = this.resizerElem.style;
        style.webkitTransform = 'matrix3d(' + sx + ',0,0,0,0,' + sy + ',0,0,0,0,1,0,' + tx + ',' + ty + ',0,1)';
        style.transform = style.webkitTransform;
      };

      HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;

      HybridRendererBase.prototype.hide = function () {
        this.resizerElem.style.display = 'none';
      };

      HybridRendererBase.prototype.show = function () {
        this.resizerElem.style.display = 'block';
      };

      HybridRendererBase.prototype.initItems = function () {
        this.buildAllItems();

        if (this.camera) {
          this.camera.setup();
        } else {
          var cWidth = this.globalData.compSize.w;
          var cHeight = this.globalData.compSize.h;
          var i;
          var len = this.threeDElements.length;

          for (i = 0; i < len; i += 1) {
            var style = this.threeDElements[i].perspectiveElem.style;
            style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + 'px';
            style.perspective = style.webkitPerspective;
          }
        }
      };

      HybridRendererBase.prototype.searchExtraCompositions = function (assets) {
        var i;
        var len = assets.length;
        var floatingContainer = createTag('div');

        for (i = 0; i < len; i += 1) {
          if (assets[i].xt) {
            var comp = this.createComp(assets[i], floatingContainer, this.globalData.comp, null);
            comp.initExpressions();
            this.globalData.projectInterface.registerComposition(comp);
          }
        }
      };

      function HCompElement(data, globalData, comp) {
        this.layers = data.layers;
        this.supports3d = !data.hasMask;
        this.completeLayers = false;
        this.pendingElements = [];
        this.elements = this.layers ? createSizedArray(this.layers.length) : [];
        this.initElement(data, globalData, comp);
        this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
          _placeholder: true
        };
      }

      extendPrototype([HybridRendererBase, ICompElement, HBaseElement], HCompElement);
      HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;

      HCompElement.prototype.createContainerElements = function () {
        this._createBaseContainerElements(); // divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';


        if (this.data.hasMask) {
          this.svgElement.setAttribute('width', this.data.w);
          this.svgElement.setAttribute('height', this.data.h);
          this.transformedElement = this.baseElement;
        } else {
          this.transformedElement = this.layerElement;
        }
      };

      HCompElement.prototype.addTo3dContainer = function (elem, pos) {
        var j = 0;
        var nextElement;

        while (j < pos) {
          if (this.elements[j] && this.elements[j].getBaseElement) {
            nextElement = this.elements[j].getBaseElement();
          }

          j += 1;
        }

        if (nextElement) {
          this.layerElement.insertBefore(elem, nextElement);
        } else {
          this.layerElement.appendChild(elem);
        }
      };

      HCompElement.prototype.createComp = function (data) {
        if (!this.supports3d) {
          return new SVGCompElement(data, this.globalData, this);
        }

        return new HCompElement(data, this.globalData, this);
      };

      function HybridRenderer(animationItem, config) {
        this.animationItem = animationItem;
        this.layers = null;
        this.renderedFrame = -1;
        this.renderConfig = {
          className: config && config.className || '',
          imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || 'xMidYMid slice',
          hideOnTransparent: !(config && config.hideOnTransparent === false),
          filterSize: {
            width: config && config.filterSize && config.filterSize.width || '400%',
            height: config && config.filterSize && config.filterSize.height || '400%',
            x: config && config.filterSize && config.filterSize.x || '-100%',
            y: config && config.filterSize && config.filterSize.y || '-100%'
          }
        };
        this.globalData = {
          _mdf: false,
          frameNum: -1,
          renderConfig: this.renderConfig
        };
        this.pendingElements = [];
        this.elements = [];
        this.threeDElements = [];
        this.destroyed = false;
        this.camera = null;
        this.supports3d = true;
        this.rendererType = 'html';
      }

      extendPrototype([HybridRendererBase], HybridRenderer);

      HybridRenderer.prototype.createComp = function (data) {
        if (!this.supports3d) {
          return new SVGCompElement(data, this.globalData, this);
        }

        return new HCompElement(data, this.globalData, this);
      };

      var Expressions = function () {
        var ob = {};
        ob.initExpressions = initExpressions;

        function initExpressions(animation) {
          var stackCount = 0;
          var registers = [];

          function pushExpression() {
            stackCount += 1;
          }

          function popExpression() {
            stackCount -= 1;

            if (stackCount === 0) {
              releaseInstances();
            }
          }

          function registerExpressionProperty(expression) {
            if (registers.indexOf(expression) === -1) {
              registers.push(expression);
            }
          }

          function releaseInstances() {
            var i;
            var len = registers.length;

            for (i = 0; i < len; i += 1) {
              registers[i].release();
            }

            registers.length = 0;
          }

          animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
          animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
          animation.renderer.globalData.pushExpression = pushExpression;
          animation.renderer.globalData.popExpression = popExpression;
          animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
        }

        return ob;
      }();

      function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

      /* eslint-disable */

      /*
       Copyright 2014 David Bau.

       Permission is hereby granted, free of charge, to any person obtaining
       a copy of this software and associated documentation files (the
       "Software"), to deal in the Software without restriction, including
       without limitation the rights to use, copy, modify, merge, publish,
       distribute, sublicense, and/or sell copies of the Software, and to
       permit persons to whom the Software is furnished to do so, subject to
       the following conditions:

       The above copyright notice and this permission notice shall be
       included in all copies or substantial portions of the Software.

       THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
       EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
       MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
       IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
       CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
       TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
       SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

       */
      function seedRandom(pool, math) {
        //
        // The following constants are related to IEEE 754 limits.
        //
        var global = this,
            width = 256,
            // each RC4 output is 0 <= x < 256
        chunks = 6,
            // at least six RC4 outputs for each double
        digits = 52,
            // there are 52 significant digits in a double
        rngname = 'random',
            // rngname: name for Math.random and Math.seedrandom
        startdenom = math.pow(width, chunks),
            significance = math.pow(2, digits),
            overflow = significance * 2,
            mask = width - 1,
            nodecrypto; // node.js crypto module, initialized at the bottom.
        //
        // seedrandom()
        // This is the seedrandom function described above.
        //

        function seedrandom(seed, options, callback) {
          var key = [];
          options = options === true ? {
            entropy: true
          } : options || {}; // Flatten the seed string or build one from local entropy if needed.

          var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key); // Use the seed to initialize an ARC4 generator.

          var arc4 = new ARC4(key); // This function returns a random double in [0, 1) that contains
          // randomness in every bit of the mantissa of the IEEE 754 value.

          var prng = function prng() {
            var n = arc4.g(chunks),
                // Start with a numerator n < 2 ^ 48
            d = startdenom,
                //   and denominator d = 2 ^ 48.
            x = 0; //   and no 'extra last byte'.

            while (n < significance) {
              // Fill up all significant digits by
              n = (n + x) * width; //   shifting numerator and

              d *= width; //   denominator and generating a

              x = arc4.g(1); //   new least-significant-byte.
            }

            while (n >= overflow) {
              // To avoid rounding up, before adding
              n /= 2; //   last byte, shift everything

              d /= 2; //   right using integer math until

              x >>>= 1; //   we have exactly the desired bits.
            }

            return (n + x) / d; // Form the number within [0, 1).
          };

          prng.int32 = function () {
            return arc4.g(4) | 0;
          };

          prng.quick = function () {
            return arc4.g(4) / 0x100000000;
          };

          prng["double"] = prng; // Mix the randomness into accumulated entropy.

          mixkey(tostring(arc4.S), pool); // Calling convention: what to return as a function of prng, seed, is_math.

          return (options.pass || callback || function (prng, seed, is_math_call, state) {
            if (state) {
              // Load the arc4 state from the given state if it has an S array.
              if (state.S) {
                copy(state, arc4);
              } // Only provide the .state method if requested via options.state.


              prng.state = function () {
                return copy(arc4, {});
              };
            } // If called as a method of Math (Math.seedrandom()), mutate
            // Math.random because that is how seedrandom.js has worked since v1.0.


            if (is_math_call) {
              math[rngname] = prng;
              return seed;
            } // Otherwise, it is a newer calling convention, so return the
            // prng directly.
            else return prng;
          })(prng, shortseed, 'global' in options ? options.global : this == math, options.state);
        }

        math['seed' + rngname] = seedrandom; //
        // ARC4
        //
        // An ARC4 implementation.  The constructor takes a key in the form of
        // an array of at most (width) integers that should be 0 <= x < (width).
        //
        // The g(count) method returns a pseudorandom integer that concatenates
        // the next (count) outputs from ARC4.  Its return value is a number x
        // that is in the range 0 <= x < (width ^ count).
        //

        function ARC4(key) {
          var t,
              keylen = key.length,
              me = this,
              i = 0,
              j = me.i = me.j = 0,
              s = me.S = []; // The empty key [] is treated as [0].

          if (!keylen) {
            key = [keylen++];
          } // Set up S using the standard key scheduling algorithm.


          while (i < width) {
            s[i] = i++;
          }

          for (i = 0; i < width; i++) {
            s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
            s[j] = t;
          } // The "g" method returns the next (count) outputs as one number.


          me.g = function (count) {
            // Using instance members instead of closure state nearly doubles speed.
            var t,
                r = 0,
                i = me.i,
                j = me.j,
                s = me.S;

            while (count--) {
              t = s[i = mask & i + 1];
              r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];
            }

            me.i = i;
            me.j = j;
            return r; // For robust unpredictability, the function call below automatically
            // discards an initial batch of values.  This is called RC4-drop[256].
            // See http://google.com/search?q=rsa+fluhrer+response&btnI
          };
        } //
        // copy()
        // Copies internal state of ARC4 to or from a plain object.
        //


        function copy(f, t) {
          t.i = f.i;
          t.j = f.j;
          t.S = f.S.slice();
          return t;
        } //
        // flatten()
        // Converts an object tree to nested arrays of strings.
        //


        function flatten(obj, depth) {
          var result = [],
              typ = _typeof$1(obj),
              prop;

          if (depth && typ == 'object') {
            for (prop in obj) {
              try {
                result.push(flatten(obj[prop], depth - 1));
              } catch (e) {}
            }
          }

          return result.length ? result : typ == 'string' ? obj : obj + '\0';
        } //
        // mixkey()
        // Mixes a string seed into a key that is an array of integers, and
        // returns a shortened string seed that is equivalent to the result key.
        //


        function mixkey(seed, key) {
          var stringseed = seed + '',
              smear,
              j = 0;

          while (j < stringseed.length) {
            key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
          }

          return tostring(key);
        } //
        // autoseed()
        // Returns an object for autoseeding, using window.crypto and Node crypto
        // module if available.
        //


        function autoseed() {
          try {
            if (nodecrypto) ;

            var out = new Uint8Array(width);
            (global.crypto || global.msCrypto).getRandomValues(out);
            return tostring(out);
          } catch (e) {
            var browser = global.navigator,
                plugins = browser && browser.plugins;
            return [+new Date(), global, plugins, global.screen, tostring(pool)];
          }
        } //
        // tostring()
        // Converts an array of charcodes to a string
        //


        function tostring(a) {
          return String.fromCharCode.apply(0, a);
        } //
        // When seedrandom.js is loaded, we immediately mix a few bits
        // from the built-in RNG into the entropy pool.  Because we do
        // not want to interfere with deterministic PRNG state later,
        // seedrandom will not call math.random on its own again after
        // initialization.
        //


        mixkey(math.random(), pool); //
        // Nodejs and AMD support: export the implementation as a module using
        // either convention.
        //
        // End anonymous scope, and pass initial values.
      }

      function initialize$2(BMMath) {
        seedRandom([], BMMath);
      }

      var propTypes = {
        SHAPE: 'shape'
      };

      function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

      var ExpressionManager = function () {

        var ob = {};
        var Math = BMMath;
        var window = null;
        var document = null;
        var XMLHttpRequest = null;
        var fetch = null;
        var frames = null;
        initialize$2(BMMath);

        function $bm_isInstanceOfArray(arr) {
          return arr.constructor === Array || arr.constructor === Float32Array;
        }

        function isNumerable(tOfV, v) {
          return tOfV === 'number' || tOfV === 'boolean' || tOfV === 'string' || v instanceof Number;
        }

        function $bm_neg(a) {
          var tOfA = _typeof(a);

          if (tOfA === 'number' || tOfA === 'boolean' || a instanceof Number) {
            return -a;
          }

          if ($bm_isInstanceOfArray(a)) {
            var i;
            var lenA = a.length;
            var retArr = [];

            for (i = 0; i < lenA; i += 1) {
              retArr[i] = -a[i];
            }

            return retArr;
          }

          if (a.propType) {
            return a.v;
          }

          return -a;
        }

        var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, 'easeIn').get;
        var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, 'easeOut').get;
        var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, 'easeInOut').get;

        function sum(a, b) {
          var tOfA = _typeof(a);

          var tOfB = _typeof(b);

          if (tOfA === 'string' || tOfB === 'string') {
            return a + b;
          }

          if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            return a + b;
          }

          if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
            a = a.slice(0);
            a[0] += b;
            return a;
          }

          if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
            b = b.slice(0);
            b[0] = a + b[0];
            return b;
          }

          if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
            var i = 0;
            var lenA = a.length;
            var lenB = b.length;
            var retArr = [];

            while (i < lenA || i < lenB) {
              if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
                retArr[i] = a[i] + b[i];
              } else {
                retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
              }

              i += 1;
            }

            return retArr;
          }

          return 0;
        }

        var add = sum;

        function sub(a, b) {
          var tOfA = _typeof(a);

          var tOfB = _typeof(b);

          if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            if (tOfA === 'string') {
              a = parseInt(a, 10);
            }

            if (tOfB === 'string') {
              b = parseInt(b, 10);
            }

            return a - b;
          }

          if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
            a = a.slice(0);
            a[0] -= b;
            return a;
          }

          if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
            b = b.slice(0);
            b[0] = a - b[0];
            return b;
          }

          if ($bm_isInstanceOfArray(a) && $bm_isInstanceOfArray(b)) {
            var i = 0;
            var lenA = a.length;
            var lenB = b.length;
            var retArr = [];

            while (i < lenA || i < lenB) {
              if ((typeof a[i] === 'number' || a[i] instanceof Number) && (typeof b[i] === 'number' || b[i] instanceof Number)) {
                retArr[i] = a[i] - b[i];
              } else {
                retArr[i] = b[i] === undefined ? a[i] : a[i] || b[i];
              }

              i += 1;
            }

            return retArr;
          }

          return 0;
        }

        function mul(a, b) {
          var tOfA = _typeof(a);

          var tOfB = _typeof(b);

          var arr;

          if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            return a * b;
          }

          var i;
          var len;

          if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
            len = a.length;
            arr = createTypedArray('float32', len);

            for (i = 0; i < len; i += 1) {
              arr[i] = a[i] * b;
            }

            return arr;
          }

          if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
            len = b.length;
            arr = createTypedArray('float32', len);

            for (i = 0; i < len; i += 1) {
              arr[i] = a * b[i];
            }

            return arr;
          }

          return 0;
        }

        function div(a, b) {
          var tOfA = _typeof(a);

          var tOfB = _typeof(b);

          var arr;

          if (isNumerable(tOfA, a) && isNumerable(tOfB, b)) {
            return a / b;
          }

          var i;
          var len;

          if ($bm_isInstanceOfArray(a) && isNumerable(tOfB, b)) {
            len = a.length;
            arr = createTypedArray('float32', len);

            for (i = 0; i < len; i += 1) {
              arr[i] = a[i] / b;
            }

            return arr;
          }

          if (isNumerable(tOfA, a) && $bm_isInstanceOfArray(b)) {
            len = b.length;
            arr = createTypedArray('float32', len);

            for (i = 0; i < len; i += 1) {
              arr[i] = a / b[i];
            }

            return arr;
          }

          return 0;
        }

        function mod(a, b) {
          if (typeof a === 'string') {
            a = parseInt(a, 10);
          }

          if (typeof b === 'string') {
            b = parseInt(b, 10);
          }

          return a % b;
        }

        var $bm_sum = sum;
        var $bm_sub = sub;
        var $bm_mul = mul;
        var $bm_div = div;
        var $bm_mod = mod;

        function clamp(num, min, max) {
          if (min > max) {
            var mm = max;
            max = min;
            min = mm;
          }

          return Math.min(Math.max(num, min), max);
        }

        function radiansToDegrees(val) {
          return val / degToRads;
        }

        var radians_to_degrees = radiansToDegrees;

        function degreesToRadians(val) {
          return val * degToRads;
        }

        var degrees_to_radians = radiansToDegrees;
        var helperLengthArray = [0, 0, 0, 0, 0, 0];

        function length(arr1, arr2) {
          if (typeof arr1 === 'number' || arr1 instanceof Number) {
            arr2 = arr2 || 0;
            return Math.abs(arr1 - arr2);
          }

          if (!arr2) {
            arr2 = helperLengthArray;
          }

          var i;
          var len = Math.min(arr1.length, arr2.length);
          var addedLength = 0;

          for (i = 0; i < len; i += 1) {
            addedLength += Math.pow(arr2[i] - arr1[i], 2);
          }

          return Math.sqrt(addedLength);
        }

        function normalize(vec) {
          return div(vec, length(vec));
        }

        function rgbToHsl(val) {
          var r = val[0];
          var g = val[1];
          var b = val[2];
          var max = Math.max(r, g, b);
          var min = Math.min(r, g, b);
          var h;
          var s;
          var l = (max + min) / 2;

          if (max === min) {
            h = 0; // achromatic

            s = 0; // achromatic
          } else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

            switch (max) {
              case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;

              case g:
                h = (b - r) / d + 2;
                break;

              case b:
                h = (r - g) / d + 4;
                break;
            }

            h /= 6;
          }

          return [h, s, l, val[3]];
        }

        function hue2rgb(p, q, t) {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        }

        function hslToRgb(val) {
          var h = val[0];
          var s = val[1];
          var l = val[2];
          var r;
          var g;
          var b;

          if (s === 0) {
            r = l; // achromatic

            b = l; // achromatic

            g = l; // achromatic
          } else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
          }

          return [r, g, b, val[3]];
        }

        function linear(t, tMin, tMax, value1, value2) {
          if (value1 === undefined || value2 === undefined) {
            value1 = tMin;
            value2 = tMax;
            tMin = 0;
            tMax = 1;
          }

          if (tMax < tMin) {
            var _tMin = tMax;
            tMax = tMin;
            tMin = _tMin;
          }

          if (t <= tMin) {
            return value1;
          }

          if (t >= tMax) {
            return value2;
          }

          var perc = tMax === tMin ? 0 : (t - tMin) / (tMax - tMin);

          if (!value1.length) {
            return value1 + (value2 - value1) * perc;
          }

          var i;
          var len = value1.length;
          var arr = createTypedArray('float32', len);

          for (i = 0; i < len; i += 1) {
            arr[i] = value1[i] + (value2[i] - value1[i]) * perc;
          }

          return arr;
        }

        function random(min, max) {
          if (max === undefined) {
            if (min === undefined) {
              min = 0;
              max = 1;
            } else {
              max = min;
              min = undefined;
            }
          }

          if (max.length) {
            var i;
            var len = max.length;

            if (!min) {
              min = createTypedArray('float32', len);
            }

            var arr = createTypedArray('float32', len);
            var rnd = BMMath.random();

            for (i = 0; i < len; i += 1) {
              arr[i] = min[i] + rnd * (max[i] - min[i]);
            }

            return arr;
          }

          if (min === undefined) {
            min = 0;
          }

          var rndm = BMMath.random();
          return min + rndm * (max - min);
        }

        function createPath(points, inTangents, outTangents, closed) {
          var i;
          var len = points.length;
          var path = shapePool.newElement();
          path.setPathData(!!closed, len);
          var arrPlaceholder = [0, 0];
          var inVertexPoint;
          var outVertexPoint;

          for (i = 0; i < len; i += 1) {
            inVertexPoint = inTangents && inTangents[i] ? inTangents[i] : arrPlaceholder;
            outVertexPoint = outTangents && outTangents[i] ? outTangents[i] : arrPlaceholder;
            path.setTripleAt(points[i][0], points[i][1], outVertexPoint[0] + points[i][0], outVertexPoint[1] + points[i][1], inVertexPoint[0] + points[i][0], inVertexPoint[1] + points[i][1], i, true);
          }

          return path;
        }

        function initiateExpression(elem, data, property) {
          var val = data.x;
          var needsVelocity = /velocity(?![\w\d])/.test(val);

          var _needsRandom = val.indexOf('random') !== -1;

          var elemType = elem.data.ty;
          var transform;
          var $bm_transform;
          var content;
          var effect;
          var thisProperty = property;
          thisProperty.valueAtTime = thisProperty.getValueAtTime;
          Object.defineProperty(thisProperty, 'value', {
            get: function get() {
              return thisProperty.v;
            }
          });
          elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
          elem.comp.displayStartTime = 0;
          var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
          var outPoint = elem.data.op / elem.comp.globalData.frameRate;
          var width = elem.data.sw ? elem.data.sw : 0;
          var height = elem.data.sh ? elem.data.sh : 0;
          var name = elem.data.nm;
          var loopIn;
          var loop_in;
          var loopOut;
          var loop_out;
          var smooth;
          var toWorld;
          var fromWorld;
          var fromComp;
          var toComp;
          var fromCompToSurface;
          var position;
          var rotation;
          var anchorPoint;
          var scale;
          var thisLayer;
          var thisComp;
          var mask;
          var valueAtTime;
          var velocityAtTime;
          var scoped_bm_rt; // val = val.replace(/(\\?"|')((http)(s)?(:\/))?\/.*?(\\?"|')/g, "\"\""); // deter potential network calls

          var expression_function = eval('[function _expression_function(){' + val + ';scoped_bm_rt=$bm_rt}]')[0]; // eslint-disable-line no-eval

          var numKeys = property.kf ? data.k.length : 0;
          var active = !this.data || this.data.hd !== true;

          var wiggle = function wiggle(freq, amp) {
            var iWiggle;
            var j;
            var lenWiggle = this.pv.length ? this.pv.length : 1;
            var addedAmps = createTypedArray('float32', lenWiggle);
            freq = 5;
            var iterations = Math.floor(time * freq);
            iWiggle = 0;
            j = 0;

            while (iWiggle < iterations) {
              // var rnd = BMMath.random();
              for (j = 0; j < lenWiggle; j += 1) {
                addedAmps[j] += -amp + amp * 2 * BMMath.random(); // addedAmps[j] += -amp + amp*2*rnd;
              }

              iWiggle += 1;
            } // var rnd2 = BMMath.random();


            var periods = time * freq;
            var perc = periods - Math.floor(periods);
            var arr = createTypedArray('float32', lenWiggle);

            if (lenWiggle > 1) {
              for (j = 0; j < lenWiggle; j += 1) {
                arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp * 2 * BMMath.random()) * perc; // arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
                // arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
              }

              return arr;
            }

            return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
          }.bind(this);

          if (thisProperty.loopIn) {
            loopIn = thisProperty.loopIn.bind(thisProperty);
            loop_in = loopIn;
          }

          if (thisProperty.loopOut) {
            loopOut = thisProperty.loopOut.bind(thisProperty);
            loop_out = loopOut;
          }

          if (thisProperty.smooth) {
            smooth = thisProperty.smooth.bind(thisProperty);
          }

          function loopInDuration(type, duration) {
            return loopIn(type, duration, true);
          }

          function loopOutDuration(type, duration) {
            return loopOut(type, duration, true);
          }

          if (this.getValueAtTime) {
            valueAtTime = this.getValueAtTime.bind(this);
          }

          if (this.getVelocityAtTime) {
            velocityAtTime = this.getVelocityAtTime.bind(this);
          }

          var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);

          function lookAt(elem1, elem2) {
            var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
            var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
            var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
            return [yaw, pitch, 0];
          }

          function easeOut(t, tMin, tMax, val1, val2) {
            return applyEase(easeOutBez, t, tMin, tMax, val1, val2);
          }

          function easeIn(t, tMin, tMax, val1, val2) {
            return applyEase(easeInBez, t, tMin, tMax, val1, val2);
          }

          function ease(t, tMin, tMax, val1, val2) {
            return applyEase(easeInOutBez, t, tMin, tMax, val1, val2);
          }

          function applyEase(fn, t, tMin, tMax, val1, val2) {
            if (val1 === undefined) {
              val1 = tMin;
              val2 = tMax;
            } else {
              t = (t - tMin) / (tMax - tMin);
            }

            if (t > 1) {
              t = 1;
            } else if (t < 0) {
              t = 0;
            }

            var mult = fn(t);

            if ($bm_isInstanceOfArray(val1)) {
              var iKey;
              var lenKey = val1.length;
              var arr = createTypedArray('float32', lenKey);

              for (iKey = 0; iKey < lenKey; iKey += 1) {
                arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
              }

              return arr;
            }

            return (val2 - val1) * mult + val1;
          }

          function nearestKey(time) {
            var iKey;
            var lenKey = data.k.length;
            var index;
            var keyTime;

            if (!data.k.length || typeof data.k[0] === 'number') {
              index = 0;
              keyTime = 0;
            } else {
              index = -1;
              time *= elem.comp.globalData.frameRate;

              if (time < data.k[0].t) {
                index = 1;
                keyTime = data.k[0].t;
              } else {
                for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
                  if (time === data.k[iKey].t) {
                    index = iKey + 1;
                    keyTime = data.k[iKey].t;
                    break;
                  } else if (time > data.k[iKey].t && time < data.k[iKey + 1].t) {
                    if (time - data.k[iKey].t > data.k[iKey + 1].t - time) {
                      index = iKey + 2;
                      keyTime = data.k[iKey + 1].t;
                    } else {
                      index = iKey + 1;
                      keyTime = data.k[iKey].t;
                    }

                    break;
                  }
                }

                if (index === -1) {
                  index = iKey + 1;
                  keyTime = data.k[iKey].t;
                }
              }
            }

            var obKey = {};
            obKey.index = index;
            obKey.time = keyTime / elem.comp.globalData.frameRate;
            return obKey;
          }

          function key(ind) {
            var obKey;
            var iKey;
            var lenKey;

            if (!data.k.length || typeof data.k[0] === 'number') {
              throw new Error('The property has no keyframe at index ' + ind);
            }

            ind -= 1;
            obKey = {
              time: data.k[ind].t / elem.comp.globalData.frameRate,
              value: []
            };
            var arr = Object.prototype.hasOwnProperty.call(data.k[ind], 's') ? data.k[ind].s : data.k[ind - 1].e;
            lenKey = arr.length;

            for (iKey = 0; iKey < lenKey; iKey += 1) {
              obKey[iKey] = arr[iKey];
              obKey.value[iKey] = arr[iKey];
            }

            return obKey;
          }

          function framesToTime(fr, fps) {
            if (!fps) {
              fps = elem.comp.globalData.frameRate;
            }

            return fr / fps;
          }

          function timeToFrames(t, fps) {
            if (!t && t !== 0) {
              t = time;
            }

            if (!fps) {
              fps = elem.comp.globalData.frameRate;
            }

            return t * fps;
          }

          function seedRandom(seed) {
            BMMath.seedrandom(randSeed + seed);
          }

          function sourceRectAtTime() {
            return elem.sourceRectAtTime();
          }

          function substring(init, end) {
            if (typeof value === 'string') {
              if (end === undefined) {
                return value.substring(init);
              }

              return value.substring(init, end);
            }

            return '';
          }

          function substr(init, end) {
            if (typeof value === 'string') {
              if (end === undefined) {
                return value.substr(init);
              }

              return value.substr(init, end);
            }

            return '';
          }

          function posterizeTime(framesPerSecond) {
            time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
            value = valueAtTime(time);
          }

          var time;
          var velocity;
          var value;
          var text;
          var textIndex;
          var textTotal;
          var selectorValue;
          var index = elem.data.ind;
          var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
          var parent;
          var randSeed = Math.floor(Math.random() * 1000000);
          var globalData = elem.globalData;

          function executeExpression(_value) {
            // globalData.pushExpression();
            value = _value;

            if (this.frameExpressionId === elem.globalData.frameId && this.propType !== 'textSelector') {
              return value;
            }

            if (this.propType === 'textSelector') {
              textIndex = this.textIndex;
              textTotal = this.textTotal;
              selectorValue = this.selectorValue;
            }

            if (!thisLayer) {
              text = elem.layerInterface.text;
              thisLayer = elem.layerInterface;
              thisComp = elem.comp.compInterface;
              toWorld = thisLayer.toWorld.bind(thisLayer);
              fromWorld = thisLayer.fromWorld.bind(thisLayer);
              fromComp = thisLayer.fromComp.bind(thisLayer);
              toComp = thisLayer.toComp.bind(thisLayer);
              mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
              fromCompToSurface = fromComp;
            }

            if (!transform) {
              transform = elem.layerInterface('ADBE Transform Group');
              $bm_transform = transform;

              if (transform) {
                anchorPoint = transform.anchorPoint;
                /* position = transform.position;
                          rotation = transform.rotation;
                          scale = transform.scale; */
              }
            }

            if (elemType === 4 && !content) {
              content = thisLayer('ADBE Root Vectors Group');
            }

            if (!effect) {
              effect = thisLayer(4);
            }

            hasParent = !!(elem.hierarchy && elem.hierarchy.length);

            if (hasParent && !parent) {
              parent = elem.hierarchy[0].layerInterface;
            }

            time = this.comp.renderedFrame / this.comp.globalData.frameRate;

            if (_needsRandom) {
              seedRandom(randSeed + time);
            }

            if (needsVelocity) {
              velocity = velocityAtTime(time);
            }

            expression_function();
            this.frameExpressionId = elem.globalData.frameId; // TODO: Check if it's possible to return on ShapeInterface the .v value
            // Changed this to a ternary operation because Rollup failed compiling it correctly

            scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;
            return scoped_bm_rt;
          } // Bundlers will see these as dead code and unless we reference them


          executeExpression.__preventDeadCodeRemoval = [$bm_transform, anchorPoint, time, velocity, inPoint, outPoint, width, height, name, loop_in, loop_out, smooth, toComp, fromCompToSurface, toWorld, fromWorld, mask, position, rotation, scale, thisComp, numKeys, active, wiggle, loopInDuration, loopOutDuration, comp, lookAt, easeOut, easeIn, ease, nearestKey, key, text, textIndex, textTotal, selectorValue, framesToTime, timeToFrames, sourceRectAtTime, substring, substr, posterizeTime, index, globalData];
          return executeExpression;
        }

        ob.initiateExpression = initiateExpression;
        ob.__preventDeadCodeRemoval = [window, document, XMLHttpRequest, fetch, frames, $bm_neg, add, $bm_sum, $bm_sub, $bm_mul, $bm_div, $bm_mod, clamp, radians_to_degrees, degreesToRadians, degrees_to_radians, normalize, rgbToHsl, hslToRgb, linear, random, createPath];
        return ob;
      }();

      var expressionHelpers = function () {
        function searchExpressions(elem, data, prop) {
          if (data.x) {
            prop.k = true;
            prop.x = true;
            prop.initiateExpression = ExpressionManager.initiateExpression;
            prop.effectsSequence.push(prop.initiateExpression(elem, data, prop).bind(prop));
          }
        }

        function getValueAtTime(frameNum) {
          frameNum *= this.elem.globalData.frameRate;
          frameNum -= this.offsetTime;

          if (frameNum !== this._cachingAtTime.lastFrame) {
            this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
            this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
            this._cachingAtTime.lastFrame = frameNum;
          }

          return this._cachingAtTime.value;
        }

        function getSpeedAtTime(frameNum) {
          var delta = -0.01;
          var v1 = this.getValueAtTime(frameNum);
          var v2 = this.getValueAtTime(frameNum + delta);
          var speed = 0;

          if (v1.length) {
            var i;

            for (i = 0; i < v1.length; i += 1) {
              speed += Math.pow(v2[i] - v1[i], 2);
            }

            speed = Math.sqrt(speed) * 100;
          } else {
            speed = 0;
          }

          return speed;
        }

        function getVelocityAtTime(frameNum) {
          if (this.vel !== undefined) {
            return this.vel;
          }

          var delta = -0.001; // frameNum += this.elem.data.st;

          var v1 = this.getValueAtTime(frameNum);
          var v2 = this.getValueAtTime(frameNum + delta);
          var velocity;

          if (v1.length) {
            velocity = createTypedArray('float32', v1.length);
            var i;

            for (i = 0; i < v1.length; i += 1) {
              // removing frameRate
              // if needed, don't add it here
              // velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
              velocity[i] = (v2[i] - v1[i]) / delta;
            }
          } else {
            velocity = (v2 - v1) / delta;
          }

          return velocity;
        }

        function getStaticValueAtTime() {
          return this.pv;
        }

        function setGroupProperty(propertyGroup) {
          this.propertyGroup = propertyGroup;
        }

        return {
          searchExpressions: searchExpressions,
          getSpeedAtTime: getSpeedAtTime,
          getVelocityAtTime: getVelocityAtTime,
          getValueAtTime: getValueAtTime,
          getStaticValueAtTime: getStaticValueAtTime,
          setGroupProperty: setGroupProperty
        };
      }();

      function addPropertyDecorator() {
        function loopOut(type, duration, durationFlag) {
          if (!this.k || !this.keyframes) {
            return this.pv;
          }

          type = type ? type.toLowerCase() : '';
          var currentFrame = this.comp.renderedFrame;
          var keyframes = this.keyframes;
          var lastKeyFrame = keyframes[keyframes.length - 1].t;

          if (currentFrame <= lastKeyFrame) {
            return this.pv;
          }

          var cycleDuration;
          var firstKeyFrame;

          if (!durationFlag) {
            if (!duration || duration > keyframes.length - 1) {
              duration = keyframes.length - 1;
            }

            firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
            cycleDuration = lastKeyFrame - firstKeyFrame;
          } else {
            if (!duration) {
              cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
            } else {
              cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration);
            }

            firstKeyFrame = lastKeyFrame - cycleDuration;
          }

          var i;
          var len;
          var ret;

          if (type === 'pingpong') {
            var iterations = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);

            if (iterations % 2 !== 0) {
              return this.getValueAtTime((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
            }
          } else if (type === 'offset') {
            var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
            var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
            var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line

            var repeats = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);

            if (this.pv.length) {
              ret = new Array(initV.length);
              len = ret.length;

              for (i = 0; i < len; i += 1) {
                ret[i] = (endV[i] - initV[i]) * repeats + current[i];
              }

              return ret;
            }

            return (endV - initV) * repeats + current;
          } else if (type === 'continue') {
            var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
            var nextLastValue = this.getValueAtTime((lastKeyFrame - 0.001) / this.comp.globalData.frameRate, 0);

            if (this.pv.length) {
              ret = new Array(lastValue.length);
              len = ret.length;

              for (i = 0; i < len; i += 1) {
                ret[i] = lastValue[i] + (lastValue[i] - nextLastValue[i]) * ((currentFrame - lastKeyFrame) / this.comp.globalData.frameRate) / 0.0005; // eslint-disable-line
              }

              return ret;
            }

            return lastValue + (lastValue - nextLastValue) * ((currentFrame - lastKeyFrame) / 0.001);
          }

          return this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
        }

        function loopIn(type, duration, durationFlag) {
          if (!this.k) {
            return this.pv;
          }

          type = type ? type.toLowerCase() : '';
          var currentFrame = this.comp.renderedFrame;
          var keyframes = this.keyframes;
          var firstKeyFrame = keyframes[0].t;

          if (currentFrame >= firstKeyFrame) {
            return this.pv;
          }

          var cycleDuration;
          var lastKeyFrame;

          if (!durationFlag) {
            if (!duration || duration > keyframes.length - 1) {
              duration = keyframes.length - 1;
            }

            lastKeyFrame = keyframes[duration].t;
            cycleDuration = lastKeyFrame - firstKeyFrame;
          } else {
            if (!duration) {
              cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
            } else {
              cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration);
            }

            lastKeyFrame = firstKeyFrame + cycleDuration;
          }

          var i;
          var len;
          var ret;

          if (type === 'pingpong') {
            var iterations = Math.floor((firstKeyFrame - currentFrame) / cycleDuration);

            if (iterations % 2 === 0) {
              return this.getValueAtTime(((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0); // eslint-disable-line
            }
          } else if (type === 'offset') {
            var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
            var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
            var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
            var repeats = Math.floor((firstKeyFrame - currentFrame) / cycleDuration) + 1;

            if (this.pv.length) {
              ret = new Array(initV.length);
              len = ret.length;

              for (i = 0; i < len; i += 1) {
                ret[i] = current[i] - (endV[i] - initV[i]) * repeats;
              }

              return ret;
            }

            return current - (endV - initV) * repeats;
          } else if (type === 'continue') {
            var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
            var nextFirstValue = this.getValueAtTime((firstKeyFrame + 0.001) / this.comp.globalData.frameRate, 0);

            if (this.pv.length) {
              ret = new Array(firstValue.length);
              len = ret.length;

              for (i = 0; i < len; i += 1) {
                ret[i] = firstValue[i] + (firstValue[i] - nextFirstValue[i]) * (firstKeyFrame - currentFrame) / 0.001;
              }

              return ret;
            }

            return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame) / 0.001;
          }

          return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0); // eslint-disable-line
        }

        function smooth(width, samples) {
          if (!this.k) {
            return this.pv;
          }

          width = (width || 0.4) * 0.5;
          samples = Math.floor(samples || 5);

          if (samples <= 1) {
            return this.pv;
          }

          var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
          var initFrame = currentTime - width;
          var endFrame = currentTime + width;
          var sampleFrequency = samples > 1 ? (endFrame - initFrame) / (samples - 1) : 1;
          var i = 0;
          var j = 0;
          var value;

          if (this.pv.length) {
            value = createTypedArray('float32', this.pv.length);
          } else {
            value = 0;
          }

          var sampleValue;

          while (i < samples) {
            sampleValue = this.getValueAtTime(initFrame + i * sampleFrequency);

            if (this.pv.length) {
              for (j = 0; j < this.pv.length; j += 1) {
                value[j] += sampleValue[j];
              }
            } else {
              value += sampleValue;
            }

            i += 1;
          }

          if (this.pv.length) {
            for (j = 0; j < this.pv.length; j += 1) {
              value[j] /= samples;
            }
          } else {
            value /= samples;
          }

          return value;
        }

        function getTransformValueAtTime(time) {
          if (!this._transformCachingAtTime) {
            this._transformCachingAtTime = {
              v: new Matrix()
            };
          } /// /


          var matrix = this._transformCachingAtTime.v;
          matrix.cloneFromProps(this.pre.props);

          if (this.appliedTransformations < 1) {
            var anchor = this.a.getValueAtTime(time);
            matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);
          }

          if (this.appliedTransformations < 2) {
            var scale = this.s.getValueAtTime(time);
            matrix.scale(scale[0] * this.s.mult, scale[1] * this.s.mult, scale[2] * this.s.mult);
          }

          if (this.sk && this.appliedTransformations < 3) {
            var skew = this.sk.getValueAtTime(time);
            var skewAxis = this.sa.getValueAtTime(time);
            matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);
          }

          if (this.r && this.appliedTransformations < 4) {
            var rotation = this.r.getValueAtTime(time);
            matrix.rotate(-rotation * this.r.mult);
          } else if (!this.r && this.appliedTransformations < 4) {
            var rotationZ = this.rz.getValueAtTime(time);
            var rotationY = this.ry.getValueAtTime(time);
            var rotationX = this.rx.getValueAtTime(time);
            var orientation = this.or.getValueAtTime(time);
            matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);
          }

          if (this.data.p && this.data.p.s) {
            var positionX = this.px.getValueAtTime(time);
            var positionY = this.py.getValueAtTime(time);

            if (this.data.p.z) {
              var positionZ = this.pz.getValueAtTime(time);
              matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);
            } else {
              matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);
            }
          } else {
            var position = this.p.getValueAtTime(time);
            matrix.translate(position[0] * this.p.mult, position[1] * this.p.mult, -position[2] * this.p.mult);
          }

          return matrix; /// /
        }

        function getTransformStaticValueAtTime() {
          return this.v.clone(new Matrix());
        }

        var getTransformProperty = TransformPropertyFactory.getTransformProperty;

        TransformPropertyFactory.getTransformProperty = function (elem, data, container) {
          var prop = getTransformProperty(elem, data, container);

          if (prop.dynamicProperties.length) {
            prop.getValueAtTime = getTransformValueAtTime.bind(prop);
          } else {
            prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
          }

          prop.setGroupProperty = expressionHelpers.setGroupProperty;
          return prop;
        };

        var propertyGetProp = PropertyFactory.getProp;

        PropertyFactory.getProp = function (elem, data, type, mult, container) {
          var prop = propertyGetProp(elem, data, type, mult, container); // prop.getVelocityAtTime = getVelocityAtTime;
          // prop.loopOut = loopOut;
          // prop.loopIn = loopIn;

          if (prop.kf) {
            prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
          } else {
            prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
          }

          prop.setGroupProperty = expressionHelpers.setGroupProperty;
          prop.loopOut = loopOut;
          prop.loopIn = loopIn;
          prop.smooth = smooth;
          prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
          prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
          prop.numKeys = data.a === 1 ? data.k.length : 0;
          prop.propertyIndex = data.ix;
          var value = 0;

          if (type !== 0) {
            value = createTypedArray('float32', data.a === 1 ? data.k[0].s.length : data.k.length);
          }

          prop._cachingAtTime = {
            lastFrame: initialDefaultFrame,
            lastIndex: 0,
            value: value
          };
          expressionHelpers.searchExpressions(elem, data, prop);

          if (prop.k) {
            container.addDynamicProperty(prop);
          }

          return prop;
        };

        function getShapeValueAtTime(frameNum) {
          // For now this caching object is created only when needed instead of creating it when the shape is initialized.
          if (!this._cachingAtTime) {
            this._cachingAtTime = {
              shapeValue: shapePool.clone(this.pv),
              lastIndex: 0,
              lastTime: initialDefaultFrame
            };
          }

          frameNum *= this.elem.globalData.frameRate;
          frameNum -= this.offsetTime;

          if (frameNum !== this._cachingAtTime.lastTime) {
            this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
            this._cachingAtTime.lastTime = frameNum;
            this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
          }

          return this._cachingAtTime.shapeValue;
        }

        var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
        var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();

        function ShapeExpressions() {}

        ShapeExpressions.prototype = {
          vertices: function vertices(prop, time) {
            if (this.k) {
              this.getValue();
            }

            var shapePath = this.v;

            if (time !== undefined) {
              shapePath = this.getValueAtTime(time, 0);
            }

            var i;
            var len = shapePath._length;
            var vertices = shapePath[prop];
            var points = shapePath.v;
            var arr = createSizedArray(len);

            for (i = 0; i < len; i += 1) {
              if (prop === 'i' || prop === 'o') {
                arr[i] = [vertices[i][0] - points[i][0], vertices[i][1] - points[i][1]];
              } else {
                arr[i] = [vertices[i][0], vertices[i][1]];
              }
            }

            return arr;
          },
          points: function points(time) {
            return this.vertices('v', time);
          },
          inTangents: function inTangents(time) {
            return this.vertices('i', time);
          },
          outTangents: function outTangents(time) {
            return this.vertices('o', time);
          },
          isClosed: function isClosed() {
            return this.v.c;
          },
          pointOnPath: function pointOnPath(perc, time) {
            var shapePath = this.v;

            if (time !== undefined) {
              shapePath = this.getValueAtTime(time, 0);
            }

            if (!this._segmentsLength) {
              this._segmentsLength = bez.getSegmentsLength(shapePath);
            }

            var segmentsLength = this._segmentsLength;
            var lengths = segmentsLength.lengths;
            var lengthPos = segmentsLength.totalLength * perc;
            var i = 0;
            var len = lengths.length;
            var accumulatedLength = 0;
            var pt;

            while (i < len) {
              if (accumulatedLength + lengths[i].addedLength > lengthPos) {
                var initIndex = i;
                var endIndex = shapePath.c && i === len - 1 ? 0 : i + 1;
                var segmentPerc = (lengthPos - accumulatedLength) / lengths[i].addedLength;
                pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i]);
                break;
              } else {
                accumulatedLength += lengths[i].addedLength;
              }

              i += 1;
            }

            if (!pt) {
              pt = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
            }

            return pt;
          },
          vectorOnPath: function vectorOnPath(perc, time, vectorType) {
            // perc doesn't use triple equality because it can be a Number object as well as a primitive.
            if (perc == 1) {
              // eslint-disable-line eqeqeq
              perc = this.v.c;
            } else if (perc == 0) {
              // eslint-disable-line eqeqeq
              perc = 0.999;
            }

            var pt1 = this.pointOnPath(perc, time);
            var pt2 = this.pointOnPath(perc + 0.001, time);
            var xLength = pt2[0] - pt1[0];
            var yLength = pt2[1] - pt1[1];
            var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));

            if (magnitude === 0) {
              return [0, 0];
            }

            var unitVector = vectorType === 'tangent' ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
            return unitVector;
          },
          tangentOnPath: function tangentOnPath(perc, time) {
            return this.vectorOnPath(perc, time, 'tangent');
          },
          normalOnPath: function normalOnPath(perc, time) {
            return this.vectorOnPath(perc, time, 'normal');
          },
          setGroupProperty: expressionHelpers.setGroupProperty,
          getValueAtTime: expressionHelpers.getStaticValueAtTime
        };
        extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
        extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
        KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
        KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
        var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;

        ShapePropertyFactory.getShapeProp = function (elem, data, type, arr, trims) {
          var prop = propertyGetShapeProp(elem, data, type, arr, trims);
          prop.propertyIndex = data.ix;
          prop.lock = false;

          if (type === 3) {
            expressionHelpers.searchExpressions(elem, data.pt, prop);
          } else if (type === 4) {
            expressionHelpers.searchExpressions(elem, data.ks, prop);
          }

          if (prop.k) {
            elem.addDynamicProperty(prop);
          }

          return prop;
        };
      }

      function initialize$1() {
        addPropertyDecorator();
      }

      function addDecorator() {
        function searchExpressions() {
          if (this.data.d.x) {
            this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
            this.addEffect(this.getExpressionValue.bind(this));
            return true;
          }

          return null;
        }

        TextProperty.prototype.getExpressionValue = function (currentValue, text) {
          var newValue = this.calculateExpression(text);

          if (currentValue.t !== newValue) {
            var newData = {};
            this.copyData(newData, currentValue);
            newData.t = newValue.toString();
            newData.__complete = false;
            return newData;
          }

          return currentValue;
        };

        TextProperty.prototype.searchProperty = function () {
          var isKeyframed = this.searchKeyframes();
          var hasExpressions = this.searchExpressions();
          this.kf = isKeyframed || hasExpressions;
          return this.kf;
        };

        TextProperty.prototype.searchExpressions = searchExpressions;
      }

      function initialize() {
        addDecorator();
      }

      function SVGComposableEffect() {}

      SVGComposableEffect.prototype = {
        createMergeNode: function createMergeNode(resultId, ins) {
          var feMerge = createNS('feMerge');
          feMerge.setAttribute('result', resultId);
          var feMergeNode;
          var i;

          for (i = 0; i < ins.length; i += 1) {
            feMergeNode = createNS('feMergeNode');
            feMergeNode.setAttribute('in', ins[i]);
            feMerge.appendChild(feMergeNode);
            feMerge.appendChild(feMergeNode);
          }

          return feMerge;
        }
      };

      function SVGTintFilter(filter, filterManager, elem, id, source) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
        feColorMatrix.setAttribute('values', '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', id + '_tint_1');
        filter.appendChild(feColorMatrix);
        feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
        feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', id + '_tint_2');
        filter.appendChild(feColorMatrix);
        this.matrixFilter = feColorMatrix;
        var feMerge = this.createMergeNode(id, [source, id + '_tint_1', id + '_tint_2']);
        filter.appendChild(feMerge);
      }

      extendPrototype([SVGComposableEffect], SVGTintFilter);

      SVGTintFilter.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var colorBlack = this.filterManager.effectElements[0].p.v;
          var colorWhite = this.filterManager.effectElements[1].p.v;
          var opacity = this.filterManager.effectElements[2].p.v / 100;
          this.matrixFilter.setAttribute('values', colorWhite[0] - colorBlack[0] + ' 0 0 0 ' + colorBlack[0] + ' ' + (colorWhite[1] - colorBlack[1]) + ' 0 0 0 ' + colorBlack[1] + ' ' + (colorWhite[2] - colorBlack[2]) + ' 0 0 0 ' + colorBlack[2] + ' 0 0 0 ' + opacity + ' 0');
        }
      };

      function SVGFillFilter(filter, filterManager, elem, id) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
        feColorMatrix.setAttribute('values', '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
        feColorMatrix.setAttribute('result', id);
        filter.appendChild(feColorMatrix);
        this.matrixFilter = feColorMatrix;
      }

      SVGFillFilter.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var color = this.filterManager.effectElements[2].p.v;
          var opacity = this.filterManager.effectElements[6].p.v;
          this.matrixFilter.setAttribute('values', '0 0 0 0 ' + color[0] + ' 0 0 0 0 ' + color[1] + ' 0 0 0 0 ' + color[2] + ' 0 0 0 ' + opacity + ' 0');
        }
      };

      function SVGStrokeEffect(fil, filterManager, elem) {
        this.initialized = false;
        this.filterManager = filterManager;
        this.elem = elem;
        this.paths = [];
      }

      SVGStrokeEffect.prototype.initialize = function () {
        var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
        var path;
        var groupPath;
        var i;
        var len;

        if (this.filterManager.effectElements[1].p.v === 1) {
          len = this.elem.maskManager.masksProperties.length;
          i = 0;
        } else {
          i = this.filterManager.effectElements[0].p.v - 1;
          len = i + 1;
        }

        groupPath = createNS('g');
        groupPath.setAttribute('fill', 'none');
        groupPath.setAttribute('stroke-linecap', 'round');
        groupPath.setAttribute('stroke-dashoffset', 1);

        for (i; i < len; i += 1) {
          path = createNS('path');
          groupPath.appendChild(path);
          this.paths.push({
            p: path,
            m: i
          });
        }

        if (this.filterManager.effectElements[10].p.v === 3) {
          var mask = createNS('mask');
          var id = createElementID();
          mask.setAttribute('id', id);
          mask.setAttribute('mask-type', 'alpha');
          mask.appendChild(groupPath);
          this.elem.globalData.defs.appendChild(mask);
          var g = createNS('g');
          g.setAttribute('mask', 'url(' + getLocationHref() + '#' + id + ')');

          while (elemChildren[0]) {
            g.appendChild(elemChildren[0]);
          }

          this.elem.layerElement.appendChild(g);
          this.masker = mask;
          groupPath.setAttribute('stroke', '#fff');
        } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
          if (this.filterManager.effectElements[10].p.v === 2) {
            elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;

            while (elemChildren.length) {
              this.elem.layerElement.removeChild(elemChildren[0]);
            }
          }

          this.elem.layerElement.appendChild(groupPath);
          this.elem.layerElement.removeAttribute('mask');
          groupPath.setAttribute('stroke', '#fff');
        }

        this.initialized = true;
        this.pathMasker = groupPath;
      };

      SVGStrokeEffect.prototype.renderFrame = function (forceRender) {
        if (!this.initialized) {
          this.initialize();
        }

        var i;
        var len = this.paths.length;
        var mask;
        var path;

        for (i = 0; i < len; i += 1) {
          if (this.paths[i].m !== -1) {
            mask = this.elem.maskManager.viewData[this.paths[i].m];
            path = this.paths[i].p;

            if (forceRender || this.filterManager._mdf || mask.prop._mdf) {
              path.setAttribute('d', mask.lastPath);
            }

            if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf) {
              var dasharrayValue;

              if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
                var s = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                var e = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                var l = path.getTotalLength();
                dasharrayValue = '0 0 0 ' + l * s + ' ';
                var lineLength = l * (e - s);
                var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
                var units = Math.floor(lineLength / segment);
                var j;

                for (j = 0; j < units; j += 1) {
                  dasharrayValue += '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + ' ';
                }

                dasharrayValue += '0 ' + l * 10 + ' 0 0';
              } else {
                dasharrayValue = '1 ' + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
              }

              path.setAttribute('stroke-dasharray', dasharrayValue);
            }
          }
        }

        if (forceRender || this.filterManager.effectElements[4].p._mdf) {
          this.pathMasker.setAttribute('stroke-width', this.filterManager.effectElements[4].p.v * 2);
        }

        if (forceRender || this.filterManager.effectElements[6].p._mdf) {
          this.pathMasker.setAttribute('opacity', this.filterManager.effectElements[6].p.v);
        }

        if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
          if (forceRender || this.filterManager.effectElements[3].p._mdf) {
            var color = this.filterManager.effectElements[3].p.v;
            this.pathMasker.setAttribute('stroke', 'rgb(' + bmFloor(color[0] * 255) + ',' + bmFloor(color[1] * 255) + ',' + bmFloor(color[2] * 255) + ')');
          }
        }
      };

      function SVGTritoneFilter(filter, filterManager, elem, id) {
        this.filterManager = filterManager;
        var feColorMatrix = createNS('feColorMatrix');
        feColorMatrix.setAttribute('type', 'matrix');
        feColorMatrix.setAttribute('color-interpolation-filters', 'linearRGB');
        feColorMatrix.setAttribute('values', '0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
        filter.appendChild(feColorMatrix);
        var feComponentTransfer = createNS('feComponentTransfer');
        feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
        feComponentTransfer.setAttribute('result', id);
        this.matrixFilter = feComponentTransfer;
        var feFuncR = createNS('feFuncR');
        feFuncR.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncR);
        this.feFuncR = feFuncR;
        var feFuncG = createNS('feFuncG');
        feFuncG.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncG);
        this.feFuncG = feFuncG;
        var feFuncB = createNS('feFuncB');
        feFuncB.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFuncB);
        this.feFuncB = feFuncB;
        filter.appendChild(feComponentTransfer);
      }

      SVGTritoneFilter.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var color1 = this.filterManager.effectElements[0].p.v;
          var color2 = this.filterManager.effectElements[1].p.v;
          var color3 = this.filterManager.effectElements[2].p.v;
          var tableR = color3[0] + ' ' + color2[0] + ' ' + color1[0];
          var tableG = color3[1] + ' ' + color2[1] + ' ' + color1[1];
          var tableB = color3[2] + ' ' + color2[2] + ' ' + color1[2];
          this.feFuncR.setAttribute('tableValues', tableR);
          this.feFuncG.setAttribute('tableValues', tableG);
          this.feFuncB.setAttribute('tableValues', tableB);
        }
      };

      function SVGProLevelsFilter(filter, filterManager, elem, id) {
        this.filterManager = filterManager;
        var effectElements = this.filterManager.effectElements;
        var feComponentTransfer = createNS('feComponentTransfer'); // Red

        if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
          this.feFuncR = this.createFeFunc('feFuncR', feComponentTransfer);
        } // Green


        if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
          this.feFuncG = this.createFeFunc('feFuncG', feComponentTransfer);
        } // Blue


        if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
          this.feFuncB = this.createFeFunc('feFuncB', feComponentTransfer);
        } // Alpha


        if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
          this.feFuncA = this.createFeFunc('feFuncA', feComponentTransfer);
        } // RGB


        if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
          feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
          filter.appendChild(feComponentTransfer);
        }

        if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
          feComponentTransfer = createNS('feComponentTransfer');
          feComponentTransfer.setAttribute('color-interpolation-filters', 'sRGB');
          feComponentTransfer.setAttribute('result', id);
          filter.appendChild(feComponentTransfer);
          this.feFuncRComposed = this.createFeFunc('feFuncR', feComponentTransfer);
          this.feFuncGComposed = this.createFeFunc('feFuncG', feComponentTransfer);
          this.feFuncBComposed = this.createFeFunc('feFuncB', feComponentTransfer);
        }
      }

      SVGProLevelsFilter.prototype.createFeFunc = function (type, feComponentTransfer) {
        var feFunc = createNS(type);
        feFunc.setAttribute('type', 'table');
        feComponentTransfer.appendChild(feFunc);
        return feFunc;
      };

      SVGProLevelsFilter.prototype.getTableValue = function (inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
        var cnt = 0;
        var segments = 256;
        var perc;
        var min = Math.min(inputBlack, inputWhite);
        var max = Math.max(inputBlack, inputWhite);
        var table = Array.call(null, {
          length: segments
        });
        var colorValue;
        var pos = 0;
        var outputDelta = outputWhite - outputBlack;
        var inputDelta = inputWhite - inputBlack;

        while (cnt <= 256) {
          perc = cnt / 256;

          if (perc <= min) {
            colorValue = inputDelta < 0 ? outputWhite : outputBlack;
          } else if (perc >= max) {
            colorValue = inputDelta < 0 ? outputBlack : outputWhite;
          } else {
            colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
          }

          table[pos] = colorValue;
          pos += 1;
          cnt += 256 / (segments - 1);
        }

        return table.join(' ');
      };

      SVGProLevelsFilter.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
          var val;
          var effectElements = this.filterManager.effectElements;

          if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
            val = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
            this.feFuncRComposed.setAttribute('tableValues', val);
            this.feFuncGComposed.setAttribute('tableValues', val);
            this.feFuncBComposed.setAttribute('tableValues', val);
          }

          if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
            val = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
            this.feFuncR.setAttribute('tableValues', val);
          }

          if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
            val = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
            this.feFuncG.setAttribute('tableValues', val);
          }

          if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
            val = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
            this.feFuncB.setAttribute('tableValues', val);
          }

          if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
            val = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
            this.feFuncA.setAttribute('tableValues', val);
          }
        }
      };

      function SVGDropShadowEffect(filter, filterManager, elem, id, source) {
        var filterSize = filterManager.container.globalData.renderConfig.filterSize;
        filter.setAttribute('x', filterSize.x);
        filter.setAttribute('y', filterSize.y);
        filter.setAttribute('width', filterSize.width);
        filter.setAttribute('height', filterSize.height);
        this.filterManager = filterManager;
        var feGaussianBlur = createNS('feGaussianBlur');
        feGaussianBlur.setAttribute('in', 'SourceAlpha');
        feGaussianBlur.setAttribute('result', id + '_drop_shadow_1');
        feGaussianBlur.setAttribute('stdDeviation', '0');
        this.feGaussianBlur = feGaussianBlur;
        filter.appendChild(feGaussianBlur);
        var feOffset = createNS('feOffset');
        feOffset.setAttribute('dx', '25');
        feOffset.setAttribute('dy', '0');
        feOffset.setAttribute('in', id + '_drop_shadow_1');
        feOffset.setAttribute('result', id + '_drop_shadow_2');
        this.feOffset = feOffset;
        filter.appendChild(feOffset);
        var feFlood = createNS('feFlood');
        feFlood.setAttribute('flood-color', '#00ff00');
        feFlood.setAttribute('flood-opacity', '1');
        feFlood.setAttribute('result', id + '_drop_shadow_3');
        this.feFlood = feFlood;
        filter.appendChild(feFlood);
        var feComposite = createNS('feComposite');
        feComposite.setAttribute('in', id + '_drop_shadow_3');
        feComposite.setAttribute('in2', id + '_drop_shadow_2');
        feComposite.setAttribute('operator', 'in');
        feComposite.setAttribute('result', id + '_drop_shadow_4');
        filter.appendChild(feComposite);
        var feMerge = this.createMergeNode(id, [id + '_drop_shadow_4', source]);
        filter.appendChild(feMerge); //
      }

      extendPrototype([SVGComposableEffect], SVGDropShadowEffect);

      SVGDropShadowEffect.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
          if (forceRender || this.filterManager.effectElements[4].p._mdf) {
            this.feGaussianBlur.setAttribute('stdDeviation', this.filterManager.effectElements[4].p.v / 4);
          }

          if (forceRender || this.filterManager.effectElements[0].p._mdf) {
            var col = this.filterManager.effectElements[0].p.v;
            this.feFlood.setAttribute('flood-color', rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
          }

          if (forceRender || this.filterManager.effectElements[1].p._mdf) {
            this.feFlood.setAttribute('flood-opacity', this.filterManager.effectElements[1].p.v / 255);
          }

          if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
            var distance = this.filterManager.effectElements[3].p.v;
            var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
            var x = distance * Math.cos(angle);
            var y = distance * Math.sin(angle);
            this.feOffset.setAttribute('dx', x);
            this.feOffset.setAttribute('dy', y);
          }
        }
      };

      var _svgMatteSymbols = [];

      function SVGMatte3Effect(filterElem, filterManager, elem) {
        this.initialized = false;
        this.filterManager = filterManager;
        this.filterElem = filterElem;
        this.elem = elem;
        elem.matteElement = createNS('g');
        elem.matteElement.appendChild(elem.layerElement);
        elem.matteElement.appendChild(elem.transformedElement);
        elem.baseElement = elem.matteElement;
      }

      SVGMatte3Effect.prototype.findSymbol = function (mask) {
        var i = 0;
        var len = _svgMatteSymbols.length;

        while (i < len) {
          if (_svgMatteSymbols[i] === mask) {
            return _svgMatteSymbols[i];
          }

          i += 1;
        }

        return null;
      };

      SVGMatte3Effect.prototype.replaceInParent = function (mask, symbolId) {
        var parentNode = mask.layerElement.parentNode;

        if (!parentNode) {
          return;
        }

        var children = parentNode.children;
        var i = 0;
        var len = children.length;

        while (i < len) {
          if (children[i] === mask.layerElement) {
            break;
          }

          i += 1;
        }

        var nextChild;

        if (i <= len - 2) {
          nextChild = children[i + 1];
        }

        var useElem = createNS('use');
        useElem.setAttribute('href', '#' + symbolId);

        if (nextChild) {
          parentNode.insertBefore(useElem, nextChild);
        } else {
          parentNode.appendChild(useElem);
        }
      };

      SVGMatte3Effect.prototype.setElementAsMask = function (elem, mask) {
        if (!this.findSymbol(mask)) {
          var symbolId = createElementID();
          var masker = createNS('mask');
          masker.setAttribute('id', mask.layerId);
          masker.setAttribute('mask-type', 'alpha');

          _svgMatteSymbols.push(mask);

          var defs = elem.globalData.defs;
          defs.appendChild(masker);
          var symbol = createNS('symbol');
          symbol.setAttribute('id', symbolId);
          this.replaceInParent(mask, symbolId);
          symbol.appendChild(mask.layerElement);
          defs.appendChild(symbol);
          var useElem = createNS('use');
          useElem.setAttribute('href', '#' + symbolId);
          masker.appendChild(useElem);
          mask.data.hd = false;
          mask.show();
        }

        elem.setMatte(mask.layerId);
      };

      SVGMatte3Effect.prototype.initialize = function () {
        var ind = this.filterManager.effectElements[0].p.v;
        var elements = this.elem.comp.elements;
        var i = 0;
        var len = elements.length;

        while (i < len) {
          if (elements[i] && elements[i].data.ind === ind) {
            this.setElementAsMask(this.elem, elements[i]);
          }

          i += 1;
        }

        this.initialized = true;
      };

      SVGMatte3Effect.prototype.renderFrame = function () {
        if (!this.initialized) {
          this.initialize();
        }
      };

      function SVGGaussianBlurEffect(filter, filterManager, elem, id) {
        // Outset the filter region by 100% on all sides to accommodate blur expansion.
        filter.setAttribute('x', '-100%');
        filter.setAttribute('y', '-100%');
        filter.setAttribute('width', '300%');
        filter.setAttribute('height', '300%');
        this.filterManager = filterManager;
        var feGaussianBlur = createNS('feGaussianBlur');
        feGaussianBlur.setAttribute('result', id);
        filter.appendChild(feGaussianBlur);
        this.feGaussianBlur = feGaussianBlur;
      }

      SVGGaussianBlurEffect.prototype.renderFrame = function (forceRender) {
        if (forceRender || this.filterManager._mdf) {
          // Empirical value, matching AE's blur appearance.
          var kBlurrinessToSigma = 0.3;
          var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma; // Dimensions mapping:
          //
          //   1 -> horizontal & vertical
          //   2 -> horizontal only
          //   3 -> vertical only
          //

          var dimensions = this.filterManager.effectElements[1].p.v;
          var sigmaX = dimensions == 3 ? 0 : sigma; // eslint-disable-line eqeqeq

          var sigmaY = dimensions == 2 ? 0 : sigma; // eslint-disable-line eqeqeq

          this.feGaussianBlur.setAttribute('stdDeviation', sigmaX + ' ' + sigmaY); // Repeat edges mapping:
          //
          //   0 -> off -> duplicate
          //   1 -> on  -> wrap

          var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? 'wrap' : 'duplicate'; // eslint-disable-line eqeqeq

          this.feGaussianBlur.setAttribute('edgeMode', edgeMode);
        }
      };

      registerRenderer('canvas', CanvasRenderer);
      registerRenderer('html', HybridRenderer);
      registerRenderer('svg', SVGRenderer); // Registering shape modifiers

      ShapeModifiers.registerModifier('tm', TrimModifier);
      ShapeModifiers.registerModifier('pb', PuckerAndBloatModifier);
      ShapeModifiers.registerModifier('rp', RepeaterModifier);
      ShapeModifiers.registerModifier('rd', RoundCornersModifier); // Registering expression plugin

      setExpressionsPlugin(Expressions);
      initialize$1();
      initialize(); // Registering svg effects

      registerEffect(20, SVGTintFilter, true);
      registerEffect(21, SVGFillFilter, true);
      registerEffect(22, SVGStrokeEffect, false);
      registerEffect(23, SVGTritoneFilter, true);
      registerEffect(24, SVGProLevelsFilter, true);
      registerEffect(25, SVGDropShadowEffect, true);
      registerEffect(28, SVGMatte3Effect, false);
      registerEffect(29, SVGGaussianBlurEffect, true);

      return lottie;

    }));
    });

    /* node_modules/@lottiefiles/svelte-lottie-player/src/components/ColorPicker.svelte generated by Svelte v3.48.0 */

    function create_fragment$p(ctx) {
    	let div7;
    	let div3;
    	let div0;
    	let strong0;
    	let t1;
    	let input0;
    	let t2;
    	let input1;
    	let t3;
    	let div1;
    	let strong1;
    	let t5;
    	let input2;
    	let t6;
    	let input3;
    	let t7;
    	let div2;
    	let strong2;
    	let t9;
    	let input4;
    	let t10;
    	let input5;
    	let t11;
    	let div6;
    	let div4;
    	let t12;
    	let div5;
    	let input6;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			div7 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			strong0 = element("strong");
    			strong0.textContent = "Red";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			input1 = element("input");
    			t3 = space();
    			div1 = element("div");
    			strong1 = element("strong");
    			strong1.textContent = "Green";
    			t5 = space();
    			input2 = element("input");
    			t6 = space();
    			input3 = element("input");
    			t7 = space();
    			div2 = element("div");
    			strong2 = element("strong");
    			strong2.textContent = "Blue";
    			t9 = space();
    			input4 = element("input");
    			t10 = space();
    			input5 = element("input");
    			t11 = space();
    			div6 = element("div");
    			div4 = element("div");
    			t12 = space();
    			div5 = element("div");
    			input6 = element("input");
    			attr(strong0, "class", "svelte-w9go3q");
    			attr(input0, "type", "range");
    			attr(input0, "min", "0");
    			attr(input0, "max", "255");
    			attr(input0, "class", "svelte-w9go3q");
    			attr(input1, "class", "text-input svelte-w9go3q");
    			attr(input1, "type", "number");
    			attr(div0, "class", "color-component svelte-w9go3q");
    			attr(strong1, "class", "svelte-w9go3q");
    			attr(input2, "type", "range");
    			attr(input2, "min", "0");
    			attr(input2, "max", "255");
    			attr(input2, "class", "svelte-w9go3q");
    			attr(input3, "class", "text-input svelte-w9go3q");
    			attr(input3, "type", "number");
    			attr(div1, "class", "color-component svelte-w9go3q");
    			attr(strong2, "class", "svelte-w9go3q");
    			attr(input4, "type", "range");
    			attr(input4, "min", "0");
    			attr(input4, "max", "255");
    			attr(input4, "class", "svelte-w9go3q");
    			attr(input5, "class", "text-input svelte-w9go3q");
    			attr(input5, "type", "number");
    			attr(div2, "class", "color-component svelte-w9go3q");
    			attr(div3, "class", "color-selectors svelte-w9go3q");
    			attr(div4, "class", "preview svelte-w9go3q");
    			set_style(div4, "background", /*rgb*/ ctx[4]);
    			attr(input6, "class", "text-input svelte-w9go3q");
    			attr(input6, "type", "text");
    			input6.value = /*hex*/ ctx[3];
    			attr(div6, "class", "color-preview svelte-w9go3q");
    			attr(div7, "class", "color-picker svelte-w9go3q");
    		},
    		m(target, anchor) {
    			insert(target, div7, anchor);
    			append(div7, div3);
    			append(div3, div0);
    			append(div0, strong0);
    			append(div0, t1);
    			append(div0, input0);
    			set_input_value(input0, /*red*/ ctx[0]);
    			append(div0, t2);
    			append(div0, input1);
    			set_input_value(input1, /*red*/ ctx[0]);
    			append(div3, t3);
    			append(div3, div1);
    			append(div1, strong1);
    			append(div1, t5);
    			append(div1, input2);
    			set_input_value(input2, /*green*/ ctx[1]);
    			append(div1, t6);
    			append(div1, input3);
    			set_input_value(input3, /*green*/ ctx[1]);
    			append(div3, t7);
    			append(div3, div2);
    			append(div2, strong2);
    			append(div2, t9);
    			append(div2, input4);
    			set_input_value(input4, /*blue*/ ctx[2]);
    			append(div2, t10);
    			append(div2, input5);
    			set_input_value(input5, /*blue*/ ctx[2]);
    			append(div7, t11);
    			append(div7, div6);
    			append(div6, div4);
    			append(div6, t12);
    			append(div6, div5);
    			append(div5, input6);

    			if (!mounted) {
    				dispose = [
    					listen(input0, "change", /*input0_change_input_handler*/ ctx[7]),
    					listen(input0, "input", /*input0_change_input_handler*/ ctx[7]),
    					listen(input1, "input", /*input1_input_handler*/ ctx[8]),
    					listen(input2, "change", /*input2_change_input_handler*/ ctx[9]),
    					listen(input2, "input", /*input2_change_input_handler*/ ctx[9]),
    					listen(input3, "input", /*input3_input_handler*/ ctx[10]),
    					listen(input4, "change", /*input4_change_input_handler*/ ctx[11]),
    					listen(input4, "input", /*input4_change_input_handler*/ ctx[11]),
    					listen(input5, "input", /*input5_input_handler*/ ctx[12]),
    					listen(input6, "change", /*change_handler*/ ctx[13])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*red*/ 1) {
    				set_input_value(input0, /*red*/ ctx[0]);
    			}

    			if (dirty & /*red*/ 1 && to_number(input1.value) !== /*red*/ ctx[0]) {
    				set_input_value(input1, /*red*/ ctx[0]);
    			}

    			if (dirty & /*green*/ 2) {
    				set_input_value(input2, /*green*/ ctx[1]);
    			}

    			if (dirty & /*green*/ 2 && to_number(input3.value) !== /*green*/ ctx[1]) {
    				set_input_value(input3, /*green*/ ctx[1]);
    			}

    			if (dirty & /*blue*/ 4) {
    				set_input_value(input4, /*blue*/ ctx[2]);
    			}

    			if (dirty & /*blue*/ 4 && to_number(input5.value) !== /*blue*/ ctx[2]) {
    				set_input_value(input5, /*blue*/ ctx[2]);
    			}

    			if (dirty & /*rgb*/ 16) {
    				set_style(div4, "background", /*rgb*/ ctx[4]);
    			}

    			if (dirty & /*hex*/ 8 && input6.value !== /*hex*/ ctx[3]) {
    				input6.value = /*hex*/ ctx[3];
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div7);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let rgb;
    	const dispatch = createEventDispatcher();
    	let { color } = $$props;
    	let red = 0;
    	let green = 0;
    	let blue = 0;
    	let hex = null;

    	const parseColor = input => {
    		if (typeof input !== "string") {
    			return;
    		}

    		let colorComponents = [];

    		if (input[0] === "#") {
    			colorComponents = input.length === 4
    			? [input.slice(1, 2), input.slice(2, 3), input.slice(3, 4)].map(n => parseInt(`${n}${n}`, 16))
    			: [input.slice(1, 3), input.slice(3, 5), input.slice(5, 7)].map(n => parseInt(n, 16));
    		} else if (input.startsWith("rgb")) {
    			colorComponents = input.match(/\d+/g).map(n => parseInt(n));
    		}

    		if (colorComponents.length) {
    			$$invalidate(0, red = colorComponents[0]);
    			$$invalidate(1, green = colorComponents[1]);
    			$$invalidate(2, blue = colorComponents[2]);
    		}
    	};

    	function input0_change_input_handler() {
    		red = to_number(this.value);
    		$$invalidate(0, red);
    	}

    	function input1_input_handler() {
    		red = to_number(this.value);
    		$$invalidate(0, red);
    	}

    	function input2_change_input_handler() {
    		green = to_number(this.value);
    		$$invalidate(1, green);
    	}

    	function input3_input_handler() {
    		green = to_number(this.value);
    		$$invalidate(1, green);
    	}

    	function input4_change_input_handler() {
    		blue = to_number(this.value);
    		$$invalidate(2, blue);
    	}

    	function input5_input_handler() {
    		blue = to_number(this.value);
    		$$invalidate(2, blue);
    	}

    	const change_handler = e => parseColor(e.target.value);

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(6, color = $$props.color);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*color*/ 64) {
    			parseColor(color);
    		}

    		if ($$self.$$.dirty & /*red, green, blue*/ 7) {
    			$$invalidate(3, hex = "#" + (red | 1 << 8).toString(16).slice(1) + (green | 1 << 8).toString(16).slice(1) + (blue | 1 << 8).toString(16).slice(1));
    		}

    		if ($$self.$$.dirty & /*red, green, blue*/ 7) {
    			$$invalidate(4, rgb = `rgb(${red}, ${green}, ${blue})`);
    		}

    		if ($$self.$$.dirty & /*hex, rgb*/ 24) {
    			{
    				dispatch("color", { hex, rgb });
    			}
    		}
    	};

    	return [
    		red,
    		green,
    		blue,
    		hex,
    		rgb,
    		parseColor,
    		color,
    		input0_change_input_handler,
    		input1_input_handler,
    		input2_change_input_handler,
    		input3_input_handler,
    		input4_change_input_handler,
    		input5_input_handler,
    		change_handler
    	];
    }

    class ColorPicker extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$n, create_fragment$p, safe_not_equal, { color: 6 });
    	}
    }

    /* node_modules/@lottiefiles/svelte-lottie-player/src/components/Info.svelte generated by Svelte v3.48.0 */

    function create_if_block_10$1(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Lottie Version";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*version*/ ctx[9]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*version*/ 512) set_data(t2, /*version*/ ctx[9]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (71:0) {#if numFrames}
    function create_if_block_9$1(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Frames";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*numFrames*/ ctx[6]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*numFrames*/ 64) set_data(t2, /*numFrames*/ ctx[6]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (78:0) {#if frameRate}
    function create_if_block_8$1(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Frame Rate";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*frameRate*/ ctx[1]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*frameRate*/ 2) set_data(t2, /*frameRate*/ ctx[1]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (85:0) {#if numLayers}
    function create_if_block_7$1(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Layers";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*numLayers*/ ctx[7]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*numLayers*/ 128) set_data(t2, /*numLayers*/ ctx[7]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (92:0) {#if numAssets}
    function create_if_block_6$1(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Assets";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*numAssets*/ ctx[4]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*numAssets*/ 16) set_data(t2, /*numAssets*/ ctx[4]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (99:0) {#if numFonts}
    function create_if_block_5$1(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Fonts";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*numFonts*/ ctx[5]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*numFonts*/ 32) set_data(t2, /*numFonts*/ ctx[5]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (106:0) {#if hasMeta}
    function create_if_block$5(ctx) {
    	let hr;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let if_block3_anchor;
    	let if_block0 = /*generator*/ ctx[2] && create_if_block_4$2(ctx);
    	let if_block1 = /*author*/ ctx[0] && create_if_block_3$4(ctx);
    	let if_block2 = /*keywords*/ ctx[3] && create_if_block_2$4(ctx);
    	let if_block3 = /*themeColor*/ ctx[8] && create_if_block_1$5(ctx);

    	return {
    		c() {
    			hr = element("hr");
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			if_block3_anchor = empty();
    		},
    		m(target, anchor) {
    			insert(target, hr, anchor);
    			insert(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert(target, t2, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert(target, t3, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert(target, if_block3_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (/*generator*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$2(ctx);
    					if_block0.c();
    					if_block0.m(t1.parentNode, t1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*author*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3$4(ctx);
    					if_block1.c();
    					if_block1.m(t2.parentNode, t2);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*keywords*/ ctx[3]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2$4(ctx);
    					if_block2.c();
    					if_block2.m(t3.parentNode, t3);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*themeColor*/ ctx[8]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_1$5(ctx);
    					if_block3.c();
    					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(hr);
    			if (detaching) detach(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach(t2);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach(t3);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach(if_block3_anchor);
    		}
    	};
    }

    // (109:2) {#if generator}
    function create_if_block_4$2(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Generator";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*generator*/ ctx[2]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*generator*/ 4) set_data(t2, /*generator*/ ctx[2]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (116:2) {#if author}
    function create_if_block_3$4(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Author";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*author*/ ctx[0]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*author*/ 1) set_data(t2, /*author*/ ctx[0]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (123:2) {#if keywords}
    function create_if_block_2$4(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Keywords";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*keywords*/ ctx[3]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*keywords*/ 8) set_data(t2, /*keywords*/ ctx[3]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (130:2) {#if themeColor}
    function create_if_block_1$5(ctx) {
    	let div;
    	let span0;
    	let t1;
    	let span1;
    	let t2;

    	return {
    		c() {
    			div = element("div");
    			span0 = element("span");
    			span0.textContent = "Theme Color";
    			t1 = space();
    			span1 = element("span");
    			t2 = text(/*themeColor*/ ctx[8]);
    			attr(span0, "class", "label svelte-1gm5gmt");
    			attr(span1, "class", "value svelte-1gm5gmt");
    			attr(div, "class", "property svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, span0);
    			append(div, t1);
    			append(div, span1);
    			append(span1, t2);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*themeColor*/ 256) set_data(t2, /*themeColor*/ ctx[8]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    function create_fragment$o(ctx) {
    	let h4;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;
    	let if_block6_anchor;
    	let if_block0 = /*version*/ ctx[9] && create_if_block_10$1(ctx);
    	let if_block1 = /*numFrames*/ ctx[6] && create_if_block_9$1(ctx);
    	let if_block2 = /*frameRate*/ ctx[1] && create_if_block_8$1(ctx);
    	let if_block3 = /*numLayers*/ ctx[7] && create_if_block_7$1(ctx);
    	let if_block4 = /*numAssets*/ ctx[4] && create_if_block_6$1(ctx);
    	let if_block5 = /*numFonts*/ ctx[5] && create_if_block_5$1(ctx);
    	let if_block6 = /*hasMeta*/ ctx[10] && create_if_block$5(ctx);

    	return {
    		c() {
    			h4 = element("h4");
    			h4.textContent = "Info";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			if (if_block3) if_block3.c();
    			t5 = space();
    			if (if_block4) if_block4.c();
    			t6 = space();
    			if (if_block5) if_block5.c();
    			t7 = space();
    			if (if_block6) if_block6.c();
    			if_block6_anchor = empty();
    			attr(h4, "class", "svelte-1gm5gmt");
    		},
    		m(target, anchor) {
    			insert(target, h4, anchor);
    			insert(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert(target, t4, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert(target, t5, anchor);
    			if (if_block4) if_block4.m(target, anchor);
    			insert(target, t6, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert(target, t7, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert(target, if_block6_anchor, anchor);
    		},
    		p(ctx, [dirty]) {
    			if (/*version*/ ctx[9]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_10$1(ctx);
    					if_block0.c();
    					if_block0.m(t2.parentNode, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*numFrames*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_9$1(ctx);
    					if_block1.c();
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*frameRate*/ ctx[1]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_8$1(ctx);
    					if_block2.c();
    					if_block2.m(t4.parentNode, t4);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*numLayers*/ ctx[7]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_7$1(ctx);
    					if_block3.c();
    					if_block3.m(t5.parentNode, t5);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*numAssets*/ ctx[4]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_6$1(ctx);
    					if_block4.c();
    					if_block4.m(t6.parentNode, t6);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*numFonts*/ ctx[5]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_5$1(ctx);
    					if_block5.c();
    					if_block5.m(t7.parentNode, t7);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*hasMeta*/ ctx[10]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block$5(ctx);
    					if_block6.c();
    					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(h4);
    			if (detaching) detach(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach(t3);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach(t4);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach(t5);
    			if (if_block4) if_block4.d(detaching);
    			if (detaching) detach(t6);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach(t7);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach(if_block6_anchor);
    		}
    	};
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { animationData } = $$props;
    	let author;
    	let frameRate;
    	let generator;
    	let keywords;
    	let numAssets;
    	let numFonts;
    	let numFrames;
    	let numLayers;
    	let themeColor;
    	let version;
    	let hasMeta = false;

    	$$self.$$set = $$props => {
    		if ('animationData' in $$props) $$invalidate(11, animationData = $$props.animationData);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*animationData*/ 2048) {
    			{
    				if (animationData) {
    					$$invalidate(1, frameRate = animationData.fr);
    					$$invalidate(4, numAssets = animationData.assets ? animationData.assets.length : 0);
    					$$invalidate(5, numFonts = animationData.fonts ? animationData.fonts.length : 0);
    					$$invalidate(6, numFrames = animationData.op - animationData.ip);
    					$$invalidate(7, numLayers = animationData.layers ? animationData.layers.length : 0);
    					$$invalidate(9, version = animationData.v);

    					if (animationData.meta) {
    						$$invalidate(10, hasMeta = true);
    						$$invalidate(0, author = animationData.meta.a);
    						$$invalidate(2, generator = animationData.meta.g);
    						$$invalidate(3, keywords = animationData.meta.k);
    						$$invalidate(8, themeColor = animationData.meta.tc);
    					}
    				}
    			}
    		}
    	};

    	return [
    		author,
    		frameRate,
    		generator,
    		keywords,
    		numAssets,
    		numFonts,
    		numFrames,
    		numLayers,
    		themeColor,
    		version,
    		hasMeta,
    		animationData
    	];
    }

    class Info extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$m, create_fragment$o, safe_not_equal, { animationData: 11 });
    	}
    }

    /* node_modules/@lottiefiles/svelte-lottie-player/src/components/Popover.svelte generated by Svelte v3.48.0 */
    const get_content_slot_changes = dirty => ({});
    const get_content_slot_context = ctx => ({});
    const get_target_slot_changes = dirty => ({});
    const get_target_slot_context = ctx => ({});

    function create_fragment$n(ctx) {
    	let div3;
    	let div0;
    	let t0;
    	let div2;
    	let t1;
    	let div1;
    	let current;
    	let mounted;
    	let dispose;
    	const target_slot_template = /*#slots*/ ctx[8].target;
    	const target_slot = create_slot(target_slot_template, ctx, /*$$scope*/ ctx[7], get_target_slot_context);
    	const content_slot_template = /*#slots*/ ctx[8].content;
    	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[7], get_content_slot_context);

    	return {
    		c() {
    			div3 = element("div");
    			div0 = element("div");
    			if (target_slot) target_slot.c();
    			t0 = space();
    			div2 = element("div");
    			if (content_slot) content_slot.c();
    			t1 = space();
    			div1 = element("div");
    			attr(div1, "class", "arrow svelte-cq7jp3");
    			set_style(div1, "border-color", /*color*/ ctx[0] + " transparent transparent transparent");
    			attr(div2, "class", "popover-content svelte-cq7jp3");
    			toggle_class(div2, "hidden", !/*_open*/ ctx[4]);
    			toggle_class(div2, "left-align", /*_alignment*/ ctx[3] !== -1);
    			toggle_class(div2, "right-align", /*_alignment*/ ctx[3] === -1);
    			attr(div3, "class", "popover svelte-cq7jp3");
    		},
    		m(target, anchor) {
    			insert(target, div3, anchor);
    			append(div3, div0);

    			if (target_slot) {
    				target_slot.m(div0, null);
    			}

    			/*div0_binding*/ ctx[12](div0);
    			append(div3, t0);
    			append(div3, div2);

    			if (content_slot) {
    				content_slot.m(div2, null);
    			}

    			append(div2, t1);
    			append(div2, div1);
    			/*div2_binding*/ ctx[13](div2);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(div3, "mousedown", /*mousedown_handler*/ ctx[9]),
    					listen(div3, "mouseover", /*show*/ ctx[5]),
    					listen(div3, "mouseout", /*hide*/ ctx[6]),
    					listen(div3, "mouseup", /*mouseup_handler*/ ctx[10]),
    					listen(div3, "mousewheel", /*mousewheel_handler*/ ctx[11])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (target_slot) {
    				if (target_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						target_slot,
    						target_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(target_slot_template, /*$$scope*/ ctx[7], dirty, get_target_slot_changes),
    						get_target_slot_context
    					);
    				}
    			}

    			if (content_slot) {
    				if (content_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						content_slot,
    						content_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[7], dirty, get_content_slot_changes),
    						get_content_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*color*/ 1) {
    				set_style(div1, "border-color", /*color*/ ctx[0] + " transparent transparent transparent");
    			}

    			if (dirty & /*_open*/ 16) {
    				toggle_class(div2, "hidden", !/*_open*/ ctx[4]);
    			}

    			if (dirty & /*_alignment*/ 8) {
    				toggle_class(div2, "left-align", /*_alignment*/ ctx[3] !== -1);
    			}

    			if (dirty & /*_alignment*/ 8) {
    				toggle_class(div2, "right-align", /*_alignment*/ ctx[3] === -1);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(target_slot, local);
    			transition_in(content_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(target_slot, local);
    			transition_out(content_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div3);
    			if (target_slot) target_slot.d(detaching);
    			/*div0_binding*/ ctx[12](null);
    			if (content_slot) content_slot.d(detaching);
    			/*div2_binding*/ ctx[13](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { color = "transparent" } = $$props;
    	let _triggerRef;
    	let _contentRef;
    	let _alignment;
    	let _open = true;

    	onMount(() => {
    		const triggerBounds = _triggerRef.getBoundingClientRect();
    		const contentBounds = _contentRef.getBoundingClientRect();

    		$$invalidate(3, _alignment = triggerBounds.left + contentBounds.width > window.innerWidth
    		? -1
    		: 0);

    		$$invalidate(2, _contentRef.style.bottom = triggerBounds.height + "px", _contentRef);

    		// Start with content box hidden
    		hide();
    	});

    	/**
     * Show content box
     */
    	const show = () => {
    		$$invalidate(4, _open = true);
    	};

    	/**
     * Hide content box
     */
    	const hide = () => {
    		$$invalidate(4, _open = false);
    	};

    	function mousedown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseup_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mousewheel_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			_triggerRef = $$value;
    			$$invalidate(1, _triggerRef);
    		});
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			_contentRef = $$value;
    			$$invalidate(2, _contentRef);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
    	};

    	return [
    		color,
    		_triggerRef,
    		_contentRef,
    		_alignment,
    		_open,
    		show,
    		hide,
    		$$scope,
    		slots,
    		mousedown_handler,
    		mouseup_handler,
    		mousewheel_handler,
    		div0_binding,
    		div2_binding
    	];
    }

    class Popover extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$l, create_fragment$n, safe_not_equal, { color: 0 });
    	}
    }

    const PlayerRender = {
      SVG: 'svg',
      Canvas: 'canvas'
    };

    // Define valid player states
    const PlayerState = {
      Loading: 'loading',
      Playing: 'playing',
      Paused: 'paused',
      Stopped: 'stopped',
      Frozen: 'frozen',
      Error: 'error',
    };

    // Define play modes
    const PlayMode = {
      Normal: 'normal',
      Bounce: 'bounce',
    };

    // Define player events
    const PlayerEvents = {
      Load: 'load',
      Error: 'error',
      Ready: 'ready',
      Play: 'play',
      Pause: 'pause',
      Stop: 'stop',
      Freeze: 'freeze',
      Loop: 'loop',
      Complete: 'complete',
      Frame: 'frame',
    };

    // Define controls layout options
    const ControlsLayoutOptions = [
      "previousFrame",
      "playpause",
      "stop",
      "nextFrame",
      "progress",
      "frame",
      "loop",
      "spacer",
      "background",
      "snapshot",
      "info",
      "zoom"
    ];

    /**
     * Parse a resource into a JSON object or a URL string
     */
    const parseSrc = src => {
      if (typeof src === 'object') {
        return src;
      }

      try {
        return JSON.parse(src);
      } catch (e) {
        // Try construct an absolute URL from the src URL
        const srcUrl = new URL(src, window.location.href);

        return srcUrl.toString();
      }
    };

    /**
     * Trigger the download of the given data URI as a file
     *
     * @param {string} dataUri
     * @param {string} name
     */
    const triggerDownload = (dataUri, filename) => {
      const element = document.createElement('a');
      element.href = dataUri;
      element.download = filename;
      document.body.appendChild(element);

      element.click();

      document.body.removeChild(element);
    };

    /* node_modules/@lottiefiles/svelte-lottie-player/src/components/Controls.svelte generated by Svelte v3.48.0 */

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[40] = list[i];
    	return child_ctx;
    }

    // (426:32) 
    function create_if_block_13(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			attr(div, "class", "spacer svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (419:39) 
    function create_if_block_12(ctx) {
    	let div;
    	let svg;
    	let path;
    	let rect;
    	let t;
    	let mounted;
    	let dispose;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			rect = svg_element("rect");
    			t = space();
    			attr(path, "d", "M22 4.5a1.4 1.4 0 00-2.1-1.2l-13 7.5a1.4 1.4 0 000 2.4l13 7.5a1.4 1.4 0 002.1-1.2z");
    			attr(rect, "height", "17.1");
    			attr(rect, "rx", "1.4");
    			attr(rect, "transform", "matrix(-1 0 0 1 7.7 3.4)");
    			attr(rect, "width", "5.7");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    			attr(div, "class", "btn svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, svg);
    			append(svg, path);
    			append(svg, rect);
    			append(div, t);

    			if (!mounted) {
    				dispose = listen(div, "click", /*oPreviousFrame*/ ctx[24]);
    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (409:35) 
    function create_if_block_11(ctx) {
    	let div;
    	let svg;
    	let path;
    	let rect;
    	let t;
    	let mounted;
    	let dispose;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			rect = svg_element("rect");
    			t = space();
    			attr(path, "d", "M2 19.513a1.429 1.429 0 0 0 2.148 1.234l12.88-7.513a1.429 1.429 0 0 0 0-2.468L4.147 3.253A1.429 1.429 0 0\n            0 2 4.487z");
    			attr(rect, "height", "17.143");
    			attr(rect, "rx", "1.429");
    			attr(rect, "transform", "matrix(1 0 0 -1 16.286 20.571)");
    			attr(rect, "width", "5.714");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    			attr(div, "class", "btn svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, svg);
    			append(svg, path);
    			append(svg, rect);
    			append(div, t);

    			if (!mounted) {
    				dispose = listen(div, "click", /*onNextFrame*/ ctx[23]);
    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (397:31) 
    function create_if_block_10(ctx) {
    	let div;
    	let input;
    	let t;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			div = element("div");
    			input = element("input");
    			t = space();
    			attr(input, "class", "frame-number svelte-9yox50");
    			attr(input, "type", "text");
    			attr(div, "class", " svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, input);
    			set_input_value(input, /*formattedFrame*/ ctx[15]);
    			append(div, t);

    			if (!mounted) {
    				dispose = [
    					listen(input, "input", /*input_input_handler*/ ctx[34]),
    					listen(input, "mouseout", /*mouseout_handler_1*/ ctx[35]),
    					listen(input, "mouseover", /*mouseover_handler_1*/ ctx[36]),
    					listen(input, "input", /*input_handler*/ ctx[37]),
    					listen(input, "mousewheel", /*mousewheel_handler_1*/ ctx[38])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*formattedFrame*/ 32768 && input.value !== /*formattedFrame*/ ctx[15]) {
    				set_input_value(input, /*formattedFrame*/ ctx[15]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (372:30) 
    function create_if_block_9(ctx) {
    	let div;
    	let popover;
    	let t;
    	let current;

    	popover = new Popover({
    			props: {
    				color: "#fff",
    				$$slots: {
    					content: [create_content_slot_2],
    					target: [create_target_slot_2]
    				},
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(popover.$$.fragment);
    			t = space();
    			attr(div, "class", " svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(popover, div, null);
    			append(div, t);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const popover_changes = {};

    			if (dirty[0] & /*animationData*/ 2 | dirty[1] & /*$$scope*/ 4096) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			popover.$set(popover_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(popover.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(popover.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(popover);
    		}
    	};
    }

    // (350:30) 
    function create_if_block_7(ctx) {
    	let div;
    	let t;
    	let mounted;
    	let dispose;

    	function select_block_type_2(ctx, dirty) {
    		if (/*isZoomed*/ ctx[14]) return create_if_block_8;
    		return create_else_block_1$3;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			div = element("div");
    			if_block.c();
    			t = space();
    			attr(div, "class", "btn svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			if_block.m(div, null);
    			append(div, t);

    			if (!mounted) {
    				dispose = listen(div, "click", /*onToggleZoom*/ ctx[22]);
    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, t);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (316:34) 
    function create_if_block_6(ctx) {
    	let div;
    	let popover;
    	let t;
    	let current;
    	let mounted;
    	let dispose;

    	popover = new Popover({
    			props: {
    				color: "#fff",
    				$$slots: {
    					content: [create_content_slot_1],
    					target: [create_target_slot_1]
    				},
    				$$scope: { ctx }
    			}
    		});

    	popover.$on("mousewheel", /*mousewheel_handler*/ ctx[31]);

    	return {
    		c() {
    			div = element("div");
    			create_component(popover.$$.fragment);
    			t = space();
    			attr(div, "class", " svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(popover, div, null);
    			append(div, t);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(div, "mouseout", /*mouseout_handler*/ ctx[32]),
    					listen(div, "mouseover", /*mouseover_handler*/ ctx[33])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			const popover_changes = {};

    			if (dirty[0] & /*snapshot, formattedFrame*/ 33792 | dirty[1] & /*$$scope*/ 4096) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			popover.$set(popover_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(popover.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(popover.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(popover);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (297:36) 
    function create_if_block_5(ctx) {
    	let div;
    	let popover;
    	let t;
    	let current;

    	popover = new Popover({
    			props: {
    				color: "#fff",
    				$$slots: {
    					content: [create_content_slot],
    					target: [create_target_slot]
    				},
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(popover.$$.fragment);
    			t = space();
    			attr(div, "class", " svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(popover, div, null);
    			append(div, t);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const popover_changes = {};

    			if (dirty[0] & /*background*/ 4 | dirty[1] & /*$$scope*/ 4096) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			popover.$set(popover_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(popover.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(popover.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(popover);
    		}
    	};
    }

    // (268:30) 
    function create_if_block_4$1(ctx) {
    	let div;
    	let svg;
    	let path0;
    	let path1;
    	let t;
    	let mounted;
    	let dispose;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t = space();
    			attr(path0, "d", "M12.5 16.8137h-.13v1.8939h4.9696c3.6455 0 6.6113-2.9658 6.6113-6.6116\n            0-3.64549-2.9658-6.61131-6.6113-6.61131-.5231 0-.947.42391-.947.94696 0 .52304.4239.94696.947.94696 2.6011 0\n            4.7174 2.11634 4.7174 4.71739 0 2.6014-2.1166 4.7177-4.7174 4.7177H12.5zM13.6025\n            5.61469v-.13H7.48137C3.83582 5.48469.87 8.45051.87 12.096c0 3.6509 3.17269 6.6117 6.81304 6.6117.52304 0\n            .94696-.424.94696-.947 0-.5231-.42392-.947-.94696-.947-2.60804 0-4.91907-2.1231-4.91907-4.7176 0-2.60115\n            2.11634-4.71744 4.7174-4.71744h6.12113V5.61469z");
    			attr(path0, "stroke", "#8795A1");
    			attr(path0, "stroke-width", ".26");
    			attr(path1, "d", "M11.1482\n            2.20355h0l-.001-.00116c-.3412-.40061-.9405-.44558-1.33668-.0996h-.00001c-.39526.34519-.43936.94795-.09898\n            1.34767l2.51487 3.03683-2.51894 3.06468c-.33872.40088-.29282 1.00363.10347\n            1.34723l.08517-.0982-.08517.0982c.17853.1549.39807.2308.61647.2308.2671 0 .5328-.114.72-.3347h0l.0011-.0014\n            3.0435-3.68655.0006-.00068c.3035-.35872.3025-.88754-.0019-1.24526l-3.0425-3.65786zM13.9453\n            21.7965h0l.001.0011c.3413.4006.9407.4456 1.337.0996h0c.3953-.3452.4395-.9479.099-1.3477l-2.5154-3.0368\n            2.5195-3.0647c.3388-.4008.2929-1.0036-.1035-1.3472l-.0852.0982.0852-.0982c-.1786-.1549-.3981-.2308-.6166-.2308-.2671\n            0-.5329.114-.7202.3347h0l-.0011.0014-3.0442\n            3.6865c-.0001.0003-.0003.0005-.0005.0007-.3036.3587-.3027.8876.0019 1.2453l3.0431 3.6579z");
    			attr(path1, "fill", "#8795A1");
    			attr(path1, "stroke", "#8795A1");
    			attr(path1, "stroke-width", ".26");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    			attr(div, "class", "btn svelte-9yox50");
    			toggle_class(div, "active", /*loop*/ ctx[7]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, svg);
    			append(svg, path0);
    			append(svg, path1);
    			append(div, t);

    			if (!mounted) {
    				dispose = listen(div, "click", function () {
    					if (is_function(/*toggleLooping*/ ctx[12])) /*toggleLooping*/ ctx[12].apply(this, arguments);
    				});

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);

    			if (dirty[0] & /*loop*/ 128) {
    				toggle_class(div, "active", /*loop*/ ctx[7]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (252:34) 
    function create_if_block_3$3(ctx) {
    	let input;
    	let input_style_value;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			input = element("input");
    			attr(input, "class", "progress svelte-9yox50");
    			attr(input, "type", "range");
    			attr(input, "min", "0");
    			attr(input, "step", "1");
    			attr(input, "max", "100");

    			attr(input, "style", input_style_value = `
          background-image: -webkit-gradient(linear, left top, right top, color-stop(${/*progress*/ ctx[0]}%, rgba(15, 204, 206, 0.4)), color-stop(${/*progress*/ ctx[0]}%, #DAE1E7));
          background-image: -moz-linear-gradient(left center, rgba(15, 204, 206, 0.4) 0%, rgba(15, 204, 206, 0.4) ${/*progress*/ ctx[0]}%, #DAE1E7 ${/*progress*/ ctx[0]}%, #DAE1E7 100%);
        `);
    		},
    		m(target, anchor) {
    			insert(target, input, anchor);
    			set_input_value(input, /*progress*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					listen(input, "change", /*input_change_input_handler*/ ctx[28]),
    					listen(input, "input", /*input_change_input_handler*/ ctx[28]),
    					listen(input, "input", /*onHandleSeekChange*/ ctx[20]),
    					listen(input, "mousedown", function () {
    						if (is_function(/*freeze*/ ctx[5])) /*freeze*/ ctx[5].apply(this, arguments);
    					}),
    					listen(input, "mouseup", function () {
    						if (is_function(/*play*/ ctx[8])) /*play*/ ctx[8].apply(this, arguments);
    					})
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*progress*/ 1 && input_style_value !== (input_style_value = `
          background-image: -webkit-gradient(linear, left top, right top, color-stop(${/*progress*/ ctx[0]}%, rgba(15, 204, 206, 0.4)), color-stop(${/*progress*/ ctx[0]}%, #DAE1E7));
          background-image: -moz-linear-gradient(left center, rgba(15, 204, 206, 0.4) 0%, rgba(15, 204, 206, 0.4) ${/*progress*/ ctx[0]}%, #DAE1E7 ${/*progress*/ ctx[0]}%, #DAE1E7 100%);
        `)) {
    				attr(input, "style", input_style_value);
    			}

    			if (dirty[0] & /*progress*/ 1) {
    				set_input_value(input, /*progress*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (243:30) 
    function create_if_block_2$3(ctx) {
    	let div;
    	let svg;
    	let path;
    	let t;
    	let mounted;
    	let dispose;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t = space();
    			attr(path, "d", "M2 3.667A1.67 1.67 0 0 1 3.667 2h16.666A1.67 1.67 0 0 1 22 3.667v16.666A1.67 1.67 0 0 1 20.333\n            22H3.667A1.67 1.67 0 0 1 2 20.333z");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    			attr(div, "class", "btn svelte-9yox50");
    			toggle_class(div, "active", /*isStopped*/ ctx[16]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, svg);
    			append(svg, path);
    			append(div, t);

    			if (!mounted) {
    				dispose = listen(div, "click", function () {
    					if (is_function(/*stop*/ ctx[11])) /*stop*/ ctx[11].apply(this, arguments);
    				});

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);

    			if (dirty[0] & /*isStopped*/ 65536) {
    				toggle_class(div, "active", /*isStopped*/ ctx[16]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (230:4) {#if item === 'playpause'}
    function create_if_block$4(ctx) {
    	let div;
    	let t;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (/*isPlaying*/ ctx[18]) return create_if_block_1$4;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			div = element("div");
    			if_block.c();
    			t = space();
    			attr(div, "class", "btn svelte-9yox50");
    			toggle_class(div, "active", /*isPlaying*/ ctx[18] || /*isPaused*/ ctx[17]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			if_block.m(div, null);
    			append(div, t);

    			if (!mounted) {
    				dispose = listen(div, "click", function () {
    					if (is_function(/*togglePlay*/ ctx[13])) /*togglePlay*/ ctx[13].apply(this, arguments);
    				});

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, t);
    				}
    			}

    			if (dirty[0] & /*isPlaying, isPaused*/ 393216) {
    				toggle_class(div, "active", /*isPlaying*/ ctx[18] || /*isPaused*/ ctx[17]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (375:10) 
    function create_target_slot_2(ctx) {
    	let div;
    	let svg;
    	let path0;
    	let path1;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr(path0, "fill-rule", "evenodd");
    			attr(path0, "clip-rule", "evenodd");
    			attr(path0, "d", "M3.15 0h17.7A3.12 3.12 0 0124 3.1v17.8c0 1.71-1.4 3.1-3.15 3.1H3.15A3.12 3.12 0 010 20.9V3.1C0 1.39\n                1.4 0 3.15 0zm0 2.05c-.6 0-1.07.47-1.07 1.05v17.8c0 .58.48 1.05 1.07 1.05h17.7c.6 0 1.07-.47\n                1.07-1.05V3.1c0-.58-.48-1.05-1.07-1.05H3.15z");
    			attr(path1, "fill-rule", "evenodd");
    			attr(path1, "clip-rule", "evenodd");
    			attr(path1, "d", "M12 10c.55 0 1 .42 1 .94v6.12c0 .52-.45.94-1 .94s-1-.42-1-.94v-6.12c0-.52.45-.94 1-.94zM12 6a1 1 0\n                011 1v.42a1 1 0 11-2 0V7a1 1 0 011-1z");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    			attr(div, "class", "btn svelte-9yox50");
    			attr(div, "slot", "target");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, svg);
    			append(svg, path0);
    			append(svg, path1);
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (392:10) 
    function create_content_slot_2(ctx) {
    	let div;
    	let info;
    	let current;

    	info = new Info({
    			props: { animationData: /*animationData*/ ctx[1] }
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(info.$$.fragment);
    			attr(div, "slot", "content");
    			attr(div, "class", "popover popover-info svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(info, div, null);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const info_changes = {};
    			if (dirty[0] & /*animationData*/ 2) info_changes.animationData = /*animationData*/ ctx[1];
    			info.$set(info_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(info.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(info.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(info);
    		}
    	};
    }

    // (361:8) {:else}
    function create_else_block_1$3(ctx) {
    	let svg;
    	let path;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr(path, "d", "M21 8a1 1 0 102 0V4a3 3 0 00-3-3h-4a1 1 0 100 2h4a1 1 0 011 1v4zM1 8a1 1 0 102 0V4a1 1 0 011-1h4a1 1 0\n              100-2H4a3 3 0 00-3 3v4zm15 15h4a3 3 0 003-3v-4a1 1 0 10-2 0v4a1 1 0 01-1 1h-4a1 1 0 100 2zM4 23h4a1 1 0\n              100-2H4a1 1 0 01-1-1v-4a1 1 0 10-2 0v4a3 3 0 003 3z");
    			attr(path, "stroke-width", ".2");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, path);
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    		}
    	};
    }

    // (352:8) {#if isZoomed}
    function create_if_block_8(ctx) {
    	let svg;
    	let path;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr(path, "d", "M7 22a1 1 0 102 0v-4a3 3 0 00-3-3H2a1 1 0 100 2h4a1 1 0 011 1v4zm8 0a1 1 0 102 0v-4a1 1 0 011-1h4a1 1 0\n              100-2h-4a3 3 0 00-3 3v4zM2 9h4a3 3 0 003-3V2a1 1 0 10-2 0v4a1 1 0 01-1 1H2a1 1 0 100 2zm16 0h4a1 1 0\n              100-2h-4a1 1 0 01-1-1V2a1 1 0 10-2 0v4a3 3 0 003 3z");
    			attr(path, "stroke-width", ".2");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, path);
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    		}
    	};
    }

    // (323:10) 
    function create_target_slot_1(ctx) {
    	let div;
    	let svg;
    	let path0;
    	let path1;
    	let circle;
    	let path2;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			circle = svg_element("circle");
    			path2 = svg_element("path");
    			attr(path0, "clip-rule", "evenodd");
    			attr(path0, "d", "M0 3.01A2.983 2.983 0 012.983.027H16.99a2.983 2.983 0 012.983 2.983v14.008a2.982 2.982 0 01-2.983\n                2.983H2.983A2.983 2.983 0 010 17.018zm2.983-.941a.941.941 0 00-.942.94v14.01c0\n                .52.422.94.942.94H16.99a.94.94 0 00.941-.94V3.008a.941.941 0 00-.94-.94H2.981z");
    			attr(path0, "fill-rule", "evenodd");
    			attr(path1, "d", "M12.229 7.945l-2.07 4.598-2.586-2.605-2.414 2.758v2.146h9.656V11.93z");
    			attr(circle, "cx", "7.444");
    			attr(circle, "cy", "6.513");
    			attr(circle, "r", "2.032");
    			attr(path2, "d", "M9.561 23.916h11.25a2.929 2.929 0 002.926-2.927V9.954a1.06 1.06 0 10-2.122 0v11.035a.805.805 0\n                01-.803.804H9.562a1.061 1.061 0 100 2.123z");
    			attr(path2, "stroke", "#8795a1");
    			attr(path2, "stroke-width", ".215");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    			attr(div, "class", "btn svelte-9yox50");
    			attr(div, "slot", "target");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, svg);
    			append(svg, path0);
    			append(svg, path1);
    			append(svg, circle);
    			append(svg, path2);
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (342:10) 
    function create_content_slot_1(ctx) {
    	let div;
    	let h5;
    	let t0;
    	let t1;
    	let t2;
    	let a0;
    	let t4;
    	let a1;
    	let t6;
    	let i;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			div = element("div");
    			h5 = element("h5");
    			t0 = text("Frame ");
    			t1 = text(/*formattedFrame*/ ctx[15]);
    			t2 = space();
    			a0 = element("a");
    			a0.textContent = "Download SVG";
    			t4 = space();
    			a1 = element("a");
    			a1.textContent = "Download PNG";
    			t6 = space();
    			i = element("i");
    			i.textContent = "Scroll with mousewheel to find exact frame";
    			attr(h5, "class", "svelte-9yox50");
    			attr(a0, "href", "#downloadsvg");
    			attr(a0, "class", "svelte-9yox50");
    			attr(a1, "href", "#downloadsvg");
    			attr(a1, "class", "svelte-9yox50");
    			attr(i, "class", "note svelte-9yox50");
    			attr(div, "slot", "content");
    			attr(div, "class", "popover popover-snapshot svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, h5);
    			append(h5, t0);
    			append(h5, t1);
    			append(div, t2);
    			append(div, a0);
    			append(div, t4);
    			append(div, a1);
    			append(div, t6);
    			append(div, i);

    			if (!mounted) {
    				dispose = [
    					listen(a0, "click", /*click_handler*/ ctx[29]),
    					listen(a1, "click", /*click_handler_1*/ ctx[30])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*formattedFrame*/ 32768) set_data(t1, /*formattedFrame*/ ctx[15]);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (300:10) 
    function create_target_slot(ctx) {
    	let div;
    	let svg;
    	let path;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr(path, "d", "M12 3.1L6.1 8.6a7.6 7.6 0 00-2.2 4 7.2 7.2 0 00.4 4.4 7.9 7.9 0 003 3.5 8.7 8.7 0 004.7 1.3c1.6 0\n                3.2-.5 4.6-1.3s2.4-2 3-3.5a7.2 7.2 0 00.5-4.5 7.6 7.6 0 00-2.2-4L12 3.2zM12 0l7.5 7a9.8 9.8 0 013 5.1\n                9.3 9.3 0 01-.6 5.8c-.9 1.8-2.2 3.3-4 4.4A11.2 11.2 0 0112 24a11.2 11.2 0\n                01-6-1.7c-1.7-1-3-2.6-3.9-4.4a9.3 9.3 0 01-.6-5.8c.4-2 1.5-3.7 3-5L12 0zM6 14h12c0 1.5-.7 3-1.8 4s-2.6\n                1.6-4.2 1.6S9 19 7.8 18s-1.7-2.5-1.7-4z");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    			attr(div, "class", "btn svelte-9yox50");
    			attr(div, "slot", "target");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, svg);
    			append(svg, path);
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (311:10) 
    function create_content_slot(ctx) {
    	let div;
    	let colorpicker;
    	let current;
    	colorpicker = new ColorPicker({ props: { color: /*background*/ ctx[2] } });
    	colorpicker.$on("color", /*onSelectBackground*/ ctx[21]);

    	return {
    		c() {
    			div = element("div");
    			create_component(colorpicker.$$.fragment);
    			attr(div, "slot", "content");
    			attr(div, "class", "popover popover-background svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(colorpicker, div, null);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const colorpicker_changes = {};
    			if (dirty[0] & /*background*/ 4) colorpicker_changes.color = /*background*/ ctx[2];
    			colorpicker.$set(colorpicker_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(colorpicker.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(colorpicker.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(colorpicker);
    		}
    	};
    }

    // (237:8) {:else}
    function create_else_block$3(ctx) {
    	let svg;
    	let path;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr(path, "d", "M2 3.4C2 1.9 3.5 1 4.8 1.8l16.5 9.6c1.2.7 1.2 2.5 0 3.2L4.8 24.2C3.5 25 2 24.1 2 22.6V3.4z");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, path);
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    		}
    	};
    }

    // (232:8) {#if isPlaying}
    function create_if_block_1$4(ctx) {
    	let svg;
    	let rect0;
    	let rect1;
    	let svg_levels = [/*ICON_SIZE*/ ctx[19]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			svg = svg_element("svg");
    			rect0 = svg_element("rect");
    			rect1 = svg_element("rect");
    			attr(rect0, "height", "22.9");
    			attr(rect0, "rx", "1.9");
    			attr(rect0, "width", "7.6");
    			attr(rect0, "x", "14");
    			attr(rect0, "y", ".5");
    			attr(rect1, "height", "22.9");
    			attr(rect1, "rx", "1.9");
    			attr(rect1, "width", "7.6");
    			attr(rect1, "x", "2");
    			attr(rect1, "y", ".5");
    			set_svg_attributes(svg, svg_data);
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, rect0);
    			append(svg, rect1);
    		},
    		p(ctx, dirty) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [/*ICON_SIZE*/ ctx[19]]));
    			toggle_class(svg, "svelte-9yox50", true);
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    		}
    	};
    }

    // (229:2) {#each layout as item}
    function create_each_block$3(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;

    	const if_block_creators = [
    		create_if_block$4,
    		create_if_block_2$3,
    		create_if_block_3$3,
    		create_if_block_4$1,
    		create_if_block_5,
    		create_if_block_6,
    		create_if_block_7,
    		create_if_block_9,
    		create_if_block_10,
    		create_if_block_11,
    		create_if_block_12,
    		create_if_block_13
    	];

    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*item*/ ctx[40] === 'playpause') return 0;
    		if (/*item*/ ctx[40] === 'stop') return 1;
    		if (/*item*/ ctx[40] === 'progress') return 2;
    		if (/*item*/ ctx[40] === 'loop') return 3;
    		if (/*item*/ ctx[40] === 'background') return 4;
    		if (/*item*/ ctx[40] === 'snapshot') return 5;
    		if (/*item*/ ctx[40] === 'zoom') return 6;
    		if (/*item*/ ctx[40] === 'info') return 7;
    		if (/*item*/ ctx[40] === 'frame') return 8;
    		if (/*item*/ ctx[40] === 'nextFrame') return 9;
    		if (/*item*/ ctx[40] === 'previousFrame') return 10;
    		if (/*item*/ ctx[40] === 'spacer') return 11;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function create_fragment$m(ctx) {
    	let div;
    	let current;
    	let each_value = /*layout*/ ctx[6];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "lottie-player-controls svelte-9yox50");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*isPlaying, isPaused, togglePlay, ICON_SIZE, layout, isStopped, stop, progress, onHandleSeekChange, freeze, play, loop, toggleLooping, background, onSelectBackground, currentState, seek, frame, snapshot, formattedFrame, onToggleZoom, isZoomed, animationData, onNextFrame, oPreviousFrame*/ 33554431) {
    				each_value = /*layout*/ ctx[6];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    function instance_1$1($$self, $$props, $$invalidate) {
    	let isPlaying;
    	let isPaused;
    	let isStopped;
    	let formattedFrame;

    	const ICON_SIZE = {
    		width: 14,
    		height: 14,
    		viewBox: '0 0 24 24'
    	};

    	// Create event dispatcher
    	const dispatch = createEventDispatcher();

    	let { animationData } = $$props;
    	let { background } = $$props;
    	let { currentState } = $$props;
    	let { frame } = $$props;
    	let { freeze } = $$props;
    	let { instance } = $$props;
    	let { layout = ControlsLayoutOptions } = $$props;
    	let { loop } = $$props;
    	let { play } = $$props;
    	let { progress } = $$props;
    	let { seek } = $$props;
    	let { snapshot } = $$props;
    	let { stop } = $$props;
    	let { toggleZoom } = $$props;
    	let { toggleLooping } = $$props;
    	let { togglePlay } = $$props;
    	let { totalFrames = 0 } = $$props;
    	let isZoomed = false;

    	const onHandleSeekChange = e => {
    		if (!instance || isNaN(e.target.value)) {
    			return;
    		}

    		const frame = e.target.value / 100 * totalFrames;
    		seek(frame);
    	};

    	const onSelectBackground = e => {
    		dispatch('background', { color: e.detail.hex });
    	};

    	const onToggleZoom = () => {
    		$$invalidate(14, isZoomed = !isZoomed);
    		toggleZoom();
    	};

    	const onNextFrame = () => {
    		const nextFrame = frame + 1;

    		if (nextFrame <= totalFrames) {
    			seek(nextFrame);
    		}
    	};

    	const oPreviousFrame = () => {
    		const prevFrame = frame - 1;

    		if (prevFrame >= 0) {
    			seek(prevFrame);
    		}
    	};

    	function input_change_input_handler() {
    		progress = to_number(this.value);
    		$$invalidate(0, progress);
    	}

    	const click_handler = () => snapshot(true);
    	const click_handler_1 = () => snapshot(true);
    	const mousewheel_handler = e => seek(frame + (e.deltaY > 0 ? -1 : 1));
    	const mouseout_handler = () => currentState === PlayerState.Frozen && play();
    	const mouseover_handler = () => currentState !== PlayerState.Paused && freeze();

    	function input_input_handler() {
    		formattedFrame = this.value;
    		($$invalidate(15, formattedFrame), $$invalidate(4, frame));
    	}

    	const mouseout_handler_1 = () => currentState === PlayerState.Frozen && play();
    	const mouseover_handler_1 = () => currentState !== PlayerState.Paused && freeze();
    	const input_handler = e => seek(e.target.value);
    	const mousewheel_handler_1 = e => seek(frame + (e.deltaY > 0 ? -1 : 1));

    	$$self.$$set = $$props => {
    		if ('animationData' in $$props) $$invalidate(1, animationData = $$props.animationData);
    		if ('background' in $$props) $$invalidate(2, background = $$props.background);
    		if ('currentState' in $$props) $$invalidate(3, currentState = $$props.currentState);
    		if ('frame' in $$props) $$invalidate(4, frame = $$props.frame);
    		if ('freeze' in $$props) $$invalidate(5, freeze = $$props.freeze);
    		if ('instance' in $$props) $$invalidate(25, instance = $$props.instance);
    		if ('layout' in $$props) $$invalidate(6, layout = $$props.layout);
    		if ('loop' in $$props) $$invalidate(7, loop = $$props.loop);
    		if ('play' in $$props) $$invalidate(8, play = $$props.play);
    		if ('progress' in $$props) $$invalidate(0, progress = $$props.progress);
    		if ('seek' in $$props) $$invalidate(9, seek = $$props.seek);
    		if ('snapshot' in $$props) $$invalidate(10, snapshot = $$props.snapshot);
    		if ('stop' in $$props) $$invalidate(11, stop = $$props.stop);
    		if ('toggleZoom' in $$props) $$invalidate(26, toggleZoom = $$props.toggleZoom);
    		if ('toggleLooping' in $$props) $$invalidate(12, toggleLooping = $$props.toggleLooping);
    		if ('togglePlay' in $$props) $$invalidate(13, togglePlay = $$props.togglePlay);
    		if ('totalFrames' in $$props) $$invalidate(27, totalFrames = $$props.totalFrames);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*currentState*/ 8) {
    			$$invalidate(18, isPlaying = currentState === PlayerState.Playing);
    		}

    		if ($$self.$$.dirty[0] & /*currentState*/ 8) {
    			$$invalidate(17, isPaused = currentState === PlayerState.Paused);
    		}

    		if ($$self.$$.dirty[0] & /*currentState*/ 8) {
    			$$invalidate(16, isStopped = currentState === PlayerState.Stopped);
    		}

    		if ($$self.$$.dirty[0] & /*frame*/ 16) {
    			$$invalidate(15, formattedFrame = Math.round(frame));
    		}
    	};

    	return [
    		progress,
    		animationData,
    		background,
    		currentState,
    		frame,
    		freeze,
    		layout,
    		loop,
    		play,
    		seek,
    		snapshot,
    		stop,
    		toggleLooping,
    		togglePlay,
    		isZoomed,
    		formattedFrame,
    		isStopped,
    		isPaused,
    		isPlaying,
    		ICON_SIZE,
    		onHandleSeekChange,
    		onSelectBackground,
    		onToggleZoom,
    		onNextFrame,
    		oPreviousFrame,
    		instance,
    		toggleZoom,
    		totalFrames,
    		input_change_input_handler,
    		click_handler,
    		click_handler_1,
    		mousewheel_handler,
    		mouseout_handler,
    		mouseover_handler,
    		input_input_handler,
    		mouseout_handler_1,
    		mouseover_handler_1,
    		input_handler,
    		mousewheel_handler_1
    	];
    }

    class Controls extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(
    			this,
    			options,
    			instance_1$1,
    			create_fragment$m,
    			safe_not_equal,
    			{
    				animationData: 1,
    				background: 2,
    				currentState: 3,
    				frame: 4,
    				freeze: 5,
    				instance: 25,
    				layout: 6,
    				loop: 7,
    				play: 8,
    				progress: 0,
    				seek: 9,
    				snapshot: 10,
    				stop: 11,
    				toggleZoom: 26,
    				toggleLooping: 12,
    				togglePlay: 13,
    				totalFrames: 27
    			},
    			null,
    			[-1, -1]
    		);
    	}
    }

    /* node_modules/@lottiefiles/svelte-lottie-player/src/components/LottiePlayer.svelte generated by Svelte v3.48.0 */

    function create_if_block_1$3(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");
    			div.textContent = "⚠️";
    			attr(div, "class", "lottie-player-error svelte-1aiskgp");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (563:4) {#if controls}
    function create_if_block$3(ctx) {
    	let controls_1;
    	let current;

    	controls_1 = new Controls({
    			props: {
    				layout: /*controlsLayout*/ ctx[3],
    				animationData: /*animationData*/ ctx[22],
    				background: /*background*/ ctx[1],
    				controls: /*controls*/ ctx[2],
    				currentState: /*currentState*/ ctx[28],
    				frame: /*frame*/ ctx[26],
    				freeze: /*freeze*/ ctx[11],
    				instance: /*instance*/ ctx[21],
    				loop: /*loop*/ ctx[0],
    				lottie,
    				pause: /*pause*/ ctx[9],
    				play: /*play*/ ctx[8],
    				progress: /*progress*/ ctx[27],
    				seek: /*seek*/ ctx[12],
    				setDirection: /*setDirection*/ ctx[16],
    				setSpeed: /*setSpeed*/ ctx[15],
    				setLooping: /*setLooping*/ ctx[14],
    				snapshot: /*snapshot*/ ctx[13],
    				src: /*src*/ ctx[5],
    				stop: /*stop*/ ctx[10],
    				toggleZoom: /*toggleZoom*/ ctx[20],
    				toggleLooping: /*toggleLooping*/ ctx[18],
    				togglePlay: /*togglePlay*/ ctx[17],
    				totalFrames: /*totalFrames*/ ctx[32]
    			}
    		});

    	controls_1.$on("background", /*background_handler*/ ctx[46]);

    	return {
    		c() {
    			create_component(controls_1.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(controls_1, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const controls_1_changes = {};
    			if (dirty[0] & /*controlsLayout*/ 8) controls_1_changes.layout = /*controlsLayout*/ ctx[3];
    			if (dirty[0] & /*animationData*/ 4194304) controls_1_changes.animationData = /*animationData*/ ctx[22];
    			if (dirty[0] & /*background*/ 2) controls_1_changes.background = /*background*/ ctx[1];
    			if (dirty[0] & /*controls*/ 4) controls_1_changes.controls = /*controls*/ ctx[2];
    			if (dirty[0] & /*currentState*/ 268435456) controls_1_changes.currentState = /*currentState*/ ctx[28];
    			if (dirty[0] & /*frame*/ 67108864) controls_1_changes.frame = /*frame*/ ctx[26];
    			if (dirty[0] & /*instance*/ 2097152) controls_1_changes.instance = /*instance*/ ctx[21];
    			if (dirty[0] & /*loop*/ 1) controls_1_changes.loop = /*loop*/ ctx[0];
    			if (dirty[0] & /*progress*/ 134217728) controls_1_changes.progress = /*progress*/ ctx[27];
    			if (dirty[0] & /*src*/ 32) controls_1_changes.src = /*src*/ ctx[5];
    			if (dirty[1] & /*totalFrames*/ 2) controls_1_changes.totalFrames = /*totalFrames*/ ctx[32];
    			controls_1.$set(controls_1_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(controls_1.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(controls_1.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(controls_1, detaching);
    		}
    	};
    }

    function create_fragment$l(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let t;
    	let div2_style_value;
    	let div2_resize_listener;
    	let current;
    	let if_block0 = /*currentState*/ ctx[28] === PlayerState.Error && create_if_block_1$3();
    	let if_block1 = /*controls*/ ctx[2] && create_if_block$3(ctx);

    	return {
    		c() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			set_style(div0, "background", /*background*/ ctx[1]);
    			attr(div0, "class", "svelte-1aiskgp");
    			toggle_class(div0, "animation", true);
    			attr(div1, "class", "lottie-player svelte-1aiskgp");
    			toggle_class(div1, "with-controls", /*controls*/ ctx[2]);
    			toggle_class(div1, "is-zoomed", /*isZoomed*/ ctx[29]);

    			attr(div2, "style", div2_style_value = "" + ((/*width*/ ctx[7] ? `width:${/*width*/ ctx[7]}px;` : '') + (/*height*/ ctx[4]
    			? `height:${/*height*/ ctx[4]}px;`
    			: '') + /*style*/ ctx[6]));

    			add_render_callback(() => /*div2_elementresize_handler*/ ctx[49].call(div2));
    		},
    		m(target, anchor) {
    			insert(target, div2, anchor);
    			append(div2, div1);
    			append(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			/*div0_binding*/ ctx[45](div0);
    			append(div1, t);
    			if (if_block1) if_block1.m(div1, null);
    			/*div1_binding*/ ctx[47](div1);
    			/*div2_binding*/ ctx[48](div2);
    			div2_resize_listener = add_resize_listener(div2, /*div2_elementresize_handler*/ ctx[49].bind(div2));
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (/*currentState*/ ctx[28] === PlayerState.Error) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_1$3();
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!current || dirty[0] & /*background*/ 2) {
    				set_style(div0, "background", /*background*/ ctx[1]);
    			}

    			if (/*controls*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*controls*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*controls*/ 4) {
    				toggle_class(div1, "with-controls", /*controls*/ ctx[2]);
    			}

    			if (dirty[0] & /*isZoomed*/ 536870912) {
    				toggle_class(div1, "is-zoomed", /*isZoomed*/ ctx[29]);
    			}

    			if (!current || dirty[0] & /*width, height, style*/ 208 && div2_style_value !== (div2_style_value = "" + ((/*width*/ ctx[7] ? `width:${/*width*/ ctx[7]}px;` : '') + (/*height*/ ctx[4]
    			? `height:${/*height*/ ctx[4]}px;`
    			: '') + /*style*/ ctx[6]))) {
    				attr(div2, "style", div2_style_value);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div2);
    			if (if_block0) if_block0.d();
    			/*div0_binding*/ ctx[45](null);
    			if (if_block1) if_block1.d();
    			/*div1_binding*/ ctx[47](null);
    			/*div2_binding*/ ctx[48](null);
    			div2_resize_listener();
    		}
    	};
    }

    function instance_1($$self, $$props, $$invalidate) {
    	let { autoplay = false } = $$props;
    	let { background } = $$props;
    	let { controls } = $$props;
    	let { controlsLayout } = $$props;
    	let { count = undefined } = $$props;
    	let { defaultFrame = 0 } = $$props;
    	let { direction = 1 } = $$props;
    	let { height } = $$props;
    	let { hover = false } = $$props;
    	let { loop = false } = $$props;
    	let { mode = PlayMode.Normal } = $$props;
    	let { onToggleZoom = undefined } = $$props;
    	let { renderer = PlayerRender.SVG } = $$props;
    	let { speed = 1 } = $$props;
    	let { src = "" } = $$props;
    	let { style = "" } = $$props;
    	let { width } = $$props;
    	let animationData;
    	let animationRef;
    	let playerRef;
    	let wrapperRef;
    	let instance;
    	let frame = 0;
    	let progress = 0;
    	let io;
    	let currentState = PlayerState.Loading;
    	let isZoomed = false;
    	let playerHeight;
    	let playerWidth;
    	let totalFrames;

    	/**
     * Handle visibility change events.
     */
    	const onVisibilityChange = () => {
    		if (document.hidden === true && currentState === PlayerState.Playing) {
    			freeze();
    		} else if (currentState === PlayerState.Frozen) {
    			play();
    		}
    	};

    	/**
     * Initialize everything on component mount.
     */
    	onMount(() => {
    		if ("IntersectionObserver" in window) {
    			io = new IntersectionObserver(entries => {
    					if (entries[0].isIntersecting) {
    						if (currentState === PlayerState.Frozen) {
    							play();
    						}
    					} else if (currentState === PlayerState.Playing) {
    						freeze();
    					}
    				});

    			io.observe(animationRef);
    		}

    		// Add listener for Visibility API's change event.
    		if (typeof document.hidden !== "undefined") {
    			document.addEventListener("visibilitychange", onVisibilityChange);
    		}

    		// Setup lottie player
    		if (src) {
    			load(src);
    		}
    	});

    	/**
     * Cleanup on component destroy.
     */
    	onDestroy(() => {
    		// Remove intersection observer for detecting component being out-of-view.
    		if (io) {
    			io.disconnect();
    			io = undefined;
    		}

    		// Remove the attached Visibility API's change event listener.
    		document.removeEventListener("visibilitychange", onVisibilityChange);
    	});

    	const load = srcValue => {
    		if (!animationRef) {
    			return;
    		}

    		// Clear previous animation, if any
    		if (instance) {
    			instance.destroy();
    		}

    		const options = {
    			container: animationRef,
    			loop,
    			autoplay,
    			renderer,
    			rendererSettings: {
    				preserveAspectRatio: "xMidYMid meet",
    				clearCanvas: true,
    				progressiveLoad: true,
    				hideOnTransparent: true
    			}
    		};

    		// Load the resource information
    		try {
    			const srcParsed = parseSrc(srcValue);
    			const srcAttrib = typeof srcParsed === "string" ? "path" : "animationData";

    			// Initialize lottie player and load animation
    			$$invalidate(21, instance = lottie.loadAnimation({ ...options, [srcAttrib]: srcParsed }));
    		} catch(err) {
    			$$invalidate(28, currentState = PlayerState.Error);
    			dispatchEvent(new CustomEvent(PlayerEvents.Error));
    		}

    		if (instance) {
    			// Calculate and save the current progress of the animation
    			instance.addEventListener("enterFrame", () => {
    				$$invalidate(26, frame = instance.currentFrame);
    				$$invalidate(27, progress = instance.currentFrame / instance.totalFrames * 100);

    				dispatchEvent(new CustomEvent(PlayerEvents.Frame,
    				{
    						detail: { frame: instance.currentFrame, progress }
    					}));
    			});

    			instance.addEventListener("complete", () => {
    				if (currentState !== PlayerState.Playing) {
    					dispatchEvent(new CustomEvent(PlayerEvents.Complete));
    					return;
    				}

    				if (!loop || count && _counter >= count) {
    					dispatchEvent(new CustomEvent(PlayerEvents.Complete));
    					return;
    				}

    				if (mode === PlayMode.Bounce) {
    					if (count) {
    						_counter += 0.5;
    					}

    					setTimeout(
    						() => {
    							dispatchEvent(new CustomEvent(PlayerEvents.Loop));

    							if (currentState === PlayerState.Playing) {
    								instance.setDirection(instance.playDirection * -1);
    								instance.play();
    							}
    						},
    						intermission
    					);
    				} else {
    					if (count) {
    						_counter += 1;
    					}

    					window.setTimeout(
    						() => {
    							dispatchEvent(new CustomEvent(PlayerEvents.Loop));

    							if (currentState === PlayerState.Playing) {
    								instance.stop();
    								instance.play();
    							}
    						},
    						intermission
    					);
    				}
    			});

    			// Handle animation data load complete
    			instance.addEventListener("data_ready", () => {
    				$$invalidate(22, animationData = instance.animationData);
    				$$invalidate(32, totalFrames = instance.totalFrames);
    			});

    			// Set error state when animation load fail event triggers
    			instance.addEventListener("data_failed", () => {
    				$$invalidate(28, currentState = PlayerState.Error);
    				dispatchEvent(new CustomEvent(PlayerEvents.Error));
    			});

    			// Set handlers to auto play animation on hover if enabled
    			animationRef.addEventListener("mouseenter", () => {
    				if (hover && currentState !== PlayerState.Playing) {
    					play();
    				}
    			});

    			animationRef.addEventListener("mouseleave", () => {
    				if (hover && currentState === PlayerState.Playing) {
    					stop();
    				}
    			});

    			// Set initial playback speed and direction
    			setSpeed(speed);

    			setDirection(direction);

    			// Start playing if autoplay is enabled
    			if (autoplay) {
    				play();
    			} else if (!isNaN(defaultFrame)) {
    				instance.goToAndStop(defaultFrame, true);
    			}
    		}
    	};

    	const getLottie = () => {
    		return instance;
    	};

    	const play = () => {
    		if (!instance) {
    			return;
    		}

    		$$invalidate(28, currentState = PlayerState.Playing);
    		instance.play();
    		dispatchEvent(new CustomEvent(PlayerEvents.Play));
    	};

    	const pause = () => {
    		if (!instance) {
    			return;
    		}

    		$$invalidate(28, currentState = PlayerState.Paused);
    		instance.pause();
    		dispatchEvent(new CustomEvent(PlayerEvents.Pause));
    	};

    	const stop = () => {
    		if (!instance) {
    			return;
    		}

    		$$invalidate(28, currentState = PlayerState.Stopped);
    		instance.stop();
    		dispatchEvent(new CustomEvent(PlayerEvents.Stop));
    	};

    	const freeze = () => {
    		if (!instance) {
    			return;
    		}

    		instance.pause();
    		$$invalidate(28, currentState = PlayerState.Frozen);
    		dispatchEvent(new CustomEvent(PlayerEvents.Freeze));
    	};

    	const resize = () => {
    		if (!instance) {
    			return;
    		}

    		instance.resize();
    	};

    	const seek = value => {
    		if (!instance) {
    			return;
    		}

    		// Extract frame number from either number or percentage value
    		const matches = value.toString().match(/^([0-9\.]+)(%?)$/);

    		if (!matches) {
    			return;
    		}

    		// Calculate and set the frame number
    		const resolvedFrame = matches[2] === "%"
    		? instance.totalFrames * Number(matches[1]) / 100
    		: Number(matches[1]);

    		// Send lottie player to the new frame
    		if (currentState === PlayerState.Playing) {
    			instance.goToAndPlay(resolvedFrame, true);
    		} else {
    			instance.goToAndStop(resolvedFrame, true);
    			instance.pause();
    		}
    	};

    	const snapshot = (download = true) => {
    		let data;

    		if (renderer === PlayerRender.SVG) {
    			// Get SVG element and serialize markup
    			const svgElement = animationRef.querySelector("svg");

    			const serializedSvg = new XMLSerializer().serializeToString(svgElement);
    			data = "data:image/svg+xml;charset=utf-8," + encodeURIComponent(serializedSvg);

    			// Trigger file download if needed
    			if (download) {
    				triggerDownload(data, `snapshot_${progress}.svg`);
    			}
    		} else if (renderer === PlayerRender.Canvas) {
    			const canvas = animationRef.querySelector("canvas");
    			data = canvas.toDataURL("image/png");

    			// Trigger file download if needed
    			if (download) {
    				triggerDownload(data, `snapshot_${progress}.png`);
    			}
    		}

    		return data;
    	};

    	const setLooping = value => {
    		if (instance) {
    			$$invalidate(0, loop = value);
    		}
    	};

    	const setSpeed = value => {
    		if (instance) {
    			$$invalidate(34, speed = value);
    		}
    	};

    	const setDirection = value => {
    		if (instance) {
    			$$invalidate(33, direction = value);
    		}
    	};

    	const togglePlay = () => {
    		return currentState === PlayerState.Playing ? pause() : play();
    	};

    	const toggleLooping = () => {
    		setLooping(!loop);
    	};

    	const setBackground = value => {
    		$$invalidate(1, background = value);
    	};

    	const toggleZoom = () => {
    		// Check if custom handler for zoom toggle is set
    		if (typeof onToggleZoom === "function") {
    			// Call the custom zoom toggle handler with current zoom status
    			// Set return value as the zoom status
    			$$invalidate(29, isZoomed = Boolean(onToggleZoom(isZoomed)));

    			return;
    		}

    		if (!isZoomed) {
    			$$invalidate(25, wrapperRef.style.height = playerHeight + "px", wrapperRef);
    			$$invalidate(25, wrapperRef.style.width = playerWidth + "px", wrapperRef);
    			document.body.appendChild(playerRef);
    		} else {
    			wrapperRef.appendChild(playerRef);
    			$$invalidate(25, wrapperRef.style.height = undefined, wrapperRef);
    			$$invalidate(25, wrapperRef.style.width = undefined, wrapperRef);
    		}

    		$$invalidate(29, isZoomed = !isZoomed);
    		setTimeout(() => resize(), 100);
    	};

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			animationRef = $$value;
    			$$invalidate(23, animationRef);
    		});
    	}

    	const background_handler = e => setBackground(e.detail.color);

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			playerRef = $$value;
    			$$invalidate(24, playerRef);
    		});
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			wrapperRef = $$value;
    			$$invalidate(25, wrapperRef);
    		});
    	}

    	function div2_elementresize_handler() {
    		playerHeight = this.clientHeight;
    		playerWidth = this.clientWidth;
    		$$invalidate(30, playerHeight);
    		$$invalidate(31, playerWidth);
    	}

    	$$self.$$set = $$props => {
    		if ('autoplay' in $$props) $$invalidate(35, autoplay = $$props.autoplay);
    		if ('background' in $$props) $$invalidate(1, background = $$props.background);
    		if ('controls' in $$props) $$invalidate(2, controls = $$props.controls);
    		if ('controlsLayout' in $$props) $$invalidate(3, controlsLayout = $$props.controlsLayout);
    		if ('count' in $$props) $$invalidate(36, count = $$props.count);
    		if ('defaultFrame' in $$props) $$invalidate(37, defaultFrame = $$props.defaultFrame);
    		if ('direction' in $$props) $$invalidate(33, direction = $$props.direction);
    		if ('height' in $$props) $$invalidate(4, height = $$props.height);
    		if ('hover' in $$props) $$invalidate(38, hover = $$props.hover);
    		if ('loop' in $$props) $$invalidate(0, loop = $$props.loop);
    		if ('mode' in $$props) $$invalidate(39, mode = $$props.mode);
    		if ('onToggleZoom' in $$props) $$invalidate(40, onToggleZoom = $$props.onToggleZoom);
    		if ('renderer' in $$props) $$invalidate(41, renderer = $$props.renderer);
    		if ('speed' in $$props) $$invalidate(34, speed = $$props.speed);
    		if ('src' in $$props) $$invalidate(5, src = $$props.src);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('width' in $$props) $$invalidate(7, width = $$props.width);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*src*/ 32) {
    			// Try load new animation when the src value changes
    			load(src);
    		}

    		if ($$self.$$.dirty[0] & /*instance, loop*/ 2097153) {
    			// Update the player with loop prop changes
    			{
    				if (instance) {
    					$$invalidate(21, instance.loop = loop, instance);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance*/ 2097152 | $$self.$$.dirty[1] & /*speed*/ 8) {
    			// Update the player with speed prop changes
    			{
    				if (instance) {
    					instance.setSpeed(speed);
    				}
    			}
    		}

    		if ($$self.$$.dirty[0] & /*instance*/ 2097152 | $$self.$$.dirty[1] & /*direction*/ 4) {
    			// Update the player with direction prop changes
    			{
    				if (instance) {
    					instance.setDirection(direction);
    				}
    			}
    		}
    	};

    	return [
    		loop,
    		background,
    		controls,
    		controlsLayout,
    		height,
    		src,
    		style,
    		width,
    		play,
    		pause,
    		stop,
    		freeze,
    		seek,
    		snapshot,
    		setLooping,
    		setSpeed,
    		setDirection,
    		togglePlay,
    		toggleLooping,
    		setBackground,
    		toggleZoom,
    		instance,
    		animationData,
    		animationRef,
    		playerRef,
    		wrapperRef,
    		frame,
    		progress,
    		currentState,
    		isZoomed,
    		playerHeight,
    		playerWidth,
    		totalFrames,
    		direction,
    		speed,
    		autoplay,
    		count,
    		defaultFrame,
    		hover,
    		mode,
    		onToggleZoom,
    		renderer,
    		load,
    		getLottie,
    		resize,
    		div0_binding,
    		background_handler,
    		div1_binding,
    		div2_binding,
    		div2_elementresize_handler
    	];
    }

    class LottiePlayer extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(
    			this,
    			options,
    			instance_1,
    			create_fragment$l,
    			safe_not_equal,
    			{
    				autoplay: 35,
    				background: 1,
    				controls: 2,
    				controlsLayout: 3,
    				count: 36,
    				defaultFrame: 37,
    				direction: 33,
    				height: 4,
    				hover: 38,
    				loop: 0,
    				mode: 39,
    				onToggleZoom: 40,
    				renderer: 41,
    				speed: 34,
    				src: 5,
    				style: 6,
    				width: 7,
    				load: 42,
    				getLottie: 43,
    				play: 8,
    				pause: 9,
    				stop: 10,
    				freeze: 11,
    				resize: 44,
    				seek: 12,
    				snapshot: 13,
    				setLooping: 14,
    				setSpeed: 15,
    				setDirection: 16,
    				togglePlay: 17,
    				toggleLooping: 18,
    				setBackground: 19,
    				toggleZoom: 20
    			},
    			null,
    			[-1, -1]
    		);
    	}

    	get load() {
    		return this.$$.ctx[42];
    	}

    	get getLottie() {
    		return this.$$.ctx[43];
    	}

    	get play() {
    		return this.$$.ctx[8];
    	}

    	get pause() {
    		return this.$$.ctx[9];
    	}

    	get stop() {
    		return this.$$.ctx[10];
    	}

    	get freeze() {
    		return this.$$.ctx[11];
    	}

    	get resize() {
    		return this.$$.ctx[44];
    	}

    	get seek() {
    		return this.$$.ctx[12];
    	}

    	get snapshot() {
    		return this.$$.ctx[13];
    	}

    	get setLooping() {
    		return this.$$.ctx[14];
    	}

    	get setSpeed() {
    		return this.$$.ctx[15];
    	}

    	get setDirection() {
    		return this.$$.ctx[16];
    	}

    	get togglePlay() {
    		return this.$$.ctx[17];
    	}

    	get toggleLooping() {
    		return this.$$.ctx[18];
    	}

    	get setBackground() {
    		return this.$$.ctx[19];
    	}

    	get toggleZoom() {
    		return this.$$.ctx[20];
    	}
    }

    const currentIcon = writable(null);
    const currentIconSet = writable(null);

    const isColor = (strColor) => {
        const s = new Option().style;
        s.color = strColor;
        return s.color !== '';
    };
    const wordToHex = {
        aliceblue: "#F0F8FF",
        antiquewhite: "#FAEBD7",
        aqua: "#00FFFF",
        aquamarine: "#7FFFD4",
        azure: "#F0FFFF",
        beige: "#F5F5DC",
        bisque: "#FFE4C4",
        black: "#000000",
        blanchedalmond: "#FFEBCD",
        blue: "#0000FF",
        blueviolet: "#8A2BE2",
        brown: "#A52A2A",
        burlywood: "#DEB887",
        cadetblue: "#5F9EA0",
        chartreuse: "#7FFF00",
        chocolate: "#D2691E",
        coral: "#FF7F50",
        cornflowerblue: "#6495ED",
        cornsilk: "#FFF8DC",
        crimson: "#DC143C",
        cyan: "#00FFFF",
        darkblue: "#00008B",
        darkcyan: "#008B8B",
        darkgoldenrod: "#B8860B",
        darkgray: "#A9A9A9",
        darkgrey: "#A9A9A9",
        darkgreen: "#006400",
        darkkhaki: "#BDB76B",
        darkmagenta: "#8B008B",
        darkolivegreen: "#556B2F",
        darkorange: "#FF8C00",
        darkorchid: "#9932CC",
        darkred: "#8B0000",
        darksalmon: "#E9967A",
        darkseagreen: "#8FBC8F",
        darkslateblue: "#483D8B",
        darkslategray: "#2F4F4F",
        darkslategrey: "#2F4F4F",
        darkturquoise: "#00CED1",
        darkviolet: "#9400D3",
        deeppink: "#FF1493",
        deepskyblue: "#00BFFF",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1E90FF",
        firebrick: "#B22222",
        floralwhite: "#FFFAF0",
        forestgreen: "#228B22",
        fuchsia: "#FF00FF",
        gainsboro: "#DCDCDC",
        ghostwhite: "#F8F8FF",
        gold: "#FFD700",
        goldenrod: "#DAA520",
        gray: "#808080",
        grey: "#808080",
        green: "#008000",
        greenyellow: "#ADFF2F",
        honeydew: "#F0FFF0",
        hotpink: "#FF69B4",
        indianred: "#CD5C5C",
        indigo: "#4B0082",
        ivory: "#FFFFF0",
        khaki: "#F0E68C",
        lavender: "#E6E6FA",
        lavenderblush: "#FFF0F5",
        lawngreen: "#7CFC00",
        lemonchiffon: "#FFFACD",
        lightblue: "#ADD8E6",
        lightcoral: "#F08080",
        lightcyan: "#E0FFFF",
        lightgoldenrodyellow: "#FAFAD2",
        lightgray: "#D3D3D3",
        lightgrey: "#D3D3D3",
        lightgreen: "#90EE90",
        lightpink: "#FFB6C1",
        lightsalmon: "#FFA07A",
        lightseagreen: "#20B2AA",
        lightskyblue: "#87CEFA",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#B0C4DE",
        lightyellow: "#FFFFE0",
        emerald: "#00FF00",
        limegreen: "#32CD32",
        linen: "#FAF0E6",
        magenta: "#FF00FF",
        maroon: "#800000",
        mediumaquamarine: "#66CDAA",
        mediumblue: "#0000CD",
        mediumorchid: "#BA55D3",
        mediumpurple: "#9370DB",
        mediumseagreen: "#3CB371",
        mediumslateblue: "#7B68EE",
        mediumspringgreen: "#00FA9A",
        mediumturquoise: "#48D1CC",
        mediumvioletred: "#C71585",
        midnightblue: "#191970",
        mintcream: "#F5FFFA",
        mistyrose: "#FFE4E1",
        moccasin: "#FFE4B5",
        navajowhite: "#FFDEAD",
        navy: "#000080",
        oldlace: "#FDF5E6",
        olive: "#808000",
        olivedrab: "#6B8E23",
        orange: "#FFA500",
        orangered: "#FF4500",
        orchid: "#DA70D6",
        palegoldenrod: "#EEE8AA",
        palegreen: "#98FB98",
        paleturquoise: "#AFEEEE",
        palevioletred: "#DB7093",
        papayawhip: "#FFEFD5",
        peachpuff: "#FFDAB9",
        peru: "#CD853F",
        pink: "#FFC0CB",
        plum: "#DDA0DD",
        powderblue: "#B0E0E6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#FF0000",
        rosybrown: "#BC8F8F",
        royalblue: "#4169E1",
        saddlebrown: "#8B4513",
        salmon: "#FA8072",
        sandybrown: "#F4A460",
        seagreen: "#2E8B57",
        seashell: "#FFF5EE",
        sienna: "#A0522D",
        silver: "#C0C0C0",
        skyblue: "#87CEEB",
        slateblue: "#6A5ACD",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#FFFAFA",
        springgreen: "#00FF7F",
        steelblue: "#4682B4",
        tan: "#D2B48C",
        teal: "#008080",
        thistle: "#D8BFD8",
        tomato: "#FF6347",
        turquoise: "#40E0D0",
        violet: "#EE82EE",
        wheat: "#F5DEB3",
        white: "#FFFFFF",
        whitesmoke: "#F5F5F5",
        yellow: "#FFFF00",
        yellowgreen: "#9ACD32",
    };
    const hexToWord = Object.fromEntries(Object.entries(wordToHex).map(([k, v]) => [v, k]));
    const colornameFromHex = (hex) => hexToWord[hex.toUpperCase()] || hex.toLowerCase();

    /* node_modules/svelte-copy-to-clipboard/src/CopyToClipboard.svelte generated by Svelte v3.48.0 */
    const get_default_slot_changes = dirty => ({});
    const get_default_slot_context = ctx => ({ copy: /*copy*/ ctx[0] });

    function create_fragment$k(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], get_default_slot_context);

    	return {
    		c() {
    			if (default_slot) default_slot.c();
    		},
    		m(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { text } = $$props;
    	const dispatch = createEventDispatcher();

    	const copy = () => {
    		navigator.clipboard.writeText(text).then(() => dispatch("copy", text), e => dispatch("fail"));
    	};

    	$$self.$$set = $$props => {
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	return [copy, text, $$scope, slots];
    }

    class CopyToClipboard extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { text: 1 });
    	}
    }

    /* src/IconList/docs/CodeSnippet.svelte generated by Svelte v3.48.0 */

    function create_fragment$j(ctx) {
    	let div;
    	let code;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	return {
    		c() {
    			div = element("div");
    			code = element("code");
    			if (default_slot) default_slot.c();
    			attr(code, "class", "whitespace-pre-wrap break-all");
    			attr(div, "class", "border-2 border-stone-600 py-4 px-5 my-4 overflow-scroll");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, code);

    			if (default_slot) {
    				default_slot.m(code, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class CodeSnippet extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});
    	}
    }

    /* src/IconList/docs/MoreInfo.svelte generated by Svelte v3.48.0 */

    function create_fragment$i(ctx) {
    	let div;
    	let icon;
    	let t;
    	let a;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "mdi:link-variant",
    				class: " flex-shrink-0",
    				width: "24",
    				height: "24"
    			}
    		});

    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			t = space();
    			a = element("a");
    			if (default_slot) default_slot.c();
    			attr(a, "href", /*link*/ ctx[0]);
    			attr(div, "class", "mt-10 flex items-center gap-2 tracking-wide ");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			append(div, t);
    			append(div, a);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*link*/ 1) {
    				attr(a, "href", /*link*/ ctx[0]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { link } = $$props;

    	$$self.$$set = $$props => {
    		if ('link' in $$props) $$invalidate(0, link = $$props.link);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	return [link, $$scope, slots];
    }

    class MoreInfo extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { link: 0 });
    	}
    }

    /* src/IconList/docs/Ember.svelte generated by Svelte v3.48.0 */

    function create_default_slot_4$a(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install addon:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (18:0) <CodeSnippet>
    function create_default_slot_3$b(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("npm install --save-dev @iconify/ember");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (19:0) <Paragraph>
    function create_default_slot_2$b(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (20:0) <CodeSnippet   >
    function create_default_slot_1$d(ctx) {
    	let t_value = `<IconifyIcon @icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
	? ` @color="${colornameFromHex(/*color*/ ctx[0])}"`
	: ""}${/*width*/ ctx[1] ? ` @width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
	? ` @height="${/*height*/ ctx[2]}"`
	: ""}${/*flipHorizontal*/ ctx[3] ? ` @hFlip={{true}}` : ""}${/*flipVertical*/ ctx[4] ? ` @vFlip={{true}}` : ""}${/*rotate*/ ctx[5]
	? ` @rotate={{${/*rotate*/ ctx[5] / 90}}}`
	: ""}${/*display*/ ctx[6] === "inline"
	? " @inline={{true}}"
	: ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<IconifyIcon @icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
			? ` @color="${colornameFromHex(/*color*/ ctx[0])}"`
			: ""}${/*width*/ ctx[1] ? ` @width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
			? ` @height="${/*height*/ ctx[2]}"`
			: ""}${/*flipHorizontal*/ ctx[3] ? ` @hFlip={{true}}` : ""}${/*flipVertical*/ ctx[4] ? ` @vFlip={{true}}` : ""}${/*rotate*/ ctx[5]
			? ` @rotate={{${/*rotate*/ ctx[5] / 90}}}`
			: ""}${/*display*/ ctx[6] === "inline"
			? " @inline={{true}}"
			: ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (29:0) <MoreInfo link="https://google.com">
    function create_default_slot$f(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More info about Ember component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$h(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$a] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$b] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$b] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$d] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				link: "https://google.com",
    				$$slots: { default: [create_default_slot$f] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(3, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(4, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(5, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(6, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
    	};

    	return [color, width, height, flipHorizontal, flipVertical, rotate, display, icon];
    }

    class Ember extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			color: 0,
    			width: 1,
    			height: 2,
    			flipHorizontal: 3,
    			flipVertical: 4,
    			rotate: 5,
    			display: 6,
    			icon: 7
    		});
    	}
    }

    /* src/IconList/docs/HTML/SVGFrameworks.svelte generated by Svelte v3.48.0 */

    function create_default_slot_4$9(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Iconify SVG framework makes using icons as easy as icon fonts. To use\n  \"13-plus in HTML, add this code to the document:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (22:0) <CodeSnippet   >
    function create_default_slot_3$a(ctx) {
    	let t_value = `<span class="iconify${/*display*/ ctx[6] === "inline" ? "-inline" : ""}" data-icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
	? ` style="color:${colornameFromHex(/*color*/ ctx[0])}`
	: ""}${/*width*/ ctx[1]
	? ` data-width="${/*width*/ ctx[1]}"`
	: ""}${/*height*/ ctx[2]
	? ` data-height="${/*height*/ ctx[2]}"`
	: ""}${/*flipHorizontal*/ ctx[3] && /*flipVertical*/ ctx[4]
	? ' data-flip="horizontal,vertical"'
	: `${/*flipHorizontal*/ ctx[3]
		? ' data-flip="horizontal'
		: ""}${/*flipVertical*/ ctx[4] ? ' data-flip="vertical"' : ""}`}${/*rotate*/ ctx[5]
	? ` data-rotate="${/*rotate*/ ctx[5]}deg"`
	: ""}></span>` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*display, icon, color, width, height, flipHorizontal, flipVertical, rotate*/ 255 && t_value !== (t_value = `<span class="iconify${/*display*/ ctx[6] === "inline" ? "-inline" : ""}" data-icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
			? ` style="color:${colornameFromHex(/*color*/ ctx[0])}`
			: ""}${/*width*/ ctx[1]
			? ` data-width="${/*width*/ ctx[1]}"`
			: ""}${/*height*/ ctx[2]
			? ` data-height="${/*height*/ ctx[2]}"`
			: ""}${/*flipHorizontal*/ ctx[3] && /*flipVertical*/ ctx[4]
			? ' data-flip="horizontal,vertical"'
			: `${/*flipHorizontal*/ ctx[3]
				? ' data-flip="horizontal'
				: ""}${/*flipVertical*/ ctx[4] ? ' data-flip="vertical"' : ""}`}${/*rotate*/ ctx[5]
			? ` data-rotate="${/*rotate*/ ctx[5]}deg"`
			: ""}></span>` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (37:0) <Paragraph>
    function create_default_slot_2$a(ctx) {
    	let t0;
    	let br;
    	let t1;

    	return {
    		c() {
    			t0 = text("Iconify SVG framework will load icon data from Iconify API and replace that\n  placeholder with SVG.\n  ");
    			br = element("br");
    			t1 = text("\n  Make sure you import Iconify SVG framework:");
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, br, anchor);
    			insert(target, t1, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(br);
    			if (detaching) detach(t1);
    		}
    	};
    }

    // (43:0) <CodeSnippet   >
    function create_default_slot_1$c(ctx) {
    	let t_value = '<script src="https://code.iconify.design/2/2.1.0/iconify.min.js" ✂prettier:content✂="">{}</script>' + "";
    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (46:0) <MoreInfo>
    function create_default_slot$e(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about Iconify SVG framework.");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$g(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$9] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$a] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$a] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$c] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				$$slots: { default: [create_default_slot$e] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope, display, icon, color, width, height, flipHorizontal, flipVertical, rotate*/ 511) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(3, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(4, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(5, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(6, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
    	};

    	return [color, width, height, flipHorizontal, flipVertical, rotate, display, icon];
    }

    class SVGFrameworks extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {
    			color: 0,
    			width: 1,
    			height: 2,
    			flipHorizontal: 3,
    			flipVertical: 4,
    			rotate: 5,
    			display: 6,
    			icon: 7
    		});
    	}
    }

    /* src/IconList/docs/HTML/CSS.svelte generated by Svelte v3.48.0 */

    function create_default_slot_3$9(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Add code below to your stylesheet to use icon as background image or as pseudo\n  element's content:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (53:0) <CodeSnippet   >
    function create_default_slot_2$9(ctx) {
    	let t0;
    	let t1;
    	let t2;

    	return {
    		c() {
    			t0 = text("background: url('");
    			t1 = text(/*urlString*/ ctx[0]);
    			t2 = text("') no-repeat center center / contain;");
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    			insert(target, t2, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*urlString*/ 1) set_data(t1, /*urlString*/ ctx[0]);
    		},
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    			if (detaching) detach(t2);
    		}
    	};
    }

    // (56:0) <CodeSnippet   >
    function create_default_slot_1$b(ctx) {
    	let t0;
    	let t1;
    	let t2;

    	return {
    		c() {
    			t0 = text("content: url('");
    			t1 = text(/*urlString*/ ctx[0]);
    			t2 = text("') no-repeat center center / contain;");
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    			insert(target, t2, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*urlString*/ 1) set_data(t1, /*urlString*/ ctx[0]);
    		},
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    			if (detaching) detach(t2);
    		}
    	};
    }

    // (60:0) <MoreInfo link="http://www.iconify.design">
    function create_default_slot$d(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More code examples");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$f(ctx) {
    	let paragraph;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let codesnippet1;
    	let t2;
    	let moreinfo;
    	let current;

    	paragraph = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_3$9] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_2$9] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$b] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				link: "http://www.iconify.design",
    				$$slots: { default: [create_default_slot$d] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(codesnippet1.$$.fragment);
    			t2 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				paragraph_changes.$$scope = { dirty, ctx };
    			}

    			paragraph.$set(paragraph_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope, urlString*/ 1025) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope, urlString*/ 1025) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 1024) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { icon } = $$props;
    	const baseURL = `https://api.iconify.design/${icon.split(":")[0]}/${icon.split(":")[1]}.svg`;
    	let url = new URL(baseURL);
    	let urlString = url.toString();

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(4, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(5, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*color, width, height, rotate, flipHorizontal, flipVertical*/ 126) {
    			(() => {
    				isColor(color)
    				? url.searchParams.set("color", colornameFromHex(color))
    				: url.searchParams.delete("color");

    				width
    				? url.searchParams.set("width", width)
    				: url.searchParams.delete("width");

    				height
    				? url.searchParams.set("height", height)
    				: url.searchParams.delete("height");

    				rotate
    				? url.searchParams.set("rotate", `${rotate}deg`)
    				: url.searchParams.delete("rotate");

    				if (!(flipHorizontal || flipVertical)) {
    					url.searchParams.delete("flip");
    				} else if (flipHorizontal && flipVertical) {
    					url.searchParams.set("flip", "vertical,horizontal");
    				} else if (flipVertical) {
    					url.searchParams.set("flip", "vertical");
    				} else {
    					url.searchParams.set("flip", "horizontal");
    				}

    				$$invalidate(0, urlString = url.toString());
    			})();
    		}
    	};

    	return [urlString, color, width, height, flipHorizontal, flipVertical, rotate, icon];
    }

    class CSS extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
    			color: 1,
    			width: 2,
    			height: 3,
    			flipHorizontal: 4,
    			flipVertical: 5,
    			rotate: 6,
    			icon: 7
    		});
    	}
    }

    /* src/IconList/docs/React/React.svelte generated by Svelte v3.48.0 */

    function create_default_slot_6$7(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (18:0) <CodeSnippet>
    function create_default_slot_5$7(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("npm install --save-dev @iconify/react");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (19:0) <Paragraph>
    function create_default_slot_4$8(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Import component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (20:0) <CodeSnippet>
    function create_default_slot_3$8(ctx) {
    	let t0;
    	let t1_value = `{ Icon }` + "";
    	let t1;
    	let t2;

    	return {
    		c() {
    			t0 = text("import ");
    			t1 = text(t1_value);
    			t2 = text(" from '@iconify/react';");
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    			insert(target, t2, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    			if (detaching) detach(t2);
    		}
    	};
    }

    // (21:0) <Paragraph>
    function create_default_slot_2$8(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (22:0) <CodeSnippet   >
    function create_default_slot_1$a(ctx) {
    	let t_value = `<Icon icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
	? ` color="${colornameFromHex(/*color*/ ctx[0])}"`
	: ""}${/*width*/ ctx[1] ? ` width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
	? ` height="${/*height*/ ctx[2]}"`
	: ""}${/*flipHorizontal*/ ctx[3] ? ` hFlip={true}` : ""}${/*flipVertical*/ ctx[4] ? ` vFlip={true}` : ""}${/*rotate*/ ctx[5]
	? ` rotate={${/*rotate*/ ctx[5] / 90}}`
	: ""}${/*display*/ ctx[6] === "inline" ? " inline={true}" : ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<Icon icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
			? ` color="${colornameFromHex(/*color*/ ctx[0])}"`
			: ""}${/*width*/ ctx[1] ? ` width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
			? ` height="${/*height*/ ctx[2]}"`
			: ""}${/*flipHorizontal*/ ctx[3] ? ` hFlip={true}` : ""}${/*flipVertical*/ ctx[4] ? ` vFlip={true}` : ""}${/*rotate*/ ctx[5]
			? ` rotate={${/*rotate*/ ctx[5] / 90}}`
			: ""}${/*display*/ ctx[6] === "inline" ? " inline={true}" : ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (32:0) <MoreInfo link="https://iconify.design"   >
    function create_default_slot$c(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about React component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$e(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let paragraph2;
    	let t4;
    	let codesnippet2;
    	let t5;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_6$7] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_5$7] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$8] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$8] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$8] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet2 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$a] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				link: "https://iconify.design",
    				$$slots: { default: [create_default_slot$c] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(paragraph2.$$.fragment);
    			t4 = space();
    			create_component(codesnippet2.$$.fragment);
    			t5 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(paragraph2, target, anchor);
    			insert(target, t4, anchor);
    			mount_component(codesnippet2, target, anchor);
    			insert(target, t5, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const codesnippet2_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet2_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet2.$set(codesnippet2_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(codesnippet2.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(codesnippet2.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(paragraph2, detaching);
    			if (detaching) detach(t4);
    			destroy_component(codesnippet2, detaching);
    			if (detaching) detach(t5);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(3, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(4, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(5, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(6, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
    	};

    	return [color, width, height, flipHorizontal, flipVertical, rotate, display, icon];
    }

    class React extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			color: 0,
    			width: 1,
    			height: 2,
    			flipHorizontal: 3,
    			flipVertical: 4,
    			rotate: 5,
    			display: 6,
    			icon: 7
    		});
    	}
    }

    /* src/IconList/docs/React/ReactOffline.svelte generated by Svelte v3.48.0 */

    function create_default_slot_6$6(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install component and icon set:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (26:0) <CodeSnippet   >
    function create_default_slot_5$6(ctx) {
    	let t0;
    	let t1_value = /*icon*/ ctx[0]?.split(":")[0] + "";
    	let t1;

    	return {
    		c() {
    			t0 = text("npm install --save-dev @iconify/react @iconify/icons-");
    			t1 = text(t1_value);
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t1_value !== (t1_value = /*icon*/ ctx[0]?.split(":")[0] + "")) set_data(t1, t1_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    		}
    	};
    }

    // (31:0) <Paragraph>
    function create_default_slot_4$7(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Import component and icon data:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (32:0) <CodeSnippet>
    function create_default_slot_3$7(ctx) {
    	let t0;
    	let t1_value = `{ Icon }` + "";
    	let t1;
    	let t2;
    	let t3_value = /*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func$3).join("") + "";
    	let t3;
    	let t4;
    	let t5_value = /*icon*/ ctx[0]?.split(":")[0] + "";
    	let t5;
    	let t6;
    	let t7_value = /*icon*/ ctx[0]?.split(":")[1] + "";
    	let t7;
    	let t8;

    	return {
    		c() {
    			t0 = text("import ");
    			t1 = text(t1_value);
    			t2 = text(" from '@iconify/react'; import icon");
    			t3 = text(t3_value);
    			t4 = text(" from '@iconify/icons-");
    			t5 = text(t5_value);
    			t6 = text("/");
    			t7 = text(t7_value);
    			t8 = text("';");
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    			insert(target, t2, anchor);
    			insert(target, t3, anchor);
    			insert(target, t4, anchor);
    			insert(target, t5, anchor);
    			insert(target, t6, anchor);
    			insert(target, t7, anchor);
    			insert(target, t8, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t3_value !== (t3_value = /*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func$3).join("") + "")) set_data(t3, t3_value);
    			if (dirty & /*icon*/ 1 && t5_value !== (t5_value = /*icon*/ ctx[0]?.split(":")[0] + "")) set_data(t5, t5_value);
    			if (dirty & /*icon*/ 1 && t7_value !== (t7_value = /*icon*/ ctx[0]?.split(":")[1] + "")) set_data(t7, t7_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    			if (detaching) detach(t2);
    			if (detaching) detach(t3);
    			if (detaching) detach(t4);
    			if (detaching) detach(t5);
    			if (detaching) detach(t6);
    			if (detaching) detach(t7);
    			if (detaching) detach(t8);
    		}
    	};
    }

    // (41:0) <Paragraph>
    function create_default_slot_2$7(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (42:0) <CodeSnippet   >
    function create_default_slot_1$9(ctx) {
    	let t_value = `<Icon icon={icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_1$3).join("")}}${isColor(/*color*/ ctx[1])
	? ` color="${colornameFromHex(/*color*/ ctx[1])}"`
	: ""}${/*width*/ ctx[2] ? ` width="${/*width*/ ctx[2]}"` : ""}${/*height*/ ctx[3]
	? ` height="${/*height*/ ctx[3]}"`
	: ""}${/*flipHorizontal*/ ctx[4] ? ` hFlip={true}` : ""}${/*flipVertical*/ ctx[5] ? ` vFlip={true}` : ""}${/*rotate*/ ctx[6]
	? ` rotate={${/*rotate*/ ctx[6] / 90}}`
	: ""}${/*display*/ ctx[7] === "inline" ? " inline={true}" : ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<Icon icon={icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_1$3).join("")}}${isColor(/*color*/ ctx[1])
			? ` color="${colornameFromHex(/*color*/ ctx[1])}"`
			: ""}${/*width*/ ctx[2] ? ` width="${/*width*/ ctx[2]}"` : ""}${/*height*/ ctx[3]
			? ` height="${/*height*/ ctx[3]}"`
			: ""}${/*flipHorizontal*/ ctx[4] ? ` hFlip={true}` : ""}${/*flipVertical*/ ctx[5] ? ` vFlip={true}` : ""}${/*rotate*/ ctx[6]
			? ` rotate={${/*rotate*/ ctx[6] / 90}}`
			: ""}${/*display*/ ctx[7] === "inline" ? " inline={true}" : ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (56:0) <MoreInfo link="https://iconify.design"   >
    function create_default_slot$b(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about React component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$d(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let paragraph2;
    	let t4;
    	let codesnippet2;
    	let t5;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_6$6] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_5$6] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$7] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$7] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$7] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet2 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$9] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				link: "https://iconify.design",
    				$$slots: { default: [create_default_slot$b] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(paragraph2.$$.fragment);
    			t4 = space();
    			create_component(codesnippet2.$$.fragment);
    			t5 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(paragraph2, target, anchor);
    			insert(target, t4, anchor);
    			mount_component(codesnippet2, target, anchor);
    			insert(target, t5, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const codesnippet2_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet2_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet2.$set(codesnippet2_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(codesnippet2.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(codesnippet2.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(paragraph2, detaching);
    			if (detaching) detach(t4);
    			destroy_component(codesnippet2, detaching);
    			if (detaching) detach(t5);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    const func$3 = e => e.toProperCase();
    const func_1$3 = e => e.toProperCase();

    function instance$d($$self, $$props, $$invalidate) {
    	String.prototype.toProperCase = function () {
    		return this.replace(/\w\S*/g, function (txt) {
    			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    		});
    	};

    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;
    	icon = icon || "";

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(4, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(5, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(7, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    	};

    	return [icon, color, width, height, flipHorizontal, flipVertical, rotate, display];
    }

    class ReactOffline extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			color: 1,
    			width: 2,
    			height: 3,
    			flipHorizontal: 4,
    			flipVertical: 5,
    			rotate: 6,
    			display: 7,
    			icon: 0
    		});
    	}
    }

    /* src/IconList/docs/Svelte/Svelte.svelte generated by Svelte v3.48.0 */

    function create_default_slot_6$5(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (18:0) <CodeSnippet>
    function create_default_slot_5$5(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("npm install --save-dev @iconify/svelte");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (19:0) <Paragraph>
    function create_default_slot_4$6(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Import component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (20:0) <CodeSnippet>
    function create_default_slot_3$6(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("import Icon from '@iconify/svelte';");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (21:0) <Paragraph>
    function create_default_slot_2$6(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (22:0) <CodeSnippet   >
    function create_default_slot_1$8(ctx) {
    	let t_value = `<Icon icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
	? ` color="${colornameFromHex(/*color*/ ctx[0])}"`
	: ""}${/*width*/ ctx[1] ? ` width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
	? ` height="${/*height*/ ctx[2]}"`
	: ""}${/*flipHorizontal*/ ctx[3] ? ` hFlip={true}` : ""}${/*flipVertical*/ ctx[4] ? ` vFlip={true}` : ""}${/*rotate*/ ctx[5]
	? ` rotate={${/*rotate*/ ctx[5] / 90}}`
	: ""}${/*display*/ ctx[6] === "inline" ? " inline={true}" : ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<Icon icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
			? ` color="${colornameFromHex(/*color*/ ctx[0])}"`
			: ""}${/*width*/ ctx[1] ? ` width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
			? ` height="${/*height*/ ctx[2]}"`
			: ""}${/*flipHorizontal*/ ctx[3] ? ` hFlip={true}` : ""}${/*flipVertical*/ ctx[4] ? ` vFlip={true}` : ""}${/*rotate*/ ctx[5]
			? ` rotate={${/*rotate*/ ctx[5] / 90}}`
			: ""}${/*display*/ ctx[6] === "inline" ? " inline={true}" : ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (31:0) <MoreInfo>
    function create_default_slot$a(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about Svelte component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$c(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let paragraph2;
    	let t4;
    	let codesnippet2;
    	let t5;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_6$5] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_5$5] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$6] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$6] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$6] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet2 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$8] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				$$slots: { default: [create_default_slot$a] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(paragraph2.$$.fragment);
    			t4 = space();
    			create_component(codesnippet2.$$.fragment);
    			t5 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(paragraph2, target, anchor);
    			insert(target, t4, anchor);
    			mount_component(codesnippet2, target, anchor);
    			insert(target, t5, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const codesnippet2_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet2_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet2.$set(codesnippet2_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(codesnippet2.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(codesnippet2.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(paragraph2, detaching);
    			if (detaching) detach(t4);
    			destroy_component(codesnippet2, detaching);
    			if (detaching) detach(t5);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(3, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(4, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(5, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(6, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
    	};

    	return [color, width, height, flipHorizontal, flipVertical, rotate, display, icon];
    }

    class Svelte extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			color: 0,
    			width: 1,
    			height: 2,
    			flipHorizontal: 3,
    			flipVertical: 4,
    			rotate: 5,
    			display: 6,
    			icon: 7
    		});
    	}
    }

    /* src/IconList/docs/Svelte/SvelteOffline.svelte generated by Svelte v3.48.0 */

    function create_default_slot_6$4(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install component and icon set:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (26:0) <CodeSnippet   >
    function create_default_slot_5$4(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("npm install --save-dev @iconify/svelte @iconify/icons-uil");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (29:0) <Paragraph>
    function create_default_slot_4$5(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Import component and icon data:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (30:0) <CodeSnippet>
    function create_default_slot_3$5(ctx) {
    	let t0;
    	let t1_value = /*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func$2).join("") + "";
    	let t1;
    	let t2;
    	let t3_value = /*icon*/ ctx[0]?.split(":")[0] + "";
    	let t3;
    	let t4;
    	let t5_value = /*icon*/ ctx[0]?.split(":")[1] + "";
    	let t5;
    	let t6;

    	return {
    		c() {
    			t0 = text("import Icon from '@iconify/svelte'; import icon");
    			t1 = text(t1_value);
    			t2 = text(" from '@iconify/icons-");
    			t3 = text(t3_value);
    			t4 = text("/");
    			t5 = text(t5_value);
    			t6 = text("';");
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    			insert(target, t2, anchor);
    			insert(target, t3, anchor);
    			insert(target, t4, anchor);
    			insert(target, t5, anchor);
    			insert(target, t6, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t1_value !== (t1_value = /*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func$2).join("") + "")) set_data(t1, t1_value);
    			if (dirty & /*icon*/ 1 && t3_value !== (t3_value = /*icon*/ ctx[0]?.split(":")[0] + "")) set_data(t3, t3_value);
    			if (dirty & /*icon*/ 1 && t5_value !== (t5_value = /*icon*/ ctx[0]?.split(":")[1] + "")) set_data(t5, t5_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    			if (detaching) detach(t2);
    			if (detaching) detach(t3);
    			if (detaching) detach(t4);
    			if (detaching) detach(t5);
    			if (detaching) detach(t6);
    		}
    	};
    }

    // (39:0) <Paragraph>
    function create_default_slot_2$5(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (40:0) <CodeSnippet   >
    function create_default_slot_1$7(ctx) {
    	let t_value = `<Icon icon={icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_1$2).join("")}}${isColor(/*color*/ ctx[1])
	? ` color="${colornameFromHex(/*color*/ ctx[1])}"`
	: ""}${/*width*/ ctx[2] ? ` width="${/*width*/ ctx[2]}"` : ""}${/*height*/ ctx[3]
	? ` height="${/*height*/ ctx[3]}"`
	: ""}${/*flipHorizontal*/ ctx[4] ? ` hFlip={true}` : ""}${/*flipVertical*/ ctx[5] ? ` vFlip={true}` : ""}${/*rotate*/ ctx[6]
	? ` rotate={${/*rotate*/ ctx[6] / 90}}`
	: ""}${/*display*/ ctx[7] === "inline" ? " inline={true}" : ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<Icon icon={icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_1$2).join("")}}${isColor(/*color*/ ctx[1])
			? ` color="${colornameFromHex(/*color*/ ctx[1])}"`
			: ""}${/*width*/ ctx[2] ? ` width="${/*width*/ ctx[2]}"` : ""}${/*height*/ ctx[3]
			? ` height="${/*height*/ ctx[3]}"`
			: ""}${/*flipHorizontal*/ ctx[4] ? ` hFlip={true}` : ""}${/*flipVertical*/ ctx[5] ? ` vFlip={true}` : ""}${/*rotate*/ ctx[6]
			? ` rotate={${/*rotate*/ ctx[6] / 90}}`
			: ""}${/*display*/ ctx[7] === "inline" ? " inline={true}" : ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (53:0) <MoreInfo>
    function create_default_slot$9(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about Svelte component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$b(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let paragraph2;
    	let t4;
    	let codesnippet2;
    	let t5;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_6$4] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_5$4] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$5] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$5] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$5] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet2 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$7] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				$$slots: { default: [create_default_slot$9] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(paragraph2.$$.fragment);
    			t4 = space();
    			create_component(codesnippet2.$$.fragment);
    			t5 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(paragraph2, target, anchor);
    			insert(target, t4, anchor);
    			mount_component(codesnippet2, target, anchor);
    			insert(target, t5, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const codesnippet2_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet2_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet2.$set(codesnippet2_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(codesnippet2.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(codesnippet2.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(paragraph2, detaching);
    			if (detaching) detach(t4);
    			destroy_component(codesnippet2, detaching);
    			if (detaching) detach(t5);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    const func$2 = e => e.toProperCase();
    const func_1$2 = e => e.toProperCase();

    function instance$b($$self, $$props, $$invalidate) {
    	String.prototype.toProperCase = function () {
    		return this.replace(/\w\S*/g, function (txt) {
    			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    		});
    	};

    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;
    	icon = icon || "";

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(4, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(5, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(7, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    	};

    	return [icon, color, width, height, flipHorizontal, flipVertical, rotate, display];
    }

    class SvelteOffline extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			color: 1,
    			width: 2,
    			height: 3,
    			flipHorizontal: 4,
    			flipVertical: 5,
    			rotate: 6,
    			display: 7,
    			icon: 0
    		});
    	}
    }

    /* src/IconList/docs/Vue/Vue2.svelte generated by Svelte v3.48.0 */

    function create_default_slot_8$3(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install compone`nt:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (18:0) <CodeSnippet>
    function create_default_slot_7$3(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("npm install --save-dev @iconify/vue2");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (19:0) <Paragraph>
    function create_default_slot_6$3(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Import component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (20:0) <CodeSnippet>
    function create_default_slot_5$3(ctx) {
    	let t_value = `import { Icon } from '@iconify/vue2';` + "";
    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (21:0) <Paragraph>
    function create_default_slot_4$4(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Add icon component to your component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (22:0) <CodeSnippet>
    function create_default_slot_3$4(ctx) {
    	let t_value = `export default {
    components: {
        Icon,
    },
});` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (29:0) <Paragraph>
    function create_default_slot_2$4(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (30:0) <CodeSnippet   >
    function create_default_slot_1$6(ctx) {
    	let t_value = `<Icon icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
	? ` color="${colornameFromHex(/*color*/ ctx[0])}"`
	: ""}${/*width*/ ctx[1] ? ` width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
	? ` height="${/*height*/ ctx[2]}"`
	: ""}${/*flipHorizontal*/ ctx[3]
	? ` :horizontalFlip="true"`
	: ""}${/*flipVertical*/ ctx[4] ? ` :verticalFlip="true"` : ""}${/*rotate*/ ctx[5]
	? ` :rotate="${/*rotate*/ ctx[5] / 90}"`
	: ""}${/*display*/ ctx[6] === "inline" ? ' :inline="true"' : ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<Icon icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
			? ` color="${colornameFromHex(/*color*/ ctx[0])}"`
			: ""}${/*width*/ ctx[1] ? ` width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
			? ` height="${/*height*/ ctx[2]}"`
			: ""}${/*flipHorizontal*/ ctx[3]
			? ` :horizontalFlip="true"`
			: ""}${/*flipVertical*/ ctx[4] ? ` :verticalFlip="true"` : ""}${/*rotate*/ ctx[5]
			? ` :rotate="${/*rotate*/ ctx[5] / 90}"`
			: ""}${/*display*/ ctx[6] === "inline" ? ' :inline="true"' : ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (39:0) <MoreInfo>
    function create_default_slot$8(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about Vue component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$a(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let paragraph2;
    	let t4;
    	let codesnippet2;
    	let t5;
    	let paragraph3;
    	let t6;
    	let codesnippet3;
    	let t7;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_8$3] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_7$3] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_6$3] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_5$3] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$4] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet2 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$4] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph3 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$4] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet3 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$6] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				$$slots: { default: [create_default_slot$8] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(paragraph2.$$.fragment);
    			t4 = space();
    			create_component(codesnippet2.$$.fragment);
    			t5 = space();
    			create_component(paragraph3.$$.fragment);
    			t6 = space();
    			create_component(codesnippet3.$$.fragment);
    			t7 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(paragraph2, target, anchor);
    			insert(target, t4, anchor);
    			mount_component(codesnippet2, target, anchor);
    			insert(target, t5, anchor);
    			mount_component(paragraph3, target, anchor);
    			insert(target, t6, anchor);
    			mount_component(codesnippet3, target, anchor);
    			insert(target, t7, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const codesnippet2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet2_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet2.$set(codesnippet2_changes);
    			const paragraph3_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph3_changes.$$scope = { dirty, ctx };
    			}

    			paragraph3.$set(paragraph3_changes);
    			const codesnippet3_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet3_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet3.$set(codesnippet3_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(codesnippet2.$$.fragment, local);
    			transition_in(paragraph3.$$.fragment, local);
    			transition_in(codesnippet3.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(codesnippet2.$$.fragment, local);
    			transition_out(paragraph3.$$.fragment, local);
    			transition_out(codesnippet3.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(paragraph2, detaching);
    			if (detaching) detach(t4);
    			destroy_component(codesnippet2, detaching);
    			if (detaching) detach(t5);
    			destroy_component(paragraph3, detaching);
    			if (detaching) detach(t6);
    			destroy_component(codesnippet3, detaching);
    			if (detaching) detach(t7);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(3, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(4, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(5, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(6, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
    	};

    	return [color, width, height, flipHorizontal, flipVertical, rotate, display, icon];
    }

    class Vue2 extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			color: 0,
    			width: 1,
    			height: 2,
    			flipHorizontal: 3,
    			flipVertical: 4,
    			rotate: 5,
    			display: 6,
    			icon: 7
    		});
    	}
    }

    /* src/IconList/docs/Vue/Vue3.svelte generated by Svelte v3.48.0 */

    function create_default_slot_8$2(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (18:0) <CodeSnippet>
    function create_default_slot_7$2(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("npm install --save-dev @iconify/vue");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (19:0) <Paragraph>
    function create_default_slot_6$2(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Import component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (20:0) <CodeSnippet>
    function create_default_slot_5$2(ctx) {
    	let t_value = `import { Icon } from '@iconify/vue';` + "";
    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (21:0) <Paragraph>
    function create_default_slot_4$3(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Add icon component to your component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (22:0) <CodeSnippet>
    function create_default_slot_3$3(ctx) {
    	let t_value = `export default {
    components: {
        Icon,
    },
});` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (29:0) <Paragraph>
    function create_default_slot_2$3(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (30:0) <CodeSnippet   >
    function create_default_slot_1$5(ctx) {
    	let t_value = `<Icon icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
	? ` color="${colornameFromHex(/*color*/ ctx[0])}"`
	: ""}${/*width*/ ctx[1] ? ` width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
	? ` height="${/*height*/ ctx[2]}"`
	: ""}${/*flipHorizontal*/ ctx[3]
	? ` :horizontalFlip="true"`
	: ""}${/*flipVertical*/ ctx[4] ? ` :verticalFlip="true"` : ""}${/*rotate*/ ctx[5]
	? ` :rotate="${/*rotate*/ ctx[5] / 90}"`
	: ""}${/*display*/ ctx[6] === "inline" ? ' :inline="true"' : ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<Icon icon="${/*icon*/ ctx[7]}"${isColor(/*color*/ ctx[0])
			? ` color="${colornameFromHex(/*color*/ ctx[0])}"`
			: ""}${/*width*/ ctx[1] ? ` width="${/*width*/ ctx[1]}"` : ""}${/*height*/ ctx[2]
			? ` height="${/*height*/ ctx[2]}"`
			: ""}${/*flipHorizontal*/ ctx[3]
			? ` :horizontalFlip="true"`
			: ""}${/*flipVertical*/ ctx[4] ? ` :verticalFlip="true"` : ""}${/*rotate*/ ctx[5]
			? ` :rotate="${/*rotate*/ ctx[5] / 90}"`
			: ""}${/*display*/ ctx[6] === "inline" ? ' :inline="true"' : ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (39:0) <MoreInfo>
    function create_default_slot$7(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about Vue component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$9(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let paragraph2;
    	let t4;
    	let codesnippet2;
    	let t5;
    	let paragraph3;
    	let t6;
    	let codesnippet3;
    	let t7;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_8$2] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_7$2] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_6$2] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_5$2] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$3] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet2 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$3] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph3 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$3] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet3 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(paragraph2.$$.fragment);
    			t4 = space();
    			create_component(codesnippet2.$$.fragment);
    			t5 = space();
    			create_component(paragraph3.$$.fragment);
    			t6 = space();
    			create_component(codesnippet3.$$.fragment);
    			t7 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(paragraph2, target, anchor);
    			insert(target, t4, anchor);
    			mount_component(codesnippet2, target, anchor);
    			insert(target, t5, anchor);
    			mount_component(paragraph3, target, anchor);
    			insert(target, t6, anchor);
    			mount_component(codesnippet3, target, anchor);
    			insert(target, t7, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const codesnippet2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				codesnippet2_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet2.$set(codesnippet2_changes);
    			const paragraph3_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph3_changes.$$scope = { dirty, ctx };
    			}

    			paragraph3.$set(paragraph3_changes);
    			const codesnippet3_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet3_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet3.$set(codesnippet3_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(codesnippet2.$$.fragment, local);
    			transition_in(paragraph3.$$.fragment, local);
    			transition_in(codesnippet3.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(codesnippet2.$$.fragment, local);
    			transition_out(paragraph3.$$.fragment, local);
    			transition_out(codesnippet3.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(paragraph2, detaching);
    			if (detaching) detach(t4);
    			destroy_component(codesnippet2, detaching);
    			if (detaching) detach(t5);
    			destroy_component(paragraph3, detaching);
    			if (detaching) detach(t6);
    			destroy_component(codesnippet3, detaching);
    			if (detaching) detach(t7);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('height' in $$props) $$invalidate(2, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(3, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(4, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(5, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(6, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
    	};

    	return [color, width, height, flipHorizontal, flipVertical, rotate, display, icon];
    }

    class Vue3 extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			color: 0,
    			width: 1,
    			height: 2,
    			flipHorizontal: 3,
    			flipVertical: 4,
    			rotate: 5,
    			display: 6,
    			icon: 7
    		});
    	}
    }

    /* src/IconList/docs/Vue/Vue2Offline.svelte generated by Svelte v3.48.0 */

    function create_default_slot_8$1(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install component and icon set:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (26:0) <CodeSnippet   >
    function create_default_slot_7$1(ctx) {
    	let t0;
    	let t1_value = /*icon*/ ctx[0]?.split(":")[0] + "";
    	let t1;

    	return {
    		c() {
    			t0 = text("npm install --save-dev @iconify/vue2 @iconify/icons-");
    			t1 = text(t1_value);
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t1_value !== (t1_value = /*icon*/ ctx[0]?.split(":")[0] + "")) set_data(t1, t1_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    		}
    	};
    }

    // (31:0) <Paragraph>
    function create_default_slot_6$1(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Import component and icon data:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (32:0) <CodeSnippet>
    function create_default_slot_5$1(ctx) {
    	let t_value = `import { Icon } from '@iconify/vue2';
import icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func$1).join("")} from '@iconify/icons-${/*icon*/ ctx[0]?.split(":")[0]}/${/*icon*/ ctx[0]?.split(":")[1]}';` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t_value !== (t_value = `import { Icon } from '@iconify/vue2';
import icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func$1).join("")} from '@iconify/icons-${/*icon*/ ctx[0]?.split(":")[0]}/${/*icon*/ ctx[0]?.split(":")[1]}';` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (42:0) <Paragraph>
    function create_default_slot_4$2(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Add icon data and icon component to your component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (43:0) <CodeSnippet>
    function create_default_slot_3$2(ctx) {
    	let t_value = `export default {
	components: {
		Icon,
	},
	data() {
		return {
			icons: {
				icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_1$1).join("")},
			},
		};
	},
});` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t_value !== (t_value = `export default {
	components: {
		Icon,
	},
	data() {
		return {
			icons: {
				icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_1$1).join("")},
			},
		};
	},
});` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (61:0) <Paragraph>
    function create_default_slot_2$2(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (62:0) <CodeSnippet   >
    function create_default_slot_1$4(ctx) {
    	let t_value = `<Icon :icon="icons.icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_2$1).join("")}"${isColor(/*color*/ ctx[1])
	? ` color="${colornameFromHex(/*color*/ ctx[1])}"`
	: ""}${/*width*/ ctx[2] ? ` width="${/*width*/ ctx[2]}"` : ""}${/*height*/ ctx[3]
	? ` height="${/*height*/ ctx[3]}"`
	: ""}${/*flipHorizontal*/ ctx[4]
	? ` :horizontalFlip="true"`
	: ""}${/*flipVertical*/ ctx[5] ? ` :verticalFlip="true"` : ""}${/*rotate*/ ctx[6]
	? ` :rotate="${/*rotate*/ ctx[6] / 90}"`
	: ""}${/*display*/ ctx[7] === "inline" ? ' :inline="true"' : ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<Icon :icon="icons.icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_2$1).join("")}"${isColor(/*color*/ ctx[1])
			? ` color="${colornameFromHex(/*color*/ ctx[1])}"`
			: ""}${/*width*/ ctx[2] ? ` width="${/*width*/ ctx[2]}"` : ""}${/*height*/ ctx[3]
			? ` height="${/*height*/ ctx[3]}"`
			: ""}${/*flipHorizontal*/ ctx[4]
			? ` :horizontalFlip="true"`
			: ""}${/*flipVertical*/ ctx[5] ? ` :verticalFlip="true"` : ""}${/*rotate*/ ctx[6]
			? ` :rotate="${/*rotate*/ ctx[6] / 90}"`
			: ""}${/*display*/ ctx[7] === "inline" ? ' :inline="true"' : ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (75:0) <MoreInfo>
    function create_default_slot$6(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about Vue component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$8(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let paragraph2;
    	let t4;
    	let codesnippet2;
    	let t5;
    	let paragraph3;
    	let t6;
    	let codesnippet3;
    	let t7;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_8$1] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_7$1] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_6$1] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_5$1] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$2] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet2 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph3 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet3 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$4] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				$$slots: { default: [create_default_slot$6] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(paragraph2.$$.fragment);
    			t4 = space();
    			create_component(codesnippet2.$$.fragment);
    			t5 = space();
    			create_component(paragraph3.$$.fragment);
    			t6 = space();
    			create_component(codesnippet3.$$.fragment);
    			t7 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(paragraph2, target, anchor);
    			insert(target, t4, anchor);
    			mount_component(codesnippet2, target, anchor);
    			insert(target, t5, anchor);
    			mount_component(paragraph3, target, anchor);
    			insert(target, t6, anchor);
    			mount_component(codesnippet3, target, anchor);
    			insert(target, t7, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const codesnippet2_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet2_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet2.$set(codesnippet2_changes);
    			const paragraph3_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph3_changes.$$scope = { dirty, ctx };
    			}

    			paragraph3.$set(paragraph3_changes);
    			const codesnippet3_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet3_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet3.$set(codesnippet3_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(codesnippet2.$$.fragment, local);
    			transition_in(paragraph3.$$.fragment, local);
    			transition_in(codesnippet3.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(codesnippet2.$$.fragment, local);
    			transition_out(paragraph3.$$.fragment, local);
    			transition_out(codesnippet3.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(paragraph2, detaching);
    			if (detaching) detach(t4);
    			destroy_component(codesnippet2, detaching);
    			if (detaching) detach(t5);
    			destroy_component(paragraph3, detaching);
    			if (detaching) detach(t6);
    			destroy_component(codesnippet3, detaching);
    			if (detaching) detach(t7);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    const func$1 = e => e.toProperCase();
    const func_1$1 = e => e.toProperCase();
    const func_2$1 = e => e.toProperCase();

    function instance$8($$self, $$props, $$invalidate) {
    	String.prototype.toProperCase = function () {
    		return this.replace(/\w\S*/g, function (txt) {
    			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    		});
    	};

    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;
    	icon = icon || "";

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(4, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(5, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(7, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    	};

    	return [icon, color, width, height, flipHorizontal, flipVertical, rotate, display];
    }

    class Vue2Offline extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			color: 1,
    			width: 2,
    			height: 3,
    			flipHorizontal: 4,
    			flipVertical: 5,
    			rotate: 6,
    			display: 7,
    			icon: 0
    		});
    	}
    }

    /* src/IconList/docs/Vue/Vue3Offline.svelte generated by Svelte v3.48.0 */

    function create_default_slot_8(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Install component and icon set:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (26:0) <CodeSnippet   >
    function create_default_slot_7(ctx) {
    	let t0;
    	let t1_value = /*icon*/ ctx[0]?.split(":")[0] + "";
    	let t1;

    	return {
    		c() {
    			t0 = text("npm install --save-dev @iconify/vue @iconify-icons/");
    			t1 = text(t1_value);
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t1_value !== (t1_value = /*icon*/ ctx[0]?.split(":")[0] + "")) set_data(t1, t1_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    		}
    	};
    }

    // (31:0) <Paragraph>
    function create_default_slot_6(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Import component and icon data:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (32:0) <CodeSnippet>
    function create_default_slot_5(ctx) {
    	let t_value = `import { Icon } from '@iconify/vue';
import icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func).join("")} from '@iconify-icons/${/*icon*/ ctx[0]?.split(":")[0]}/${/*icon*/ ctx[0]?.split(":")[1]}';` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t_value !== (t_value = `import { Icon } from '@iconify/vue';
import icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func).join("")} from '@iconify-icons/${/*icon*/ ctx[0]?.split(":")[0]}/${/*icon*/ ctx[0]?.split(":")[1]}';` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (42:0) <Paragraph>
    function create_default_slot_4$1(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Add icon data and icon component to your component:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (43:0) <CodeSnippet>
    function create_default_slot_3$1(ctx) {
    	let t_value = `export default {
	components: {
		Icon,
	},
	data() {
		return {
			icons: {
				icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_1).join("")},
			},
		};
	},
});` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon*/ 1 && t_value !== (t_value = `export default {
	components: {
		Icon,
	},
	data() {
		return {
			icons: {
				icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_1).join("")},
			},
		};
	},
});` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (61:0) <Paragraph>
    function create_default_slot_2$1(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("Use component in template:");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (62:0) <CodeSnippet   >
    function create_default_slot_1$3(ctx) {
    	let t_value = `<Icon :icon="icons.icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_2).join("")}"${isColor(/*color*/ ctx[1])
	? ` color="${colornameFromHex(/*color*/ ctx[1])}"`
	: ""}${/*width*/ ctx[2] ? ` width="${/*width*/ ctx[2]}"` : ""}${/*height*/ ctx[3]
	? ` height="${/*height*/ ctx[3]}"`
	: ""}${/*flipHorizontal*/ ctx[4]
	? ` :horizontalFlip="true"`
	: ""}${/*flipVertical*/ ctx[5] ? ` :verticalFlip="true"` : ""}${/*rotate*/ ctx[6]
	? ` :rotate="${/*rotate*/ ctx[6] / 90}"`
	: ""}${/*display*/ ctx[7] === "inline" ? ' :inline="true"' : ""} />` + "";

    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 255 && t_value !== (t_value = `<Icon :icon="icons.icon${/*icon*/ ctx[0]?.split(":")[1]?.split("-").map(func_2).join("")}"${isColor(/*color*/ ctx[1])
			? ` color="${colornameFromHex(/*color*/ ctx[1])}"`
			: ""}${/*width*/ ctx[2] ? ` width="${/*width*/ ctx[2]}"` : ""}${/*height*/ ctx[3]
			? ` height="${/*height*/ ctx[3]}"`
			: ""}${/*flipHorizontal*/ ctx[4]
			? ` :horizontalFlip="true"`
			: ""}${/*flipVertical*/ ctx[5] ? ` :verticalFlip="true"` : ""}${/*rotate*/ ctx[6]
			? ` :rotate="${/*rotate*/ ctx[6] / 90}"`
			: ""}${/*display*/ ctx[7] === "inline" ? ' :inline="true"' : ""} />` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (75:0) <MoreInfo>
    function create_default_slot$5(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("More information about Vue component");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$7(ctx) {
    	let paragraph0;
    	let t0;
    	let codesnippet0;
    	let t1;
    	let paragraph1;
    	let t2;
    	let codesnippet1;
    	let t3;
    	let paragraph2;
    	let t4;
    	let codesnippet2;
    	let t5;
    	let paragraph3;
    	let t6;
    	let codesnippet3;
    	let t7;
    	let moreinfo;
    	let current;

    	paragraph0 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_8] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet0 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph1 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet1 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph2 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_4$1] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet2 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_3$1] },
    				$$scope: { ctx }
    			}
    		});

    	paragraph3 = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet3 = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot_1$3] },
    				$$scope: { ctx }
    			}
    		});

    	moreinfo = new MoreInfo({
    			props: {
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph0.$$.fragment);
    			t0 = space();
    			create_component(codesnippet0.$$.fragment);
    			t1 = space();
    			create_component(paragraph1.$$.fragment);
    			t2 = space();
    			create_component(codesnippet1.$$.fragment);
    			t3 = space();
    			create_component(paragraph2.$$.fragment);
    			t4 = space();
    			create_component(codesnippet2.$$.fragment);
    			t5 = space();
    			create_component(paragraph3.$$.fragment);
    			t6 = space();
    			create_component(codesnippet3.$$.fragment);
    			t7 = space();
    			create_component(moreinfo.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph0, target, anchor);
    			insert(target, t0, anchor);
    			mount_component(codesnippet0, target, anchor);
    			insert(target, t1, anchor);
    			mount_component(paragraph1, target, anchor);
    			insert(target, t2, anchor);
    			mount_component(codesnippet1, target, anchor);
    			insert(target, t3, anchor);
    			mount_component(paragraph2, target, anchor);
    			insert(target, t4, anchor);
    			mount_component(codesnippet2, target, anchor);
    			insert(target, t5, anchor);
    			mount_component(paragraph3, target, anchor);
    			insert(target, t6, anchor);
    			mount_component(codesnippet3, target, anchor);
    			insert(target, t7, anchor);
    			mount_component(moreinfo, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph0_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph0_changes.$$scope = { dirty, ctx };
    			}

    			paragraph0.$set(paragraph0_changes);
    			const codesnippet0_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet0_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet0.$set(codesnippet0_changes);
    			const paragraph1_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph1_changes.$$scope = { dirty, ctx };
    			}

    			paragraph1.$set(paragraph1_changes);
    			const codesnippet1_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet1_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet1.$set(codesnippet1_changes);
    			const paragraph2_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph2_changes.$$scope = { dirty, ctx };
    			}

    			paragraph2.$set(paragraph2_changes);
    			const codesnippet2_changes = {};

    			if (dirty & /*$$scope, icon*/ 257) {
    				codesnippet2_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet2.$set(codesnippet2_changes);
    			const paragraph3_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				paragraph3_changes.$$scope = { dirty, ctx };
    			}

    			paragraph3.$set(paragraph3_changes);
    			const codesnippet3_changes = {};

    			if (dirty & /*$$scope, icon, color, width, height, flipHorizontal, flipVertical, rotate, display*/ 511) {
    				codesnippet3_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet3.$set(codesnippet3_changes);
    			const moreinfo_changes = {};

    			if (dirty & /*$$scope*/ 256) {
    				moreinfo_changes.$$scope = { dirty, ctx };
    			}

    			moreinfo.$set(moreinfo_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph0.$$.fragment, local);
    			transition_in(codesnippet0.$$.fragment, local);
    			transition_in(paragraph1.$$.fragment, local);
    			transition_in(codesnippet1.$$.fragment, local);
    			transition_in(paragraph2.$$.fragment, local);
    			transition_in(codesnippet2.$$.fragment, local);
    			transition_in(paragraph3.$$.fragment, local);
    			transition_in(codesnippet3.$$.fragment, local);
    			transition_in(moreinfo.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph0.$$.fragment, local);
    			transition_out(codesnippet0.$$.fragment, local);
    			transition_out(paragraph1.$$.fragment, local);
    			transition_out(codesnippet1.$$.fragment, local);
    			transition_out(paragraph2.$$.fragment, local);
    			transition_out(codesnippet2.$$.fragment, local);
    			transition_out(paragraph3.$$.fragment, local);
    			transition_out(codesnippet3.$$.fragment, local);
    			transition_out(moreinfo.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph0, detaching);
    			if (detaching) detach(t0);
    			destroy_component(codesnippet0, detaching);
    			if (detaching) detach(t1);
    			destroy_component(paragraph1, detaching);
    			if (detaching) detach(t2);
    			destroy_component(codesnippet1, detaching);
    			if (detaching) detach(t3);
    			destroy_component(paragraph2, detaching);
    			if (detaching) detach(t4);
    			destroy_component(codesnippet2, detaching);
    			if (detaching) detach(t5);
    			destroy_component(paragraph3, detaching);
    			if (detaching) detach(t6);
    			destroy_component(codesnippet3, detaching);
    			if (detaching) detach(t7);
    			destroy_component(moreinfo, detaching);
    		}
    	};
    }

    const func = e => e.toProperCase();
    const func_1 = e => e.toProperCase();
    const func_2 = e => e.toProperCase();

    function instance$7($$self, $$props, $$invalidate) {
    	String.prototype.toProperCase = function () {
    		return this.replace(/\w\S*/g, function (txt) {
    			return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    		});
    	};

    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { display } = $$props;
    	let { icon } = $$props;
    	icon = icon || "";

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('width' in $$props) $$invalidate(2, width = $$props.width);
    		if ('height' in $$props) $$invalidate(3, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(4, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(5, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(6, rotate = $$props.rotate);
    		if ('display' in $$props) $$invalidate(7, display = $$props.display);
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    	};

    	return [icon, color, width, height, flipHorizontal, flipVertical, rotate, display];
    }

    class Vue3Offline extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			color: 1,
    			width: 2,
    			height: 3,
    			flipHorizontal: 4,
    			flipVertical: 5,
    			rotate: 6,
    			display: 7,
    			icon: 0
    		});
    	}
    }

    /* src/IconList/docs/SVG/SVG.svelte generated by Svelte v3.48.0 */

    function create_default_slot$4(ctx) {
    	let t;

    	return {
    		c() {
    			t = text(/*curSVG*/ ctx[1]);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*curSVG*/ 2) set_data(t, /*curSVG*/ ctx[1]);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$6(ctx) {
    	let codesnippet;
    	let t0;
    	let button;
    	let current;
    	let mounted;
    	let dispose;

    	codesnippet = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(codesnippet.$$.fragment);
    			t0 = space();
    			button = element("button");
    			button.textContent = "Download SVG";
    			attr(button, "class", "w-full p-4 text-xl font-medium tracking-wide bg-stone-600 ");
    		},
    		m(target, anchor) {
    			mount_component(codesnippet, target, anchor);
    			insert(target, t0, anchor);
    			insert(target, button, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen(button, "click", /*click_handler*/ ctx[9]);
    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			const codesnippet_changes = {};

    			if (dirty & /*$$scope, curSVG*/ 4098) {
    				codesnippet_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet.$set(codesnippet_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(codesnippet.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(codesnippet.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(codesnippet, detaching);
    			if (detaching) detach(t0);
    			if (detaching) detach(button);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function saveSvg(svgEl, name) {
    	var svgData = svgEl;
    	var preface = '<?xml version="1.0" standalone="no"?>\r\n';
    	var svgBlob = new Blob([preface, svgData], { type: "image/svg+xml;charset=utf-8" });
    	var svgUrl = URL.createObjectURL(svgBlob);
    	var downloadLink = document.createElement("a");
    	downloadLink.href = svgUrl;
    	downloadLink.download = name;
    	document.body.appendChild(downloadLink);
    	downloadLink.click();
    	document.body.removeChild(downloadLink);
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { color } = $$props;
    	let { width } = $$props;
    	let { height } = $$props;
    	let { flipHorizontal } = $$props;
    	let { flipVertical } = $$props;
    	let { rotate } = $$props;
    	let { icon } = $$props;
    	const baseURL = `https://api.iconify.design/${icon.split(":")[0]}/${icon.split(":")[1]}.svg`;
    	let url = new URL(baseURL);
    	let urlString = url.toString();
    	let curSVG = "";

    	const click_handler = () => {
    		saveSvg(curSVG, icon.split(":")[1] + ".svg");
    	};

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('width' in $$props) $$invalidate(3, width = $$props.width);
    		if ('height' in $$props) $$invalidate(4, height = $$props.height);
    		if ('flipHorizontal' in $$props) $$invalidate(5, flipHorizontal = $$props.flipHorizontal);
    		if ('flipVertical' in $$props) $$invalidate(6, flipVertical = $$props.flipVertical);
    		if ('rotate' in $$props) $$invalidate(7, rotate = $$props.rotate);
    		if ('icon' in $$props) $$invalidate(0, icon = $$props.icon);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*color, width, height, rotate, flipHorizontal, flipVertical*/ 252) {
    			(() => {
    				isColor(color)
    				? url.searchParams.set("color", colornameFromHex(color))
    				: url.searchParams.delete("color");

    				width
    				? url.searchParams.set("width", width)
    				: url.searchParams.delete("width");

    				height
    				? url.searchParams.set("height", height)
    				: url.searchParams.delete("height");

    				rotate
    				? url.searchParams.set("rotate", `${rotate}deg`)
    				: url.searchParams.delete("rotate");

    				if (!(flipHorizontal || flipVertical)) {
    					url.searchParams.delete("flip");
    				} else if (flipHorizontal && flipVertical) {
    					url.searchParams.set("flip", "vertical,horizontal");
    				} else if (flipVertical) {
    					url.searchParams.set("flip", "vertical");
    				} else {
    					url.searchParams.set("flip", "horizontal");
    				}

    				$$invalidate(8, urlString = url.toString());
    			})();
    		}

    		if ($$self.$$.dirty & /*urlString*/ 256) {
    			fetch(urlString).then(res => res.text()).then(data => {
    				$$invalidate(1, curSVG = data);
    			});
    		}
    	};

    	return [
    		icon,
    		curSVG,
    		color,
    		width,
    		height,
    		flipHorizontal,
    		flipVertical,
    		rotate,
    		urlString,
    		click_handler
    	];
    }

    class SVG extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			color: 2,
    			width: 3,
    			height: 4,
    			flipHorizontal: 5,
    			flipVertical: 6,
    			rotate: 7,
    			icon: 0
    		});
    	}
    }

    /* src/IconList/docs/SVG/SVGURI.svelte generated by Svelte v3.48.0 */

    function create_default_slot_1$2(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("You can use this as background image or as content for pseudo element in\n  stylesheet.");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (20:0) <CodeSnippet>
    function create_default_slot$3(ctx) {
    	let t0;
    	let t1_value = encodeURI(`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="24" height="24" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24">${/*SVG*/ ctx[0]}</svg>`) + "";
    	let t1;
    	let t2;

    	return {
    		c() {
    			t0 = text("url('data:image/svg+xml,");
    			t1 = text(t1_value);
    			t2 = text("')");
    		},
    		m(target, anchor) {
    			insert(target, t0, anchor);
    			insert(target, t1, anchor);
    			insert(target, t2, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*SVG*/ 1 && t1_value !== (t1_value = encodeURI(`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="24" height="24" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24">${/*SVG*/ ctx[0]}</svg>`) + "")) set_data(t1, t1_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t0);
    			if (detaching) detach(t1);
    			if (detaching) detach(t2);
    		}
    	};
    }

    function create_fragment$5(ctx) {
    	let paragraph;
    	let t;
    	let codesnippet;
    	let current;

    	paragraph = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph.$$.fragment);
    			t = space();
    			create_component(codesnippet.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph, target, anchor);
    			insert(target, t, anchor);
    			mount_component(codesnippet, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				paragraph_changes.$$scope = { dirty, ctx };
    			}

    			paragraph.$set(paragraph_changes);
    			const codesnippet_changes = {};

    			if (dirty & /*$$scope, SVG*/ 5) {
    				codesnippet_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet.$set(codesnippet_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph.$$.fragment, local);
    			transition_in(codesnippet.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph.$$.fragment, local);
    			transition_out(codesnippet.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph, detaching);
    			if (detaching) detach(t);
    			destroy_component(codesnippet, detaching);
    		}
    	};
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let curIcon;
    	let SVG;

    	currentIcon.subscribe(value => {
    		curIcon = value;
    		$$invalidate(0, SVG = getIcon(curIcon)?.body);
    	});

    	return [SVG];
    }

    class SVGURI extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});
    	}
    }

    /* src/IconList/docs/SVG/SVGWithRectangle.svelte generated by Svelte v3.48.0 */

    function create_default_slot_1$1(ctx) {
    	let t;

    	return {
    		c() {
    			t = text("This SVG contains extra empty rectangle that matches viewBox. It is needed to\n  keep icon dimensions when importing icon in software that ignores viewBox\n  attribute.");
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    // (21:0) <CodeSnippet>
    function create_default_slot$2(ctx) {
    	let t_value = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="24" height="24" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><rect x="0" y="0" width="24" height="24" fill="none" stroke="none" />${/*SVG*/ ctx[0]}</svg>` + "";
    	let t;

    	return {
    		c() {
    			t = text(t_value);
    		},
    		m(target, anchor) {
    			insert(target, t, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*SVG*/ 1 && t_value !== (t_value = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="24" height="24" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><rect x="0" y="0" width="24" height="24" fill="none" stroke="none" />${/*SVG*/ ctx[0]}</svg>` + "")) set_data(t, t_value);
    		},
    		d(detaching) {
    			if (detaching) detach(t);
    		}
    	};
    }

    function create_fragment$4(ctx) {
    	let paragraph;
    	let t;
    	let codesnippet;
    	let current;

    	paragraph = new Paragraph({
    			props: {
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			}
    		});

    	codesnippet = new CodeSnippet({
    			props: {
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(paragraph.$$.fragment);
    			t = space();
    			create_component(codesnippet.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(paragraph, target, anchor);
    			insert(target, t, anchor);
    			mount_component(codesnippet, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const paragraph_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				paragraph_changes.$$scope = { dirty, ctx };
    			}

    			paragraph.$set(paragraph_changes);
    			const codesnippet_changes = {};

    			if (dirty & /*$$scope, SVG*/ 5) {
    				codesnippet_changes.$$scope = { dirty, ctx };
    			}

    			codesnippet.$set(codesnippet_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(paragraph.$$.fragment, local);
    			transition_in(codesnippet.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(paragraph.$$.fragment, local);
    			transition_out(codesnippet.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(paragraph, detaching);
    			if (detaching) detach(t);
    			destroy_component(codesnippet, detaching);
    		}
    	};
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let curIcon;
    	let SVG;

    	currentIcon.subscribe(value => {
    		curIcon = value;
    		$$invalidate(0, SVG = getIcon(curIcon)?.body);
    	});

    	return [SVG];
    }

    class SVGWithRectangle extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});
    	}
    }

    /* src/IconList/Usage.svelte generated by Svelte v3.48.0 */

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[28] = list[i][0];
    	child_ctx[30] = i;
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	child_ctx[30] = i;
    	return child_ctx;
    }

    // (143:6) {:else}
    function create_else_block_1$2(ctx) {
    	let icon;
    	let t0;
    	let p;

    	let t1_value = (/*width*/ ctx[4] && !isNaN(/*width*/ ctx[4])
    	? /*width*/ ctx[4]
    	: "24") + "";

    	let t1;
    	let t2;

    	let t3_value = (/*height*/ ctx[3] && !isNaN(/*height*/ ctx[3])
    	? /*height*/ ctx[3]
    	: "24") + "";

    	let t3;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: /*curIcon*/ ctx[0],
    				class: "transform rotate-" + /*rotate*/ ctx[8] + " transition-all",
    				style: "" + ((/*flipVert*/ ctx[5] && '--tw-rotate-x: 180deg') + ";" + (/*flipHoriz*/ ctx[6] && '--tw-rotate-y: 180deg') + "; color: " + (isColor(/*color*/ ctx[2])
    				? /*color*/ ctx[2]
    				: 'currentColor') + "; width: " + (/*width*/ ctx[4] && !isNaN(/*width*/ ctx[4]) && parseInt(/*width*/ ctx[4]) <= 256
    				? `${/*width*/ ctx[4]}px`
    				: '172px') + "; height: " + (/*height*/ ctx[3] && !isNaN(/*height*/ ctx[3]) && parseInt(/*height*/ ctx[3]) <= 256
    				? `${/*height*/ ctx[3]}px`
    				: '172px'))
    			}
    		});

    	return {
    		c() {
    			create_component(icon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			t2 = text(" x ");
    			t3 = text(t3_value);
    			attr(p, "class", "font-medium tracking-wide absolute bottom-1 left-1/2 transform -translate-x-1/2 text-center w-full p-8 break-all");
    		},
    		m(target, anchor) {
    			mount_component(icon, target, anchor);
    			insert(target, t0, anchor);
    			insert(target, p, anchor);
    			append(p, t1);
    			append(p, t2);
    			append(p, t3);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty[0] & /*curIcon*/ 1) icon_changes.icon = /*curIcon*/ ctx[0];
    			if (dirty[0] & /*rotate*/ 256) icon_changes.class = "transform rotate-" + /*rotate*/ ctx[8] + " transition-all";

    			if (dirty[0] & /*flipVert, flipHoriz, color, width, height*/ 124) icon_changes.style = "" + ((/*flipVert*/ ctx[5] && '--tw-rotate-x: 180deg') + ";" + (/*flipHoriz*/ ctx[6] && '--tw-rotate-y: 180deg') + "; color: " + (isColor(/*color*/ ctx[2])
    			? /*color*/ ctx[2]
    			: 'currentColor') + "; width: " + (/*width*/ ctx[4] && !isNaN(/*width*/ ctx[4]) && parseInt(/*width*/ ctx[4]) <= 256
    			? `${/*width*/ ctx[4]}px`
    			: '172px') + "; height: " + (/*height*/ ctx[3] && !isNaN(/*height*/ ctx[3]) && parseInt(/*height*/ ctx[3]) <= 256
    			? `${/*height*/ ctx[3]}px`
    			: '172px'));

    			icon.$set(icon_changes);

    			if ((!current || dirty[0] & /*width*/ 16) && t1_value !== (t1_value = (/*width*/ ctx[4] && !isNaN(/*width*/ ctx[4])
    			? /*width*/ ctx[4]
    			: "24") + "")) set_data(t1, t1_value);

    			if ((!current || dirty[0] & /*height*/ 8) && t3_value !== (t3_value = (/*height*/ ctx[3] && !isNaN(/*height*/ ctx[3])
    			? /*height*/ ctx[3]
    			: "24") + "")) set_data(t3, t3_value);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(icon, detaching);
    			if (detaching) detach(t0);
    			if (detaching) detach(p);
    		}
    	};
    }

    // (117:6) {#if display === "inline"}
    function create_if_block_3$2(ctx) {
    	let p0;
    	let t0;
    	let icon;
    	let t1;
    	let t2;
    	let p1;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: /*curIcon*/ ctx[0],
    				class: "transform inline rotate-" + /*rotate*/ ctx[8] + " transition-all",
    				style: "" + ((/*flipVert*/ ctx[5] && '--tw-rotate-x: 180deg') + ";" + (/*flipHoriz*/ ctx[6] && '--tw-rotate-y: 180deg') + "; color: " + (isColor(/*color*/ ctx[2])
    				? /*color*/ ctx[2]
    				: 'currentColor') + "; width: " + (/*width*/ ctx[4] && !isNaN(/*width*/ ctx[4]) && parseInt(/*width*/ ctx[4]) <= 256
    				? `${/*width*/ ctx[4]}px`
    				: '1.5rem') + "; height: " + (/*height*/ ctx[3] && !isNaN(/*height*/ ctx[3]) && parseInt(/*height*/ ctx[3]) <= 256
    				? `${/*height*/ ctx[3]}px`
    				: '1.5rem'))
    			}
    		});

    	return {
    		c() {
    			p0 = element("p");
    			t0 = text("Text with icon sample\n          ");
    			create_component(icon.$$.fragment);
    			t1 = text("\n          to show icon alignment in text.");
    			t2 = space();
    			p1 = element("p");
    			p1.textContent = "Inline text";
    			attr(p0, "class", "tracking-wide text-lg p-12 text-center");
    			attr(p1, "class", "font-medium tracking-wide absolute bottom-1 left-1/2 transform -translate-x-1/2 text-center w-full p-8 break-all");
    		},
    		m(target, anchor) {
    			insert(target, p0, anchor);
    			append(p0, t0);
    			mount_component(icon, p0, null);
    			append(p0, t1);
    			insert(target, t2, anchor);
    			insert(target, p1, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const icon_changes = {};
    			if (dirty[0] & /*curIcon*/ 1) icon_changes.icon = /*curIcon*/ ctx[0];
    			if (dirty[0] & /*rotate*/ 256) icon_changes.class = "transform inline rotate-" + /*rotate*/ ctx[8] + " transition-all";

    			if (dirty[0] & /*flipVert, flipHoriz, color, width, height*/ 124) icon_changes.style = "" + ((/*flipVert*/ ctx[5] && '--tw-rotate-x: 180deg') + ";" + (/*flipHoriz*/ ctx[6] && '--tw-rotate-y: 180deg') + "; color: " + (isColor(/*color*/ ctx[2])
    			? /*color*/ ctx[2]
    			: 'currentColor') + "; width: " + (/*width*/ ctx[4] && !isNaN(/*width*/ ctx[4]) && parseInt(/*width*/ ctx[4]) <= 256
    			? `${/*width*/ ctx[4]}px`
    			: '1.5rem') + "; height: " + (/*height*/ ctx[3] && !isNaN(/*height*/ ctx[3]) && parseInt(/*height*/ ctx[3]) <= 256
    			? `${/*height*/ ctx[3]}px`
    			: '1.5rem'));

    			icon.$set(icon_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(p0);
    			destroy_component(icon);
    			if (detaching) detach(t2);
    			if (detaching) detach(p1);
    		}
    	};
    }

    // (172:8) {#if curIcon}
    function create_if_block_2$2(ctx) {
    	let h2;
    	let t;

    	return {
    		c() {
    			h2 = element("h2");
    			t = text(/*curIcon*/ ctx[0]);
    			attr(h2, "class", "font-semibold break-all text-4xl tracking-wide -mt-1");
    		},
    		m(target, anchor) {
    			insert(target, h2, anchor);
    			append(h2, t);
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*curIcon*/ 1) set_data(t, /*curIcon*/ ctx[0]);
    		},
    		d(detaching) {
    			if (detaching) detach(h2);
    		}
    	};
    }

    // (200:12) {:else}
    function create_else_block$2(ctx) {
    	let svg;
    	let path;
    	let svg_transition;
    	let current;

    	return {
    		c() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr(path, "d", "M18.71 7.21a1 1 0 0 0-1.42 0l-7.45 7.46l-3.13-3.14A1 1 0 1 0 5.29 13l3.84 3.84a1 1 0 0 0 1.42 0l8.16-8.16a1 1 0 0 0 0-1.47z");
    			attr(path, "fill", "currentColor");
    			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr(svg, "class", "text-stone-400 absolute top-0 left-0");
    			attr(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr(svg, "aria-hidden", "true");
    			attr(svg, "role", "img");
    			attr(svg, "width", "2.4rem");
    			attr(svg, "height", "2.4rem");
    			attr(svg, "preserveAspectRatio", "xMidYMid meet");
    			attr(svg, "viewBox", "0 0 24 24");
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, path);
    			current = true;
    		},
    		i(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!svg_transition) svg_transition = create_bidirectional_transition(svg, fade, { duration: 150 }, true);
    				svg_transition.run(1);
    			});

    			current = true;
    		},
    		o(local) {
    			if (!svg_transition) svg_transition = create_bidirectional_transition(svg, fade, { duration: 150 }, false);
    			svg_transition.run(0);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    			if (detaching && svg_transition) svg_transition.end();
    		}
    	};
    }

    // (188:12) {#if !isCopied}
    function create_if_block_1$2(ctx) {
    	let div;
    	let icon;
    	let div_transition;
    	let current;

    	icon = new Icon({
    			props: {
    				icon: "ic:round-content-copy",
    				width: "32",
    				height: "32",
    				class: "text-stone-400"
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			attr(div, "class", "absolute top-0 left-0");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 150 }, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 150 }, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};
    }

    // (177:8) <CopyToClipboard           text={curIcon}           on:copy={() => {             isCopied = true;             setTimeout(() => {               isCopied = false;             }, 1000);           }}           let:copy         >
    function create_default_slot$1(ctx) {
    	let button;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$2, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (!/*isCopied*/ ctx[11]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	return {
    		c() {
    			button = element("button");
    			if_block.c();
    			attr(button, "class", "relative w-8 h-8");
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			if_blocks[current_block_type_index].m(button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen(button, "click", function () {
    					if (is_function(/*copy*/ ctx[33])) /*copy*/ ctx[33].apply(this, arguments);
    				});

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(button, null);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (553:10) {#each tabs as tab, index}
    function create_each_block_1$2(ctx) {
    	let button;
    	let icon;
    	let t0;
    	let span;
    	let t1_value = /*tab*/ ctx[31].name + "";
    	let t1;
    	let t2;
    	let button_class_value;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: {
    				icon: /*tab*/ ctx[31].icon,
    				width: "20",
    				height: "20"
    			}
    		});

    	function click_handler_9() {
    		return /*click_handler_9*/ ctx[26](/*index*/ ctx[30]);
    	}

    	return {
    		c() {
    			button = element("button");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			attr(span, "class", "-mt-0.5");

    			attr(button, "class", button_class_value = "transition-all flex gap-2 " + (/*currentTab*/ ctx[9] === /*index*/ ctx[30]
    			? 'font-medium bg-stone-600 text-stone-100'
    			: '') + " border-2 border-stone-600 tracking-wide px-3 items-center justify-center py-2");
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			mount_component(icon, button, null);
    			append(button, t0);
    			append(button, span);
    			append(span, t1);
    			append(button, t2);
    			current = true;

    			if (!mounted) {
    				dispose = listen(button, "click", click_handler_9);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty[0] & /*currentTab*/ 512 && button_class_value !== (button_class_value = "transition-all flex gap-2 " + (/*currentTab*/ ctx[9] === /*index*/ ctx[30]
    			? 'font-medium bg-stone-600 text-stone-100'
    			: '') + " border-2 border-stone-600 tracking-wide px-3 items-center justify-center py-2")) {
    				attr(button, "class", button_class_value);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (568:8) {#if tabs[currentTab].subtabs}
    function create_if_block$2(ctx) {
    	let div;
    	let each_value = /*tabs*/ ctx[12][/*currentTab*/ ctx[9]].subtabs;
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "flex flex-wrap gap-2 mt-4");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty[0] & /*currentSubTab, tabs, currentTab*/ 5632) {
    				each_value = /*tabs*/ ctx[12][/*currentTab*/ ctx[9]].subtabs;
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (570:12) {#each tabs[currentTab].subtabs as [name], index}
    function create_each_block$2(ctx) {
    	let button;
    	let span;
    	let t0_value = /*name*/ ctx[28] + "";
    	let t0;
    	let t1;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_10() {
    		return /*click_handler_10*/ ctx[27](/*index*/ ctx[30]);
    	}

    	return {
    		c() {
    			button = element("button");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(span, "class", "-mt-0.5");

    			attr(button, "class", button_class_value = "transition-all flex gap-2 " + (/*currentSubTab*/ ctx[10] == /*index*/ ctx[30]
    			? 'font-medium bg-stone-600 text-stone-100'
    			: '') + " border-2 border-stone-600 tracking-wide px-3 items-center justify-center py-2");
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			append(button, span);
    			append(span, t0);
    			append(button, t1);

    			if (!mounted) {
    				dispose = listen(button, "click", click_handler_10);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*currentTab*/ 512 && t0_value !== (t0_value = /*name*/ ctx[28] + "")) set_data(t0, t0_value);

    			if (dirty[0] & /*currentSubTab*/ 1024 && button_class_value !== (button_class_value = "transition-all flex gap-2 " + (/*currentSubTab*/ ctx[10] == /*index*/ ctx[30]
    			? 'font-medium bg-stone-600 text-stone-100'
    			: '') + " border-2 border-stone-600 tracking-wide px-3 items-center justify-center py-2")) {
    				attr(button, "class", button_class_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function create_fragment$3(ctx) {
    	let div21;
    	let div20;
    	let button0;
    	let icon0;
    	let t0;
    	let div0;
    	let current_block_type_index;
    	let if_block0;
    	let t1;
    	let div19;
    	let p0;
    	let t2;
    	let t3;
    	let div1;
    	let t4;
    	let copytoclipboard;
    	let t5;
    	let div15;
    	let div4;
    	let div2;
    	let t7;
    	let div3;
    	let icon1;
    	let t8;
    	let input0;
    	let t9;
    	let div8;
    	let div5;
    	let t11;
    	let div6;
    	let icon2;
    	let t12;
    	let input1;
    	let t13;
    	let div7;
    	let icon3;
    	let t14;
    	let input2;
    	let t15;
    	let div10;
    	let div9;
    	let t17;
    	let button1;
    	let icon4;
    	let t18;
    	let p4;
    	let t19;
    	let p4_class_value;
    	let button1_class_value;
    	let t20;
    	let button2;
    	let icon5;
    	let t21;
    	let p5;
    	let t22;
    	let p5_class_value;
    	let button2_class_value;
    	let t23;
    	let div12;
    	let div11;
    	let t25;
    	let button3;
    	let icon6;
    	let t26;
    	let p7;
    	let t27;
    	let p7_class_value;
    	let button3_class_value;
    	let t28;
    	let button4;
    	let icon7;
    	let t29;
    	let p8;
    	let t30;
    	let p8_class_value;
    	let button4_class_value;
    	let t31;
    	let div14;
    	let div13;
    	let t33;
    	let button5;
    	let svg0;
    	let circle;
    	let svg0_class_value;
    	let t34;
    	let p10;
    	let t35;
    	let p10_class_value;
    	let button5_class_value;
    	let t36;
    	let button6;
    	let svg1;
    	let path0;
    	let path1;
    	let path2;
    	let svg1_class_value;
    	let t37;
    	let p11;
    	let t38;
    	let p11_class_value;
    	let button6_class_value;
    	let t39;
    	let button7;
    	let svg2;
    	let path3;
    	let path4;
    	let path5;
    	let svg2_class_value;
    	let t40;
    	let p12;
    	let t41;
    	let p12_class_value;
    	let button7_class_value;
    	let t42;
    	let button8;
    	let svg3;
    	let path6;
    	let path7;
    	let path8;
    	let svg3_class_value;
    	let t43;
    	let p13;
    	let t44;
    	let p13_class_value;
    	let button8_class_value;
    	let t45;
    	let div18;
    	let div16;
    	let t46;
    	let t47;
    	let div17;
    	let switch_instance;
    	let div20_intro;
    	let div20_outro;
    	let div21_intro;
    	let div21_outro;
    	let current;
    	let mounted;
    	let dispose;

    	icon0 = new Icon({
    			props: {
    				icon: "heroicons-solid:x",
    				class: "",
    				width: "24",
    				height: "24"
    			}
    		});

    	const if_block_creators = [create_if_block_3$2, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*display*/ ctx[7] === "inline") return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*curIcon*/ ctx[0] && create_if_block_2$2(ctx);

    	copytoclipboard = new CopyToClipboard({
    			props: {
    				text: /*curIcon*/ ctx[0],
    				$$slots: {
    					default: [
    						create_default_slot$1,
    						({ copy }) => ({ 33: copy }),
    						({ copy }) => [0, copy ? 4 : 0]
    					]
    				},
    				$$scope: { ctx }
    			}
    		});

    	copytoclipboard.$on("copy", /*copy_handler*/ ctx[14]);

    	icon1 = new Icon({
    			props: {
    				icon: "ic:baseline-water-drop",
    				width: "28",
    				height: "28",
    				style: "color: " + (isColor(/*color*/ ctx[2])
    				? /*color*/ ctx[2]
    				: 'currentColor')
    			}
    		});

    	icon2 = new Icon({
    			props: {
    				icon: "fluent:auto-fit-width-20-filled",
    				width: "28",
    				height: "28",
    				class: ""
    			}
    		});

    	icon3 = new Icon({
    			props: {
    				icon: "fluent:auto-fit-height-20-filled",
    				width: "28",
    				height: "28",
    				class: ""
    			}
    		});

    	icon4 = new Icon({
    			props: {
    				icon: "mdi:flip-horizontal",
    				width: "28",
    				height: "28",
    				class: /*flipHoriz*/ ctx[6] ? "text-stone-100" : ""
    			}
    		});

    	icon5 = new Icon({
    			props: {
    				icon: "mdi:flip-vertical",
    				width: "28",
    				height: "28",
    				class: /*flipVert*/ ctx[5] ? "text-stone-100" : ""
    			}
    		});

    	icon6 = new Icon({
    			props: {
    				icon: "mdi:flip-horizontal",
    				width: "28",
    				height: "28",
    				class: /*display*/ ctx[7] === "block" ? "text-stone-100" : ""
    			}
    		});

    	icon7 = new Icon({
    			props: {
    				icon: "mdi:flip-vertical",
    				width: "28",
    				height: "28",
    				class: /*display*/ ctx[7] === "inline" ? "text-stone-100" : ""
    			}
    		});

    	let each_value_1 = /*tabs*/ ctx[12];
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block2 = /*tabs*/ ctx[12][/*currentTab*/ ctx[9]].subtabs && create_if_block$2(ctx);
    	var switch_value = /*tabs*/ ctx[12][/*currentTab*/ ctx[9]].subTab || /*tabs*/ ctx[12][/*currentTab*/ ctx[9]].subtabs[/*currentSubTab*/ ctx[10]][1];

    	function switch_props(ctx) {
    		return {
    			props: {
    				icon: /*curIcon*/ ctx[0],
    				color: /*color*/ ctx[2],
    				width: /*width*/ ctx[4],
    				height: /*height*/ ctx[3],
    				flipHorizontal: /*flipHoriz*/ ctx[6],
    				flipVertical: /*flipVert*/ ctx[5],
    				rotate: /*rotate*/ ctx[8],
    				display: /*display*/ ctx[7]
    			}
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	return {
    		c() {
    			div21 = element("div");
    			div20 = element("div");
    			button0 = element("button");
    			create_component(icon0.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			if_block0.c();
    			t1 = space();
    			div19 = element("div");
    			p0 = element("p");
    			t2 = text(/*curIconSet*/ ctx[1]);
    			t3 = space();
    			div1 = element("div");
    			if (if_block1) if_block1.c();
    			t4 = space();
    			create_component(copytoclipboard.$$.fragment);
    			t5 = space();
    			div15 = element("div");
    			div4 = element("div");
    			div2 = element("div");
    			div2.innerHTML = `<p class="tracking-wide text-md font-medium">Color</p>`;
    			t7 = space();
    			div3 = element("div");
    			create_component(icon1.$$.fragment);
    			t8 = space();
    			input0 = element("input");
    			t9 = space();
    			div8 = element("div");
    			div5 = element("div");
    			div5.innerHTML = `<p class="tracking-wide text-md font-medium">Size</p>`;
    			t11 = space();
    			div6 = element("div");
    			create_component(icon2.$$.fragment);
    			t12 = space();
    			input1 = element("input");
    			t13 = space();
    			div7 = element("div");
    			create_component(icon3.$$.fragment);
    			t14 = space();
    			input2 = element("input");
    			t15 = space();
    			div10 = element("div");
    			div9 = element("div");
    			div9.innerHTML = `<p class="tracking-wide text-md font-medium">Flip</p>`;
    			t17 = space();
    			button1 = element("button");
    			create_component(icon4.$$.fragment);
    			t18 = space();
    			p4 = element("p");
    			t19 = text("Horizontal");
    			t20 = space();
    			button2 = element("button");
    			create_component(icon5.$$.fragment);
    			t21 = space();
    			p5 = element("p");
    			t22 = text("Vertical");
    			t23 = space();
    			div12 = element("div");
    			div11 = element("div");
    			div11.innerHTML = `<p class="tracking-wide text-base font-medium">Display</p>`;
    			t25 = space();
    			button3 = element("button");
    			create_component(icon6.$$.fragment);
    			t26 = space();
    			p7 = element("p");
    			t27 = text("Block");
    			t28 = space();
    			button4 = element("button");
    			create_component(icon7.$$.fragment);
    			t29 = space();
    			p8 = element("p");
    			t30 = text("Inline");
    			t31 = space();
    			div14 = element("div");
    			div13 = element("div");
    			div13.innerHTML = `<p class="tracking-wide text-base font-medium">Rotate</p>`;
    			t33 = space();
    			button5 = element("button");
    			svg0 = svg_element("svg");
    			circle = svg_element("circle");
    			t34 = space();
    			p10 = element("p");
    			t35 = text("0°");
    			t36 = space();
    			button6 = element("button");
    			svg1 = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			t37 = space();
    			p11 = element("p");
    			t38 = text("90°");
    			t39 = space();
    			button7 = element("button");
    			svg2 = svg_element("svg");
    			path3 = svg_element("path");
    			path4 = svg_element("path");
    			path5 = svg_element("path");
    			t40 = space();
    			p12 = element("p");
    			t41 = text("180°");
    			t42 = space();
    			button8 = element("button");
    			svg3 = svg_element("svg");
    			path6 = svg_element("path");
    			path7 = svg_element("path");
    			path8 = svg_element("path");
    			t43 = space();
    			p13 = element("p");
    			t44 = text("270°");
    			t45 = space();
    			div18 = element("div");
    			div16 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t46 = space();
    			if (if_block2) if_block2.c();
    			t47 = space();
    			div17 = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr(button0, "class", "absolute right-6 top-6");
    			attr(div0, "class", "pt-12 pb-24 md:h-full relative w-full md:w-2/5 flex-shrink-0 flex items-center justify-center border-2 border-stone-600");
    			attr(p0, "class", "font-medium tracking-wide mb-2");
    			attr(div1, "class", "flex gap-4 items-center");
    			attr(div2, "class", "absolute -top-[1.3rem] left-4 bg-stone-100 p-2");
    			attr(input0, "size", "12");
    			attr(input0, "type", "text");
    			attr(input0, "class", "bg-transparent font-medium tracking-wide placeholder-stone-300");
    			attr(input0, "placeholder", "#000000");
    			attr(input0, "autocomplete", "off");
    			attr(div3, "class", "flex flex-grow gap-2 items-center");
    			attr(div4, "class", "p-4 py-2 flex flex-grow xl:flex-grow-0 gap-4 border-stone-600 border-2 relative");
    			attr(div5, "class", "absolute left-4 bg-stone-100 p-2 h-4 flex items-center");
    			set_style(div5, "top", "-0.6rem");
    			attr(input1, "size", "5");
    			attr(input1, "type", "text");
    			attr(input1, "class", "bg-transparent font-medium tracking-wide placeholder-stone-300");
    			attr(input1, "placeholder", "24");
    			attr(input1, "autocomplete", "off");
    			attr(div6, "class", "flex flex-grow gap-2 items-center ");
    			attr(input2, "size", "5");
    			attr(input2, "type", "text");
    			attr(input2, "class", "bg-transparent font-medium tracking-wide placeholder-stone-300");
    			attr(input2, "placeholder", "24");
    			attr(input2, "autocomplete", "off");
    			attr(div7, "class", "flex flex-grow gap-2 p-3 items-center ");
    			attr(div8, "class", "p-4 py-2 flex flex-grow flex-wrap xl:flex-grow-0 gap-3 border-stone-600 border-2 relative");
    			attr(div9, "class", "absolute left-4 bg-stone-100 p-2 h-4 flex items-center");
    			set_style(div9, "top", "-0.6rem");
    			attr(p4, "class", p4_class_value = "" + ((/*flipHoriz*/ ctx[6] ? 'text-stone-100' : '') + " font-medium tracking-wide"));
    			attr(button1, "class", button1_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*flipHoriz*/ ctx[6] ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all");
    			attr(p5, "class", p5_class_value = "" + ((/*flipVert*/ ctx[5] ? 'text-stone-100' : '') + " font-medium tracking-wide"));
    			attr(button2, "class", button2_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*flipVert*/ ctx[5] ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all");
    			attr(div10, "class", "p-4 flex flex-grow flex-wrap xl:flex-grow-0 gap-3 border-stone-600 border-2 relative");
    			attr(div11, "class", "absolute left-4 bg-stone-100 p-2 h-4 flex items-center");
    			set_style(div11, "top", "-0.6rem");
    			attr(p7, "class", p7_class_value = "" + ((/*display*/ ctx[7] === 'block' ? 'text-stone-100' : '') + " font-medium tracking-wide"));
    			attr(button3, "class", button3_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*display*/ ctx[7] === 'block' ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all");
    			attr(p8, "class", p8_class_value = "" + ((/*display*/ ctx[7] === 'inline' ? 'text-stone-100' : '') + " font-medium tracking-wide"));
    			attr(button4, "class", button4_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*display*/ ctx[7] === 'inline' ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all");
    			attr(div12, "class", "p-4 flex flex-grow flex-wrap xl:flex-grow-0 gap-3 border-stone-600 border-2 relative");
    			attr(div13, "class", "absolute left-4 bg-stone-100 p-2 h-4 flex items-center");
    			set_style(div13, "top", "-0.6rem");
    			attr(circle, "cx", "3");
    			attr(circle, "cy", "3");
    			attr(circle, "r", "3");
    			attr(circle, "fill", "currentColor");
    			attr(svg0, "width", "6");
    			attr(svg0, "height", "6");
    			attr(svg0, "viewBox", "0 0 6 6");
    			attr(svg0, "fill", "none");
    			attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr(svg0, "class", svg0_class_value = /*rotate*/ ctx[8] === 0 ? "text-stone-100" : "");
    			attr(p10, "class", p10_class_value = "" + ((/*rotate*/ ctx[8] === 0 ? 'text-stone-100' : '') + " font-medium tracking-wide"));
    			attr(button5, "class", button5_class_value = "flex flex-grow relative z-10 gap-2 py-3 px-4 items-center " + (/*rotate*/ ctx[8] == 0 ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all");
    			attr(path0, "d", "M12 6C13.5913 6 15.1174 6.63214 16.2426 7.75736C17.3679 8.88258 18 10.4087 18 12V14.5");
    			attr(path0, "stroke", "currentColor");
    			attr(path0, "stroke-width", "2");
    			attr(path0, "stroke-linecap", "round");
    			attr(path1, "d", "M18 15L21 12");
    			attr(path1, "stroke", "currentColor");
    			attr(path1, "stroke-width", "2");
    			attr(path1, "stroke-linecap", "round");
    			attr(path2, "d", "M18 15L15 12");
    			attr(path2, "stroke", "currentColor");
    			attr(path2, "stroke-width", "2");
    			attr(path2, "stroke-linecap", "round");
    			attr(svg1, "width", "24");
    			attr(svg1, "height", "24");
    			attr(svg1, "viewBox", "0 0 24 24");
    			attr(svg1, "fill", "none");
    			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr(svg1, "class", svg1_class_value = /*rotate*/ ctx[8] === 90 ? "text-stone-100" : "");
    			attr(p11, "class", p11_class_value = "" + ((/*rotate*/ ctx[8] === 90 ? 'text-stone-100' : '') + " font-medium tracking-wide"));
    			attr(button6, "class", button6_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*rotate*/ ctx[8] === 90 ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all");
    			attr(path3, "d", "M11.998 6C13.5893 6 15.1155 6.63214 16.2407 7.75736C17.3659 8.88258 17.998 10.4087 17.998 12C17.998 13.5913 17.3659 15.1174 16.2407 16.2426C15.1155 17.3679 13.5893 18 11.998 18H9.49805");
    			attr(path3, "stroke", "currentColor");
    			attr(path3, "stroke-width", "2");
    			attr(path3, "stroke-linecap", "round");
    			attr(path4, "d", "M9 18L12 21");
    			attr(path4, "stroke", "currentColor");
    			attr(path4, "stroke-width", "2");
    			attr(path4, "stroke-linecap", "round");
    			attr(path5, "d", "M9 18L12 15");
    			attr(path5, "stroke", "currentColor");
    			attr(path5, "stroke-width", "2");
    			attr(path5, "stroke-linecap", "round");
    			attr(svg2, "width", "24");
    			attr(svg2, "height", "24");
    			attr(svg2, "viewBox", "0 0 24 24");
    			attr(svg2, "fill", "none");
    			attr(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr(svg2, "class", svg2_class_value = /*rotate*/ ctx[8] === 180 ? "text-stone-100" : "");
    			attr(p12, "class", p12_class_value = "" + ((/*rotate*/ ctx[8] === 180 ? 'text-stone-100' : '') + " font-medium tracking-wide"));
    			attr(button7, "class", button7_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*rotate*/ ctx[8] === 180 ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all");
    			attr(path6, "d", "M13.8 5.00002C15.224 5.00002 16.6161 5.42229 17.8001 6.21344C18.9841 7.00459 19.907 8.12907 20.4519 9.4447C20.9969 10.7603 21.1395 12.208 20.8617 13.6047C20.5838 15.0013 19.8981 16.2843 18.8912 17.2912C17.8842 18.2981 16.6013 18.9839 15.2046 19.2617C13.808 19.5395 12.3603 19.3969 11.0447 18.852C9.72905 18.307 8.60456 17.3842 7.81342 16.2001C7.02227 15.0161 6.6 13.624 6.6 12.2V9.20002");
    			attr(path6, "stroke", "currentColor");
    			attr(path6, "stroke-width", "2");
    			attr(path6, "stroke-linecap", "round");
    			attr(path7, "d", "M6.6001 8.60007L3.0001 12.2001");
    			attr(path7, "stroke", "currentColor");
    			attr(path7, "stroke-width", "2");
    			attr(path7, "stroke-linecap", "round");
    			attr(path8, "d", "M6.59995 8.60007L10.2 12.2001");
    			attr(path8, "stroke", "currentColor");
    			attr(path8, "stroke-width", "2");
    			attr(path8, "stroke-linecap", "round");
    			attr(svg3, "width", "24");
    			attr(svg3, "height", "24");
    			attr(svg3, "viewBox", "0 0 24 24");
    			attr(svg3, "fill", "none");
    			attr(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr(svg3, "class", svg3_class_value = /*rotate*/ ctx[8] === 270 ? "text-stone-100" : "");
    			attr(p13, "class", p13_class_value = "" + ((/*rotate*/ ctx[8] === 270 ? 'text-stone-100' : '') + " font-medium tracking-wide"));
    			attr(button8, "class", button8_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*rotate*/ ctx[8] === 270 ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all");
    			attr(div14, "class", "p-4 flex flex-grow flex-wrap xl:flex-grow-0 gap-3 border-stone-600 border-2 relative");
    			attr(div15, "class", "flex gap-6 mt-8 flex-wrap");
    			attr(div16, "class", "flex flex-wrap gap-2");
    			attr(div17, "class", "mt-8 mb-8");
    			attr(div18, "class", "mt-12");
    			attr(div19, "class", "w-full h-full overflow-visible md:overflow-auto pr-4 mt-8");
    			attr(div20, "class", "w-full p-8 gap-8 flex flex-col md:flex-row overflow-auto md:overflow-hidden relative bg-stone-100 m-4 ssssm:m-12 700:m-24");
    			set_style(div20, "height", "calc(100vh - 8rem)");
    			attr(div21, "class", "fixed z-[60] w-full h-screen flex items-center justify-center top-0 left-0 bg-black bg-opacity-20");
    		},
    		m(target, anchor) {
    			insert(target, div21, anchor);
    			append(div21, div20);
    			append(div20, button0);
    			mount_component(icon0, button0, null);
    			append(div20, t0);
    			append(div20, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append(div20, t1);
    			append(div20, div19);
    			append(div19, p0);
    			append(p0, t2);
    			append(div19, t3);
    			append(div19, div1);
    			if (if_block1) if_block1.m(div1, null);
    			append(div1, t4);
    			mount_component(copytoclipboard, div1, null);
    			append(div19, t5);
    			append(div19, div15);
    			append(div15, div4);
    			append(div4, div2);
    			append(div4, t7);
    			append(div4, div3);
    			mount_component(icon1, div3, null);
    			append(div3, t8);
    			append(div3, input0);
    			set_input_value(input0, /*color*/ ctx[2]);
    			append(div15, t9);
    			append(div15, div8);
    			append(div8, div5);
    			append(div8, t11);
    			append(div8, div6);
    			mount_component(icon2, div6, null);
    			append(div6, t12);
    			append(div6, input1);
    			set_input_value(input1, /*width*/ ctx[4]);
    			append(div8, t13);
    			append(div8, div7);
    			mount_component(icon3, div7, null);
    			append(div7, t14);
    			append(div7, input2);
    			set_input_value(input2, /*height*/ ctx[3]);
    			append(div15, t15);
    			append(div15, div10);
    			append(div10, div9);
    			append(div10, t17);
    			append(div10, button1);
    			mount_component(icon4, button1, null);
    			append(button1, t18);
    			append(button1, p4);
    			append(p4, t19);
    			append(div10, t20);
    			append(div10, button2);
    			mount_component(icon5, button2, null);
    			append(button2, t21);
    			append(button2, p5);
    			append(p5, t22);
    			append(div15, t23);
    			append(div15, div12);
    			append(div12, div11);
    			append(div12, t25);
    			append(div12, button3);
    			mount_component(icon6, button3, null);
    			append(button3, t26);
    			append(button3, p7);
    			append(p7, t27);
    			append(div12, t28);
    			append(div12, button4);
    			mount_component(icon7, button4, null);
    			append(button4, t29);
    			append(button4, p8);
    			append(p8, t30);
    			append(div15, t31);
    			append(div15, div14);
    			append(div14, div13);
    			append(div14, t33);
    			append(div14, button5);
    			append(button5, svg0);
    			append(svg0, circle);
    			append(button5, t34);
    			append(button5, p10);
    			append(p10, t35);
    			append(div14, t36);
    			append(div14, button6);
    			append(button6, svg1);
    			append(svg1, path0);
    			append(svg1, path1);
    			append(svg1, path2);
    			append(button6, t37);
    			append(button6, p11);
    			append(p11, t38);
    			append(div14, t39);
    			append(div14, button7);
    			append(button7, svg2);
    			append(svg2, path3);
    			append(svg2, path4);
    			append(svg2, path5);
    			append(button7, t40);
    			append(button7, p12);
    			append(p12, t41);
    			append(div14, t42);
    			append(div14, button8);
    			append(button8, svg3);
    			append(svg3, path6);
    			append(svg3, path7);
    			append(svg3, path8);
    			append(button8, t43);
    			append(button8, p13);
    			append(p13, t44);
    			append(div19, t45);
    			append(div19, div18);
    			append(div18, div16);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div16, null);
    			}

    			append(div18, t46);
    			if (if_block2) if_block2.m(div18, null);
    			append(div18, t47);
    			append(div18, div17);

    			if (switch_instance) {
    				mount_component(switch_instance, div17, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(button0, "click", /*click_handler*/ ctx[13]),
    					listen(input0, "input", /*input0_input_handler*/ ctx[15]),
    					listen(input1, "input", /*input1_input_handler*/ ctx[16]),
    					listen(input2, "input", /*input2_input_handler*/ ctx[17]),
    					listen(button1, "click", /*click_handler_1*/ ctx[18]),
    					listen(button2, "click", /*click_handler_2*/ ctx[19]),
    					listen(button3, "click", /*click_handler_3*/ ctx[20]),
    					listen(button4, "click", /*click_handler_4*/ ctx[21]),
    					listen(button5, "click", /*click_handler_5*/ ctx[22]),
    					listen(button6, "click", /*click_handler_6*/ ctx[23]),
    					listen(button7, "click", /*click_handler_7*/ ctx[24]),
    					listen(button8, "click", /*click_handler_8*/ ctx[25])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div0, null);
    			}

    			if (!current || dirty[0] & /*curIconSet*/ 2) set_data(t2, /*curIconSet*/ ctx[1]);

    			if (/*curIcon*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$2(ctx);
    					if_block1.c();
    					if_block1.m(div1, t4);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			const copytoclipboard_changes = {};
    			if (dirty[0] & /*curIcon*/ 1) copytoclipboard_changes.text = /*curIcon*/ ctx[0];

    			if (dirty[0] & /*isCopied*/ 2048 | dirty[1] & /*$$scope, copy*/ 12) {
    				copytoclipboard_changes.$$scope = { dirty, ctx };
    			}

    			copytoclipboard.$set(copytoclipboard_changes);
    			const icon1_changes = {};

    			if (dirty[0] & /*color*/ 4) icon1_changes.style = "color: " + (isColor(/*color*/ ctx[2])
    			? /*color*/ ctx[2]
    			: 'currentColor');

    			icon1.$set(icon1_changes);

    			if (dirty[0] & /*color*/ 4 && input0.value !== /*color*/ ctx[2]) {
    				set_input_value(input0, /*color*/ ctx[2]);
    			}

    			if (dirty[0] & /*width*/ 16 && input1.value !== /*width*/ ctx[4]) {
    				set_input_value(input1, /*width*/ ctx[4]);
    			}

    			if (dirty[0] & /*height*/ 8 && input2.value !== /*height*/ ctx[3]) {
    				set_input_value(input2, /*height*/ ctx[3]);
    			}

    			const icon4_changes = {};
    			if (dirty[0] & /*flipHoriz*/ 64) icon4_changes.class = /*flipHoriz*/ ctx[6] ? "text-stone-100" : "";
    			icon4.$set(icon4_changes);

    			if (!current || dirty[0] & /*flipHoriz*/ 64 && p4_class_value !== (p4_class_value = "" + ((/*flipHoriz*/ ctx[6] ? 'text-stone-100' : '') + " font-medium tracking-wide"))) {
    				attr(p4, "class", p4_class_value);
    			}

    			if (!current || dirty[0] & /*flipHoriz*/ 64 && button1_class_value !== (button1_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*flipHoriz*/ ctx[6] ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all")) {
    				attr(button1, "class", button1_class_value);
    			}

    			const icon5_changes = {};
    			if (dirty[0] & /*flipVert*/ 32) icon5_changes.class = /*flipVert*/ ctx[5] ? "text-stone-100" : "";
    			icon5.$set(icon5_changes);

    			if (!current || dirty[0] & /*flipVert*/ 32 && p5_class_value !== (p5_class_value = "" + ((/*flipVert*/ ctx[5] ? 'text-stone-100' : '') + " font-medium tracking-wide"))) {
    				attr(p5, "class", p5_class_value);
    			}

    			if (!current || dirty[0] & /*flipVert*/ 32 && button2_class_value !== (button2_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*flipVert*/ ctx[5] ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all")) {
    				attr(button2, "class", button2_class_value);
    			}

    			const icon6_changes = {};
    			if (dirty[0] & /*display*/ 128) icon6_changes.class = /*display*/ ctx[7] === "block" ? "text-stone-100" : "";
    			icon6.$set(icon6_changes);

    			if (!current || dirty[0] & /*display*/ 128 && p7_class_value !== (p7_class_value = "" + ((/*display*/ ctx[7] === 'block' ? 'text-stone-100' : '') + " font-medium tracking-wide"))) {
    				attr(p7, "class", p7_class_value);
    			}

    			if (!current || dirty[0] & /*display*/ 128 && button3_class_value !== (button3_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*display*/ ctx[7] === 'block' ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all")) {
    				attr(button3, "class", button3_class_value);
    			}

    			const icon7_changes = {};
    			if (dirty[0] & /*display*/ 128) icon7_changes.class = /*display*/ ctx[7] === "inline" ? "text-stone-100" : "";
    			icon7.$set(icon7_changes);

    			if (!current || dirty[0] & /*display*/ 128 && p8_class_value !== (p8_class_value = "" + ((/*display*/ ctx[7] === 'inline' ? 'text-stone-100' : '') + " font-medium tracking-wide"))) {
    				attr(p8, "class", p8_class_value);
    			}

    			if (!current || dirty[0] & /*display*/ 128 && button4_class_value !== (button4_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*display*/ ctx[7] === 'inline' ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all")) {
    				attr(button4, "class", button4_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && svg0_class_value !== (svg0_class_value = /*rotate*/ ctx[8] === 0 ? "text-stone-100" : "")) {
    				attr(svg0, "class", svg0_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && p10_class_value !== (p10_class_value = "" + ((/*rotate*/ ctx[8] === 0 ? 'text-stone-100' : '') + " font-medium tracking-wide"))) {
    				attr(p10, "class", p10_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && button5_class_value !== (button5_class_value = "flex flex-grow relative z-10 gap-2 py-3 px-4 items-center " + (/*rotate*/ ctx[8] == 0 ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all")) {
    				attr(button5, "class", button5_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && svg1_class_value !== (svg1_class_value = /*rotate*/ ctx[8] === 90 ? "text-stone-100" : "")) {
    				attr(svg1, "class", svg1_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && p11_class_value !== (p11_class_value = "" + ((/*rotate*/ ctx[8] === 90 ? 'text-stone-100' : '') + " font-medium tracking-wide"))) {
    				attr(p11, "class", p11_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && button6_class_value !== (button6_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*rotate*/ ctx[8] === 90 ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all")) {
    				attr(button6, "class", button6_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && svg2_class_value !== (svg2_class_value = /*rotate*/ ctx[8] === 180 ? "text-stone-100" : "")) {
    				attr(svg2, "class", svg2_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && p12_class_value !== (p12_class_value = "" + ((/*rotate*/ ctx[8] === 180 ? 'text-stone-100' : '') + " font-medium tracking-wide"))) {
    				attr(p12, "class", p12_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && button7_class_value !== (button7_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*rotate*/ ctx[8] === 180 ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all")) {
    				attr(button7, "class", button7_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && svg3_class_value !== (svg3_class_value = /*rotate*/ ctx[8] === 270 ? "text-stone-100" : "")) {
    				attr(svg3, "class", svg3_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && p13_class_value !== (p13_class_value = "" + ((/*rotate*/ ctx[8] === 270 ? 'text-stone-100' : '') + " font-medium tracking-wide"))) {
    				attr(p13, "class", p13_class_value);
    			}

    			if (!current || dirty[0] & /*rotate*/ 256 && button8_class_value !== (button8_class_value = "flex flex-grow relative z-10 gap-2 p-3 items-center " + (/*rotate*/ ctx[8] === 270 ? 'bg-stone-600' : '') + " border-2 border-stone-600 transition-all")) {
    				attr(button8, "class", button8_class_value);
    			}

    			if (dirty[0] & /*currentTab, currentSubTab, tabs*/ 5632) {
    				each_value_1 = /*tabs*/ ctx[12];
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div16, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*tabs*/ ctx[12][/*currentTab*/ ctx[9]].subtabs) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$2(ctx);
    					if_block2.c();
    					if_block2.m(div18, t47);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			const switch_instance_changes = {};
    			if (dirty[0] & /*curIcon*/ 1) switch_instance_changes.icon = /*curIcon*/ ctx[0];
    			if (dirty[0] & /*color*/ 4) switch_instance_changes.color = /*color*/ ctx[2];
    			if (dirty[0] & /*width*/ 16) switch_instance_changes.width = /*width*/ ctx[4];
    			if (dirty[0] & /*height*/ 8) switch_instance_changes.height = /*height*/ ctx[3];
    			if (dirty[0] & /*flipHoriz*/ 64) switch_instance_changes.flipHorizontal = /*flipHoriz*/ ctx[6];
    			if (dirty[0] & /*flipVert*/ 32) switch_instance_changes.flipVertical = /*flipVert*/ ctx[5];
    			if (dirty[0] & /*rotate*/ 256) switch_instance_changes.rotate = /*rotate*/ ctx[8];
    			if (dirty[0] & /*display*/ 128) switch_instance_changes.display = /*display*/ ctx[7];

    			if (switch_value !== (switch_value = /*tabs*/ ctx[12][/*currentTab*/ ctx[9]].subTab || /*tabs*/ ctx[12][/*currentTab*/ ctx[9]].subtabs[/*currentSubTab*/ ctx[10]][1])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div17, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon0.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(copytoclipboard.$$.fragment, local);
    			transition_in(icon1.$$.fragment, local);
    			transition_in(icon2.$$.fragment, local);
    			transition_in(icon3.$$.fragment, local);
    			transition_in(icon4.$$.fragment, local);
    			transition_in(icon5.$$.fragment, local);
    			transition_in(icon6.$$.fragment, local);
    			transition_in(icon7.$$.fragment, local);

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);

    			add_render_callback(() => {
    				if (div20_outro) div20_outro.end(1);
    				div20_intro = create_in_transition(div20, slide, {});
    				div20_intro.start();
    			});

    			add_render_callback(() => {
    				if (div21_outro) div21_outro.end(1);
    				div21_intro = create_in_transition(div21, fade, {});
    				div21_intro.start();
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(icon0.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(copytoclipboard.$$.fragment, local);
    			transition_out(icon1.$$.fragment, local);
    			transition_out(icon2.$$.fragment, local);
    			transition_out(icon3.$$.fragment, local);
    			transition_out(icon4.$$.fragment, local);
    			transition_out(icon5.$$.fragment, local);
    			transition_out(icon6.$$.fragment, local);
    			transition_out(icon7.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			if (div20_intro) div20_intro.invalidate();
    			div20_outro = create_out_transition(div20, slide, {});
    			if (div21_intro) div21_intro.invalidate();
    			div21_outro = create_out_transition(div21, fade, {});
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div21);
    			destroy_component(icon0);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    			destroy_component(copytoclipboard);
    			destroy_component(icon1);
    			destroy_component(icon2);
    			destroy_component(icon3);
    			destroy_component(icon4);
    			destroy_component(icon5);
    			destroy_component(icon6);
    			destroy_component(icon7);
    			destroy_each(each_blocks, detaching);
    			if (if_block2) if_block2.d();
    			if (switch_instance) destroy_component(switch_instance);
    			if (detaching && div20_outro) div20_outro.end();
    			if (detaching && div21_outro) div21_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let curIcon = null;
    	let curIconSet = null;
    	let color = "";
    	let height;
    	let width = height = "";
    	let flipVert = false;
    	let flipHoriz = false;
    	let display = "block";
    	let rotate = 0;
    	let currentTab = 0;
    	let currentSubTab = 0;
    	let isCopied = false;

    	let tabs = [
    		{
    			name: "HTML",
    			icon: "icomoon-free:html-five",
    			subtabs: [["SVG Frameworks", SVGFrameworks], ["CSS", CSS]]
    		},
    		{
    			name: "React",
    			icon: "akar-icons:react-fill",
    			subtabs: [["React", React], ["React (offline)", ReactOffline]]
    		},
    		{
    			name: "Vue",
    			icon: "akar-icons:vue-fill",
    			subtabs: [
    				["Vue3", Vue3],
    				["Vue2", Vue2],
    				["Vue3 (offline)", Vue3Offline],
    				["Vue2 (offline)", Vue2Offline]
    			]
    		},
    		{
    			name: "Svelte",
    			icon: "cib:svelte",
    			subtabs: [["Svelte", Svelte], ["Svelte (offline)", SvelteOffline]]
    		},
    		{
    			name: "Ember",
    			icon: "file-icons:ember",
    			subTab: Ember
    		},
    		{
    			name: "SVG",
    			icon: "mdi:svg",
    			subtabs: [
    				["SVG", SVG],
    				["SVG with viewBox rectangle", SVGWithRectangle],
    				["SVG as data: URI", SVGURI]
    			]
    		}
    	];

    	currentIcon.subscribe(value => {
    		$$invalidate(0, curIcon = value);
    	});

    	currentIconSet.subscribe(value => {
    		$$invalidate(1, curIconSet = value);
    	});

    	const click_handler = () => currentIcon.set(null);

    	const copy_handler = () => {
    		$$invalidate(11, isCopied = true);

    		setTimeout(
    			() => {
    				$$invalidate(11, isCopied = false);
    			},
    			1000
    		);
    	};

    	function input0_input_handler() {
    		color = this.value;
    		$$invalidate(2, color);
    	}

    	function input1_input_handler() {
    		width = this.value;
    		$$invalidate(4, width);
    	}

    	function input2_input_handler() {
    		height = this.value;
    		$$invalidate(3, height);
    	}

    	const click_handler_1 = () => $$invalidate(6, flipHoriz = !flipHoriz);
    	const click_handler_2 = () => $$invalidate(5, flipVert = !flipVert);
    	const click_handler_3 = () => $$invalidate(7, display = "block");
    	const click_handler_4 = () => $$invalidate(7, display = "inline");
    	const click_handler_5 = () => $$invalidate(8, rotate = 0);
    	const click_handler_6 = () => $$invalidate(8, rotate = 90);
    	const click_handler_7 = () => $$invalidate(8, rotate = 180);
    	const click_handler_8 = () => $$invalidate(8, rotate = 270);

    	const click_handler_9 = index => {
    		$$invalidate(9, currentTab = index);
    		$$invalidate(10, currentSubTab = 0);
    	};

    	const click_handler_10 = index => {
    		$$invalidate(10, currentSubTab = index);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*curIcon*/ 1) {
    			document.body.style.overflow = curIcon ? "hidden" : "auto";
    		}
    	};

    	return [
    		curIcon,
    		curIconSet,
    		color,
    		height,
    		width,
    		flipVert,
    		flipHoriz,
    		display,
    		rotate,
    		currentTab,
    		currentSubTab,
    		isCopied,
    		tabs,
    		click_handler,
    		copy_handler,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10
    	];
    }

    class Usage extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {}, null, [-1, -1]);
    	}
    }

    /* src/IconList/IconList.svelte generated by Svelte v3.48.0 */

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	return child_ctx;
    }

    // (115:2) {#if tags.length}
    function create_if_block_3$1(ctx) {
    	let div;
    	let each_value_1 = /*tags*/ ctx[5].sort();
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "flex flex-wrap justify-center mb-12 gap-2");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty & /*currentTag, tags, setCurrentTag*/ 608) {
    				each_value_1 = /*tags*/ ctx[5].sort();
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (118:8) {#if tag}
    function create_if_block_4(ctx) {
    	let button;
    	let t_value = /*tag*/ ctx[21] + "";
    	let t;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[12](/*tag*/ ctx[21]);
    	}

    	return {
    		c() {
    			button = element("button");
    			t = text(t_value);

    			attr(button, "class", button_class_value = "" + ((/*currentTag*/ ctx[6] === /*tag*/ ctx[21]
    			? `bg-stone-600 text-stone-200`
    			: `border-2 border-stone-600 `) + " whitespace-nowrap h-11 flex transition-all items-center justify-center font-medium text-sm px-8 flex-grow md:flex-grow-0"));
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			append(button, t);

    			if (!mounted) {
    				dispose = listen(button, "click", click_handler);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*tags*/ 32 && t_value !== (t_value = /*tag*/ ctx[21] + "")) set_data(t, t_value);

    			if (dirty & /*currentTag, tags*/ 96 && button_class_value !== (button_class_value = "" + ((/*currentTag*/ ctx[6] === /*tag*/ ctx[21]
    			? `bg-stone-600 text-stone-200`
    			: `border-2 border-stone-600 `) + " whitespace-nowrap h-11 flex transition-all items-center justify-center font-medium text-sm px-8 flex-grow md:flex-grow-0"))) {
    				attr(button, "class", button_class_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (117:6) {#each tags.sort() as tag}
    function create_each_block_1$1(ctx) {
    	let if_block_anchor;
    	let if_block = /*tag*/ ctx[21] && create_if_block_4(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (/*tag*/ ctx[21]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (193:2) {:else}
    function create_else_block_1$1(ctx) {
    	let p;

    	return {
    		c() {
    			p = element("p");
    			p.textContent = "Nothing found :(";
    			attr(p, "class", "text-xl font-medium tracking-wide text-center ");
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(p);
    		}
    	};
    }

    // (130:2) {#if filteredIconList === null || filteredIconList.length > 0}
    function create_if_block_1$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2$1, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*filteredIconList*/ ctx[8]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (180:4) {:else}
    function create_else_block$1(ctx) {
    	let div;
    	let lottieplayer;
    	let current;

    	lottieplayer = new LottiePlayer({
    			props: {
    				src: "/assets/loading_anim.json",
    				autoplay: true,
    				loop: true,
    				renderer: "svg",
    				background: "transparent",
    				height: 160,
    				width: 160
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(lottieplayer.$$.fragment);
    			attr(div, "class", "flex justify-center w-full");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(lottieplayer, div, null);
    			current = true;
    		},
    		p: noop,
    		i(local) {
    			if (current) return;
    			transition_in(lottieplayer.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(lottieplayer.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(lottieplayer);
    		}
    	};
    }

    // (131:4) {#if filteredIconList}
    function create_if_block_2$1(ctx) {
    	let div;
    	let current;
    	let each_value = /*filteredIconList*/ ctx[8];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "w-full pb-8 grid gap-3");
    			set_style(div, "grid-template-columns", "repeat(auto-fill, minmax(200px, 1fr))");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty & /*currentIcon, iconSet, filteredIconList*/ 257) {
    				each_value = /*filteredIconList*/ ctx[8];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (161:8) {#each filteredIconList as icon}
    function create_each_block$1(ctx) {
    	let div;
    	let icon;
    	let t0;
    	let p;
    	let t1_value = (/*icon*/ ctx[18].name || /*icon*/ ctx[18]) + "";
    	let t1;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: {
    				icon: `${/*iconSet*/ ctx[0]}:${/*icon*/ ctx[18].name || /*icon*/ ctx[18]}`,
    				width: "24",
    				height: "24",
    				class: " flex-shrink-0"
    			}
    		});

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[13](/*icon*/ ctx[18]);
    	}

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			attr(p, "class", "font-medium text-sm tracking-wide truncate ml-3 -mb-0.5");
    			attr(div, "class", "flex items-center cursor-pointer transition-all hover:bg-stone-200 p-4");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			append(div, t0);
    			append(div, p);
    			append(p, t1);
    			append(div, t2);
    			current = true;

    			if (!mounted) {
    				dispose = listen(div, "click", click_handler_1);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			const icon_changes = {};
    			if (dirty & /*iconSet, filteredIconList*/ 257) icon_changes.icon = `${/*iconSet*/ ctx[0]}:${/*icon*/ ctx[18].name || /*icon*/ ctx[18]}`;
    			icon.$set(icon_changes);
    			if ((!current || dirty & /*filteredIconList*/ 256) && t1_value !== (t1_value = (/*icon*/ ctx[18].name || /*icon*/ ctx[18]) + "")) set_data(t1, t1_value);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (198:2) {#if curIcon}
    function create_if_block$1(ctx) {
    	let usage;
    	let current;
    	usage = new Usage({});

    	return {
    		c() {
    			create_component(usage.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(usage, target, anchor);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(usage.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(usage.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(usage, detaching);
    		}
    	};
    }

    function create_fragment$2(ctx) {
    	let div1;
    	let h1;
    	let t0;
    	let span;
    	let t1;
    	let t2;
    	let t3;
    	let div0;
    	let icon;
    	let t4;
    	let input;
    	let input_placeholder_value;
    	let t5;
    	let t6;
    	let current_block_type_index;
    	let if_block1;
    	let t7;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: {
    				icon: "uil:search",
    				class: "",
    				width: "24",
    				height: "24"
    			}
    		});

    	let if_block0 = /*tags*/ ctx[5].length && create_if_block_3$1(ctx);
    	const if_block_creators = [create_if_block_1$1, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*filteredIconList*/ ctx[8] === null || /*filteredIconList*/ ctx[8].length > 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block2 = /*curIcon*/ ctx[1] && create_if_block$1();

    	return {
    		c() {
    			div1 = element("div");
    			h1 = element("h1");
    			t0 = text(/*name*/ ctx[3]);
    			span = element("span");
    			t1 = text("v");
    			t2 = text(/*version*/ ctx[2]);
    			t3 = space();
    			div0 = element("div");
    			create_component(icon.$$.fragment);
    			t4 = space();
    			input = element("input");
    			t5 = space();
    			if (if_block0) if_block0.c();
    			t6 = space();
    			if_block1.c();
    			t7 = space();
    			if (if_block2) if_block2.c();
    			attr(span, "class", "ml-2 text-base ");
    			attr(h1, "class", "mt-12 mb-6 text-3xl font-semibold tracking-wide text-center flex flex-col items-center gap-6 sm:inline");
    			attr(input, "type", "text");
    			attr(input, "id", "icon-search");
    			attr(input, "class", "w-full tracking-wide placeholder-stone-600 bg-transparent");
    			attr(input, "placeholder", input_placeholder_value = "Search " + /*iconCount*/ ctx[4] + " icons (Press '/' to focus)");
    			attr(div0, "class", "inline-flex items-center w-full p-4 mx-auto mb-6 overflow-hidden border-2 border-stone-600 gap-4");
    			attr(div1, "class", "flex flex-1 flex-col w-full px-12 md:px-24");
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, h1);
    			append(h1, t0);
    			append(h1, span);
    			append(span, t1);
    			append(span, t2);
    			append(div1, t3);
    			append(div1, div0);
    			mount_component(icon, div0, null);
    			append(div0, t4);
    			append(div0, input);
    			set_input_value(input, /*searchTerm*/ ctx[7]);
    			append(div1, t5);
    			if (if_block0) if_block0.m(div1, null);
    			append(div1, t6);
    			if_blocks[current_block_type_index].m(div1, null);
    			append(div1, t7);
    			if (if_block2) if_block2.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(input, "input", /*input_input_handler*/ ctx[11]),
    					listen(input, "input", /*inputOnChange*/ ctx[10])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (!current || dirty & /*name*/ 8) set_data(t0, /*name*/ ctx[3]);
    			if (!current || dirty & /*version*/ 4) set_data(t2, /*version*/ ctx[2]);

    			if (!current || dirty & /*iconCount*/ 16 && input_placeholder_value !== (input_placeholder_value = "Search " + /*iconCount*/ ctx[4] + " icons (Press '/' to focus)")) {
    				attr(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*searchTerm*/ 128 && input.value !== /*searchTerm*/ ctx[7]) {
    				set_input_value(input, /*searchTerm*/ ctx[7]);
    			}

    			if (/*tags*/ ctx[5].length) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3$1(ctx);
    					if_block0.c();
    					if_block0.m(div1, t6);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div1, t7);
    			}

    			if (/*curIcon*/ ctx[1]) {
    				if (if_block2) {
    					if (dirty & /*curIcon*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$1();
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div1, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div1);
    			destroy_component(icon);
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { iconSet } = $$props;
    	let curIcon = null;

    	currentIcon.subscribe(value => {
    		$$invalidate(1, curIcon = value);
    	});

    	let iconlist = null;
    	let version = "";
    	let name = "";
    	let iconCount = 0;
    	let tags = [];
    	let currentTag = null;
    	let searchTerm = null;
    	let filteredIconList = null;

    	async function getIconSet() {
    		const res = await fetch(`https:cors-anywhere.thecodeblog.net/icon-sets.iconify.design/assets/collection.${iconSet}.js`);
    		let data = await res.text();
    		data = JSON.parse(data.match(/=(.+);/)[1]);
    		iconlist = data.icons;
    		$$invalidate(2, version = data.info.version || "1.0.0");
    		$$invalidate(3, name = data.info.name);
    		$$invalidate(4, iconCount = data.info.total);
    		$$invalidate(5, tags = data.tags || []);
    		data.info.category;
    		currentIconSet.set(name);
    		$$invalidate(8, filteredIconList = iconlist);
    	}

    	getIconSet();

    	const setCurrentTag = tag => {
    		if (currentTag !== tag) {
    			$$invalidate(6, currentTag = tag);

    			$$invalidate(8, filteredIconList = iconlist.filter(icon => {
    				return icon.tags.includes(tag) && (icon.name || icon).toLowerCase().includes(document.getElementById("icon-search").value.toLowerCase());
    			}));
    		} else {
    			$$invalidate(6, currentTag = null);

    			$$invalidate(8, filteredIconList = iconlist.filter(icon => {
    				return (icon.name || icon).toLowerCase().includes(document.getElementById("icon-search").value.toLowerCase());
    			}));
    		}
    	};

    	const inputOnChange = function (e) {
    		$$invalidate(8, filteredIconList = iconlist.filter(icon => {
    			return (icon.name || icon).toLowerCase().includes(e.target.value.toLowerCase()) && (currentTag ? icon.tags.includes(currentTag) : true);
    		}));
    	};

    	onMount(() => {
    		document.body.onkeydown = e => {
    			if (e.key == "/") {
    				e.preventDefault();
    				document.getElementById("icon-search").focus();
    			}
    		};
    	});

    	function input_input_handler() {
    		searchTerm = this.value;
    		$$invalidate(7, searchTerm);
    	}

    	const click_handler = tag => setCurrentTag(tag);

    	const click_handler_1 = icon => {
    		currentIcon.set(`${iconSet}:${icon.name || icon}`);
    	};

    	$$self.$$set = $$props => {
    		if ('iconSet' in $$props) $$invalidate(0, iconSet = $$props.iconSet);
    	};

    	return [
    		iconSet,
    		curIcon,
    		version,
    		name,
    		iconCount,
    		tags,
    		currentTag,
    		searchTerm,
    		filteredIconList,
    		setCurrentTag,
    		inputOnChange,
    		input_input_handler,
    		click_handler,
    		click_handler_1
    	];
    }

    class IconList extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { iconSet: 0 });
    	}
    }

    /* src/SearchAll/SearchAll.svelte generated by Svelte v3.48.0 */

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i][0];
    	child_ctx[16] = list[i][1];
    	return child_ctx;
    }

    // (73:2) {#if iconSets}
    function create_if_block_3(ctx) {
    	let div;
    	let each_value_1 = Object.entries(/*iconSets*/ ctx[0]);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "flex flex-wrap justify-center mb-12 gap-2");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty & /*currentIconSet, Object, iconSets, setCurrentIconSet*/ 35) {
    				each_value_1 = Object.entries(/*iconSets*/ ctx[0]);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (75:6) {#each Object.entries(iconSets) as [name, iconSet]}
    function create_each_block_1(ctx) {
    	let button;
    	let t_value = /*iconSet*/ ctx[16].name + "";
    	let t;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*name*/ ctx[15]);
    	}

    	return {
    		c() {
    			button = element("button");
    			t = text(t_value);

    			attr(button, "class", button_class_value = "" + ((/*currentIconSet*/ ctx[1] === /*name*/ ctx[15]
    			? `bg-stone-600`
    			: ``) + " border-2 border-stone-600 whitespace-nowrap h-11 flex transition-all items-center justify-center font-medium px-4 flex-grow sssm:px-8 pb-0.5"));
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			append(button, t);

    			if (!mounted) {
    				dispose = listen(button, "click", click_handler);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*iconSets*/ 1 && t_value !== (t_value = /*iconSet*/ ctx[16].name + "")) set_data(t, t_value);

    			if (dirty & /*currentIconSet, iconSets*/ 3 && button_class_value !== (button_class_value = "" + ((/*currentIconSet*/ ctx[1] === /*name*/ ctx[15]
    			? `bg-stone-600`
    			: ``) + " border-2 border-stone-600 whitespace-nowrap h-11 flex transition-all items-center justify-center font-medium px-4 flex-grow sssm:px-8 pb-0.5"))) {
    				attr(button, "class", button_class_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (121:2) {:else}
    function create_else_block_1(ctx) {
    	let p;

    	return {
    		c() {
    			p = element("p");
    			p.textContent = "Nothing found :(";
    			attr(p, "class", "text-xl font-medium tracking-wide text-center text-stone-500");
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(p);
    		}
    	};
    }

    // (86:2) {#if filteredIconList === null || filteredIconList.length > 0}
    function create_if_block_1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2, create_else_block];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*filteredIconList*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    // (108:4) {:else}
    function create_else_block(ctx) {
    	let div;
    	let lottieplayer;
    	let current;

    	lottieplayer = new LottiePlayer({
    			props: {
    				src: "/assets/loading_anim.json",
    				autoplay: true,
    				loop: true,
    				renderer: "svg",
    				background: "transparent",
    				height: 160,
    				width: 160
    			}
    		});

    	return {
    		c() {
    			div = element("div");
    			create_component(lottieplayer.$$.fragment);
    			attr(div, "class", "flex justify-center w-full");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(lottieplayer, div, null);
    			current = true;
    		},
    		p: noop,
    		i(local) {
    			if (current) return;
    			transition_in(lottieplayer.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(lottieplayer.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(lottieplayer);
    		}
    	};
    }

    // (87:4) {#if filteredIconList}
    function create_if_block_2(ctx) {
    	let div;
    	let current;
    	let each_value = /*filteredIconList*/ ctx[2];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "w-full pb-8 grid gap-4");
    			set_style(div, "grid-template-columns", "repeat(auto-fill, minmax(200px, 1fr))");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (dirty & /*currentIcon, filteredIconList*/ 4) {
    				each_value = /*filteredIconList*/ ctx[2];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (92:8) {#each filteredIconList as icon}
    function create_each_block(ctx) {
    	let div;
    	let icon;
    	let t0;
    	let p;
    	let t1_value = /*icon*/ ctx[12] + "";
    	let t1;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;

    	icon = new Icon({
    			props: {
    				icon: /*icon*/ ctx[12],
    				width: "32",
    				height: "32",
    				class: ""
    			}
    		});

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[7](/*icon*/ ctx[12]);
    	}

    	return {
    		c() {
    			div = element("div");
    			create_component(icon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			attr(p, "class", "font-medium text-xs tracking-wide text-center mt-4 -mb-0.5");
    			attr(div, "class", "flex flex-col items-center cursor-pointer transition-all hover:bg-stone-200 p-4");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			mount_component(icon, div, null);
    			append(div, t0);
    			append(div, p);
    			append(p, t1);
    			append(div, t2);
    			current = true;

    			if (!mounted) {
    				dispose = listen(div, "click", click_handler_1);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			const icon_changes = {};
    			if (dirty & /*filteredIconList*/ 4) icon_changes.icon = /*icon*/ ctx[12];
    			icon.$set(icon_changes);
    			if ((!current || dirty & /*filteredIconList*/ 4) && t1_value !== (t1_value = /*icon*/ ctx[12] + "")) set_data(t1, t1_value);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (126:2) {#if curIcon}
    function create_if_block(ctx) {
    	let usage;
    	let current;
    	usage = new Usage({});

    	return {
    		c() {
    			create_component(usage.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(usage, target, anchor);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(usage.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(usage.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(usage, detaching);
    		}
    	};
    }

    function create_fragment$1(ctx) {
    	let div;
    	let h1;
    	let t3;
    	let t4;
    	let current_block_type_index;
    	let if_block1;
    	let t5;
    	let current;
    	let if_block0 = /*iconSets*/ ctx[0] && create_if_block_3(ctx);
    	const if_block_creators = [create_if_block_1, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*filteredIconList*/ ctx[2] === null || /*filteredIconList*/ ctx[2].length > 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block2 = /*curIcon*/ ctx[3] && create_if_block();

    	return {
    		c() {
    			div = element("div");
    			h1 = element("h1");
    			h1.textContent = `Search results for "${/*searchTerm*/ ctx[4]}"`;
    			t3 = space();
    			if (if_block0) if_block0.c();
    			t4 = space();
    			if_block1.c();
    			t5 = space();
    			if (if_block2) if_block2.c();
    			attr(h1, "class", "mb-6 text-3xl font-semibold tracking-wide text-center sm:mt-12");
    			attr(div, "class", "flex-1 px-12 md:px-24");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, h1);
    			append(div, t3);
    			if (if_block0) if_block0.m(div, null);
    			append(div, t4);
    			if_blocks[current_block_type_index].m(div, null);
    			append(div, t5);
    			if (if_block2) if_block2.m(div, null);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (/*iconSets*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3(ctx);
    					if_block0.c();
    					if_block0.m(div, t4);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div, t5);
    			}

    			if (/*curIcon*/ ctx[3]) {
    				if (if_block2) {
    					if (dirty & /*curIcon*/ 8) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block();
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			if (if_block2) if_block2.d();
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {

    	let iconlist = null;
    	let iconSets = null;
    	const urlParams = new URLSearchParams(window.location.search);
    	const searchTerm = urlParams.get("q");
    	let currentIconSet = null;
    	let filteredIconList = null;
    	let curIcon = null;

    	currentIcon.subscribe(value => {
    		$$invalidate(3, curIcon = value);
    	});

    	async function getIconSet() {
    		const res = await fetch(`https://cors-anywhere.thecodeblog.net/api.iconify.design/search?query=${searchTerm}&limit=9999`);
    		const data = await res.json();

    		if (data.icons.length) {
    			iconlist = data.icons;
    		} else {
    			iconlist = [];
    		}

    		$$invalidate(0, iconSets = data.collections);
    		$$invalidate(2, filteredIconList = iconlist);
    	}

    	getIconSet();

    	document.addEventListener("keypress", e => {
    		if (e.code === "Slash") {
    			document.querySelector("input").focus();
    			e.preventDefault();
    		}
    	});

    	const setCurrentIconSet = iconSet => {
    		if (currentIconSet !== iconSet) {
    			$$invalidate(1, currentIconSet = iconSet);
    			$$invalidate(2, filteredIconList = iconlist.filter(e => e.split(":").shift() === iconSet));
    		} else {
    			$$invalidate(1, currentIconSet = null);
    			$$invalidate(2, filteredIconList = iconlist);
    		}
    	};

    	const click_handler = name => setCurrentIconSet(name);

    	const click_handler_1 = icon => {
    		currentIcon.set(icon);
    	};

    	return [
    		iconSets,
    		currentIconSet,
    		filteredIconList,
    		curIcon,
    		searchTerm,
    		setCurrentIconSet,
    		click_handler,
    		click_handler_1
    	];
    }

    class SearchAll extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
    	}
    }

    /* src/App.svelte generated by Svelte v3.48.0 */

    function create_default_slot_4(ctx) {
    	let home;
    	let current;
    	home = new Home({});

    	return {
    		c() {
    			create_component(home.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(home, target, anchor);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(home.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(home, detaching);
    		}
    	};
    }

    // (35:4) <Route path="/icon-set/:iconSet" let:params>
    function create_default_slot_3(ctx) {
    	let iconlist;
    	let current;

    	iconlist = new IconList({
    			props: { iconSet: /*params*/ ctx[1].iconSet }
    		});

    	return {
    		c() {
    			create_component(iconlist.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(iconlist, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const iconlist_changes = {};
    			if (dirty & /*params*/ 2) iconlist_changes.iconSet = /*params*/ ctx[1].iconSet;
    			iconlist.$set(iconlist_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(iconlist.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(iconlist.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(iconlist, detaching);
    		}
    	};
    }

    // (38:4) <Route path="/icon-sets">
    function create_default_slot_2(ctx) {
    	let browse;
    	let current;
    	browse = new Browse({});

    	return {
    		c() {
    			create_component(browse.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(browse, target, anchor);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(browse.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(browse.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(browse, detaching);
    		}
    	};
    }

    // (41:4) <Route path="/search">
    function create_default_slot_1(ctx) {
    	let searchall;
    	let current;
    	searchall = new SearchAll({});

    	return {
    		c() {
    			create_component(searchall.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(searchall, target, anchor);
    			current = true;
    		},
    		i(local) {
    			if (current) return;
    			transition_in(searchall.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(searchall.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(searchall, detaching);
    		}
    	};
    }

    // (29:0) <Router>
    function create_default_slot(ctx) {
    	let main;
    	let navbar;
    	let t0;
    	let route0;
    	let t1;
    	let route1;
    	let t2;
    	let route2;
    	let t3;
    	let route3;
    	let t4;
    	let footer;
    	let current;
    	navbar = new Navbar({});

    	route0 = new Route$1({
    			props: {
    				path: "/",
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			}
    		});

    	route1 = new Route$1({
    			props: {
    				path: "/icon-set/:iconSet",
    				$$slots: {
    					default: [
    						create_default_slot_3,
    						({ params }) => ({ 1: params }),
    						({ params }) => params ? 2 : 0
    					]
    				},
    				$$scope: { ctx }
    			}
    		});

    	route2 = new Route$1({
    			props: {
    				path: "/icon-sets",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			}
    		});

    	route3 = new Route$1({
    			props: {
    				path: "/search",
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			}
    		});

    	footer = new Footer({});

    	return {
    		c() {
    			main = element("main");
    			create_component(navbar.$$.fragment);
    			t0 = space();
    			create_component(route0.$$.fragment);
    			t1 = space();
    			create_component(route1.$$.fragment);
    			t2 = space();
    			create_component(route2.$$.fragment);
    			t3 = space();
    			create_component(route3.$$.fragment);
    			t4 = space();
    			create_component(footer.$$.fragment);
    			attr(main, "class", "pt-8 bg-stone-100 min-h-[100vh] flex flex-col");
    		},
    		m(target, anchor) {
    			insert(target, main, anchor);
    			mount_component(navbar, main, null);
    			append(main, t0);
    			mount_component(route0, main, null);
    			append(main, t1);
    			mount_component(route1, main, null);
    			append(main, t2);
    			mount_component(route2, main, null);
    			append(main, t3);
    			mount_component(route3, main, null);
    			append(main, t4);
    			mount_component(footer, main, null);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const route0_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				route0_changes.$$scope = { dirty, ctx };
    			}

    			route0.$set(route0_changes);
    			const route1_changes = {};

    			if (dirty & /*$$scope, params*/ 6) {
    				route1_changes.$$scope = { dirty, ctx };
    			}

    			route1.$set(route1_changes);
    			const route2_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				route2_changes.$$scope = { dirty, ctx };
    			}

    			route2.$set(route2_changes);
    			const route3_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				route3_changes.$$scope = { dirty, ctx };
    			}

    			route3.$set(route3_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(navbar.$$.fragment, local);
    			transition_in(route0.$$.fragment, local);
    			transition_in(route1.$$.fragment, local);
    			transition_in(route2.$$.fragment, local);
    			transition_in(route3.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(navbar.$$.fragment, local);
    			transition_out(route0.$$.fragment, local);
    			transition_out(route1.$$.fragment, local);
    			transition_out(route2.$$.fragment, local);
    			transition_out(route3.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(main);
    			destroy_component(navbar);
    			destroy_component(route0);
    			destroy_component(route1);
    			destroy_component(route2);
    			destroy_component(route3);
    			destroy_component(footer);
    		}
    	};
    }

    function create_fragment(ctx) {
    	let router;
    	let current;

    	router = new Router$1({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			create_component(router.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(router, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const router_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				router_changes.$$scope = { dirty, ctx };
    			}

    			router.$set(router_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(router, detaching);
    		}
    	};
    }

    function instance($$self) {
    	window.onload = () => {
    		window.scrollTo({ top: 0 });
    	};

    	let theme = localStorage.theme;

    	if (theme === "dark" || !theme && window.matchMedia("(prefers-color-scheme: dark)").matches) {
    		document.documentElement.classList.add("dark");
    		localStorage.theme = "dark";
    	} else {
    		document.documentElement.classList.remove("dark");
    		localStorage.theme = "light";
    	}

    	return [];
    }

    class App extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance, create_fragment, safe_not_equal, {});
    	}
    }

    const app = new App({
        target: document.body,
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
